From 1239a5c73e2590827b30489d048d20542b8a8c29 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sat, 18 May 2024 20:23:34 +1000
Subject: [PATCH 01/76] [cmake][modules] FindDetours correctly set
 IMPORTED_LOCATION_RELEASE property

---
 cmake/modules/FindDetours.cmake | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/cmake/modules/FindDetours.cmake b/cmake/modules/FindDetours.cmake
index 6d87c85ea618e..50fce108becbe 100644
--- a/cmake/modules/FindDetours.cmake
+++ b/cmake/modules/FindDetours.cmake
@@ -26,11 +26,17 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   if(DETOURS_FOUND)
     add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
     set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
-                                                                     INTERFACE_INCLUDE_DIRECTORIES "${DETOURS_INCLUDE_DIR}"
-                                                                     IMPORTED_LOCATION "${DETOURS_LIBRARY_RELEASE}")
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${DETOURS_INCLUDE_DIR}")
+    if(DETOURS_LIBRARY_RELEASE)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_CONFIGURATIONS RELEASE
+                                                                       IMPORTED_LOCATION_RELEASE "${DETOURS_LIBRARY_RELEASE}")
+    endif()
     if(DETOURS_LIBRARY_DEBUG)
       set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
                                                                        IMPORTED_LOCATION_DEBUG "${DETOURS_LIBRARY_DEBUG}")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            IMPORTED_CONFIGURATIONS DEBUG)
     endif()
   else()
     if(Detours_FIND_REQUIRED)

From adaa800e228eb11783650c59ea8121fc0c1a0b23 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 19 May 2024 09:39:39 +1000
Subject: [PATCH 02/76] [cmake][modules] FindCrossGUID fix
 IMPORTED_CONFIGURATIONS list

---
 cmake/modules/FindCrossGUID.cmake | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/cmake/modules/FindCrossGUID.cmake b/cmake/modules/FindCrossGUID.cmake
index b5035c3c53081..56a43f58ce0b6 100644
--- a/cmake/modules/FindCrossGUID.cmake
+++ b/cmake/modules/FindCrossGUID.cmake
@@ -80,8 +80,9 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
     endif()
     if(CROSSGUID_LIBRARY_DEBUG)
       set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
-                                                                       IMPORTED_CONFIGURATIONS DEBUG
                                                                        IMPORTED_LOCATION_DEBUG "${CROSSGUID_LIBRARY_DEBUG}")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            IMPORTED_CONFIGURATIONS DEBUG)
     endif()
     set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
                                                                      INTERFACE_INCLUDE_DIRECTORIES "${CROSSGUID_INCLUDE_DIRS}"

From 490b80ad1b1b1d9a7e8ceb0cfbd27169698e79ea Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 19 May 2024 09:40:41 +1000
Subject: [PATCH 03/76] [cmake][modules] FindCurl fix IMPORTED_CONFIGURATIONS
 list

---
 cmake/modules/FindCurl.cmake | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/cmake/modules/FindCurl.cmake b/cmake/modules/FindCurl.cmake
index 4e289cbe0e5f8..7870b11031739 100644
--- a/cmake/modules/FindCurl.cmake
+++ b/cmake/modules/FindCurl.cmake
@@ -176,8 +176,9 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
       endif()
       if(CURL_LIBRARY_DEBUG)
         set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
-                                                                         IMPORTED_CONFIGURATIONS DEBUG
                                                                          IMPORTED_LOCATION_DEBUG "${CURL_LIBRARY_DEBUG}")
+        set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                              IMPORTED_CONFIGURATIONS DEBUG)
       endif()
 
       # Add link libraries for static lib usage found from pkg-config

From 7f33aac33d2b30d58f31b75ea144f15a5d9d7d04 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 19 May 2024 09:41:26 +1000
Subject: [PATCH 04/76] [cmake][modules] FindEffects11 fix
 IMPORTED_CONFIGURATIONS list

---
 cmake/modules/FindEffects11.cmake | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/cmake/modules/FindEffects11.cmake b/cmake/modules/FindEffects11.cmake
index 6cb8409838576..c6af7593ee9b8 100644
--- a/cmake/modules/FindEffects11.cmake
+++ b/cmake/modules/FindEffects11.cmake
@@ -87,8 +87,9 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
       endif()
       if(EFFECTS11_LIBRARY_DEBUG)
         set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
-                                                                         IMPORTED_CONFIGURATIONS DEBUG
                                                                          IMPORTED_LOCATION_DEBUG "${EFFECTS11_LIBRARY_DEBUG}")
+        set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                              IMPORTED_CONFIGURATIONS DEBUG)
       endif()
     endif()
 

From b2b0f2420333aa4a786bb3cea2f99672c51c48a8 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 19 May 2024 09:41:46 +1000
Subject: [PATCH 05/76] [cmake][modules] FindFmt fix IMPORTED_CONFIGURATIONS
 list

---
 cmake/modules/FindFmt.cmake | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/cmake/modules/FindFmt.cmake b/cmake/modules/FindFmt.cmake
index a96e9117173fa..475238ec829a9 100644
--- a/cmake/modules/FindFmt.cmake
+++ b/cmake/modules/FindFmt.cmake
@@ -110,8 +110,9 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
       endif()
       if(FMT_LIBRARY_DEBUG)
         set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
-                                                                         IMPORTED_CONFIGURATIONS DEBUG
                                                                          IMPORTED_LOCATION_DEBUG "${FMT_LIBRARY_DEBUG}")
+        set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                              IMPORTED_CONFIGURATIONS DEBUG)
       endif()
       set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
                                                                        INTERFACE_INCLUDE_DIRECTORIES "${FMT_INCLUDE_DIR}")

From 5a75f6e472cd8b0744fb469a1ac4125d353d8e3f Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:11:10 +1000
Subject: [PATCH 06/76] [cmake][modules] FindLircClient cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindLircClient.cmake       | 17 +++++++----------
 xbmc/platform/linux/input/CMakeLists.txt |  2 +-
 2 files changed, 8 insertions(+), 11 deletions(-)

diff --git a/cmake/modules/FindLircClient.cmake b/cmake/modules/FindLircClient.cmake
index 888cbd628061c..290f230340fd8 100644
--- a/cmake/modules/FindLircClient.cmake
+++ b/cmake/modules/FindLircClient.cmake
@@ -4,9 +4,9 @@
 #
 # This will define the following target:
 #
-#   LIRCCLIENT::LIRCCLIENT - The lirc library
+#   ${APP_NAME_LC}::LircClient - The lirc library
 
-if(NOT TARGET LIRCCLIENT::LIRCCLIENT)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_LIRC lirc QUIET)
@@ -22,13 +22,10 @@ if(NOT TARGET LIRCCLIENT::LIRCCLIENT)
                                     REQUIRED_VARS LIRCCLIENT_LIBRARY LIRCCLIENT_INCLUDE_DIR)
 
   if(LIRCCLIENT_FOUND)
-    add_library(LIRCCLIENT::LIRCCLIENT UNKNOWN IMPORTED)
-    set_target_properties(LIRCCLIENT::LIRCCLIENT PROPERTIES
-                                                 IMPORTED_LOCATION "${LIRCCLIENT_LIBRARY}"
-                                                 INTERFACE_INCLUDE_DIRECTORIES "${LIRCCLIENT_INCLUDE_DIR}"
-                                                 INTERFACE_COMPILE_DEFINITIONS "HAS_LIRC=1")
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP LIRCCLIENT::LIRCCLIENT)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${LIRCCLIENT_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${LIRCCLIENT_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_LIRC)
   endif()
-
-  mark_as_advanced(LIRCCLIENT_LIBRARY LIRCCLIENT_INCLUDE_DIR)
 endif()
diff --git a/xbmc/platform/linux/input/CMakeLists.txt b/xbmc/platform/linux/input/CMakeLists.txt
index 0859158c9c1f3..d3088d44c2420 100644
--- a/xbmc/platform/linux/input/CMakeLists.txt
+++ b/xbmc/platform/linux/input/CMakeLists.txt
@@ -1,7 +1,7 @@
 set(SOURCES "")
 set(HEADERS "")
 
-if(TARGET LIRCCLIENT::LIRCCLIENT)
+if(TARGET ${APP_NAME_LC}::LircClient)
   list(APPEND SOURCES LIRC.cpp)
   list(APPEND HEADERS LIRC.h)
 endif()

From 902dc455c419c0579e22a3d4761df567301745cd Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 13:13:14 +1000
Subject: [PATCH 07/76] [cmake][macro] core_optional_dep append to
 optional_deps list if dep found

---
 cmake/scripts/common/Macros.cmake | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/cmake/scripts/common/Macros.cmake b/cmake/scripts/common/Macros.cmake
index 08455f6d805fa..d6a8778019bf2 100644
--- a/cmake/scripts/common/Macros.cmake
+++ b/cmake/scripts/common/Macros.cmake
@@ -454,12 +454,21 @@ function(core_optional_dep)
       set(_required True)
     endif()
 
-    if(${depup}_FOUND)
+    if(${depup}_FOUND OR TARGET kodi::${dep})
       list(APPEND SYSTEM_INCLUDES ${${depup}_INCLUDE_DIRS})
       list(APPEND DEPLIBS ${${depup}_LIBRARIES})
       list(APPEND DEP_DEFINES ${${depup}_DEFINITIONS})
       set(final_message ${final_message} "${depup} enabled: Yes")
       export_dep()
+
+      # We dont want to add a build tool
+      if (NOT ${depspec} IN_LIST optional_buildtools AND NOT ${depspec} IN_LIST required_buildtools)
+        # If dependency is found and is not in the list (eg mariadb/mysql) add to list
+        if (NOT ${depspec} IN_LIST optional_deps)
+          set(optional_deps  ${optional_deps} ${depspec} PARENT_SCOPE)
+        endif()
+      endif()
+
     elseif(_required)
       message(FATAL_ERROR "${depup} enabled but not found")
     else()

From a4e9832cdae944d02f41afb37d01bc782c6f6497 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:16:32 +1000
Subject: [PATCH 08/76] [cmake][modules] FindMariaDBClient cleanup and use
 core_target_link_libraries

---
 CMakeLists.txt                        |  2 +-
 cmake/modules/FindMariaDBClient.cmake | 43 +++++++++++----------------
 xbmc/dbwrappers/CMakeLists.txt        |  2 +-
 3 files changed, 19 insertions(+), 28 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 19c914a7de920..fc57274474e97 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -267,7 +267,7 @@ elseif(ENABLE_MYSQLCLIENT AND NOT ENABLE_MYSQLCLIENT STREQUAL AUTO)
 endif()
 
 core_optional_dep(MariaDBClient)
-if(NOT TARGET MariaDBClient::MariaDBClient)
+if(NOT TARGET ${APP_NAME_LC}::MariaDBClient)
   core_optional_dep(MySqlClient)
 endif()
 
diff --git a/cmake/modules/FindMariaDBClient.cmake b/cmake/modules/FindMariaDBClient.cmake
index efbe395500a45..98099a411d536 100644
--- a/cmake/modules/FindMariaDBClient.cmake
+++ b/cmake/modules/FindMariaDBClient.cmake
@@ -5,14 +5,9 @@
 #
 # This will define the following target:
 #
-#   MariaDBClient::MariaDBClient   - The MariaDBClient library
-
-if(NOT TARGET MariaDBClient::MariaDBClient)
-  # Don't find system wide installed version on Windows
-  if(WIN32)
-    set(EXTRA_FIND_ARGS NO_SYSTEM_ENVIRONMENT_PATH)
-  endif()
+#   ${APP_NAME_LC}::MariaDBClient   - The MariaDBClient library
 
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
 
   if(PKG_CONFIG_FOUND)
@@ -20,18 +15,15 @@ if(NOT TARGET MariaDBClient::MariaDBClient)
   endif()
 
   find_path(MARIADBCLIENT_INCLUDE_DIR NAMES mariadb/mysql.h mariadb/server/mysql.h
-                                      HINTS ${PC_MARIADBCLIENT_INCLUDEDIR}
-                                      NO_CACHE)
+                                      HINTS ${PC_MARIADBCLIENT_INCLUDEDIR})
   find_library(MARIADBCLIENT_LIBRARY_RELEASE NAMES mariadbclient mariadb libmariadb
                                              HINTS ${PC_MARIADBCLIENT_LIBDIR}
                                              PATH_SUFFIXES mariadb
-                                             ${EXTRA_FIND_ARGS}
-                                             NO_CACHE)
+                                             ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
   find_library(MARIADBCLIENT_LIBRARY_DEBUG NAMES mariadbclient mariadb libmariadbd
                                            HINTS ${PC_MARIADBCLIENT_LIBDIR}
                                            PATH_SUFFIXES mariadb
-                                           ${EXTRA_FIND_ARGS}
-                                           NO_CACHE)
+                                           ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
   if(PC_MARIADBCLIENT_VERSION)
     set(MARIADBCLIENT_VERSION_STRING ${PC_MARIADBCLIENT_VERSION})
@@ -50,24 +42,23 @@ if(NOT TARGET MariaDBClient::MariaDBClient)
                                     VERSION_VAR MARIADBCLIENT_VERSION_STRING)
 
   if(MARIADBCLIENT_FOUND)
-    add_library(MariaDBClient::MariaDBClient UNKNOWN IMPORTED)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
     if(MARIADBCLIENT_LIBRARY_RELEASE)
-      set_target_properties(MariaDBClient::MariaDBClient PROPERTIES
-                                                         IMPORTED_CONFIGURATIONS RELEASE
-                                                         IMPORTED_LOCATION_RELEASE "${MARIADBCLIENT_LIBRARY_RELEASE}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_CONFIGURATIONS RELEASE
+                                                                       IMPORTED_LOCATION_RELEASE "${MARIADBCLIENT_LIBRARY_RELEASE}")
     endif()
     if(MARIADBCLIENT_LIBRARY_DEBUG)
-      set_target_properties(MariaDBClient::MariaDBClient PROPERTIES
-                                                         IMPORTED_CONFIGURATIONS DEBUG
-                                                         IMPORTED_LOCATION_DEBUG "${MARIADBCLIENT_LIBRARY_DEBUG}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION_DEBUG "${MARIADBCLIENT_LIBRARY_DEBUG}")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            IMPORTED_CONFIGURATIONS DEBUG)
     endif()
-    set_target_properties(MariaDBClient::MariaDBClient PROPERTIES
-                                                       INTERFACE_INCLUDE_DIRECTORIES "${MARIADBCLIENT_INCLUDE_DIR}"
-                                                       INTERFACE_COMPILE_DEFINITIONS HAS_MARIADB=1)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${MARIADBCLIENT_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_MARIADB)
     if(CORE_SYSTEM_NAME STREQUAL osx)
-      target_link_libraries(MariaDBClient::MariaDBClient INTERFACE gssapi_krb5)
+      target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE gssapi_krb5)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP MariaDBClient::MariaDBClient)
   endif()
 endif()
diff --git a/xbmc/dbwrappers/CMakeLists.txt b/xbmc/dbwrappers/CMakeLists.txt
index 2c5f0f8f09645..eabd3087d3a5f 100644
--- a/xbmc/dbwrappers/CMakeLists.txt
+++ b/xbmc/dbwrappers/CMakeLists.txt
@@ -10,7 +10,7 @@ set(HEADERS Database.h
             qry_dat.h
             sqlitedataset.h)
 
-if(TARGET MySqlClient::MySqlClient OR TARGET MariaDBClient::MariaDBClient)
+if(TARGET MySqlClient::MySqlClient OR TARGET ${APP_NAME_LC}::MariaDBClient)
   list(APPEND SOURCES mysqldataset.cpp)
   list(APPEND HEADERS mysqldataset.h)
 endif()

From c79f477692794a2c934e084fedd071e05d311179 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:19:40 +1000
Subject: [PATCH 09/76] [cmake][modules] FindMDNS cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindMDNS.cmake     | 28 ++++++++++++----------------
 xbmc/network/mdns/CMakeLists.txt |  2 +-
 2 files changed, 13 insertions(+), 17 deletions(-)

diff --git a/cmake/modules/FindMDNS.cmake b/cmake/modules/FindMDNS.cmake
index 1ae839b81f15e..b302fc0f61cba 100644
--- a/cmake/modules/FindMDNS.cmake
+++ b/cmake/modules/FindMDNS.cmake
@@ -5,31 +5,27 @@
 #
 # This will define the following target:
 #
-#   MDNS::MDNS   - The mDNSlibrary
+#   ${APP_NAME_LC}::MDNS   - The mDNSlibrary
 
-if(NOT TARGET MDNS::MDNS)
-  find_path(MDNS_INCLUDE_DIR NAMES dmDnsEmbedded.h dns_sd.h
-                             NO_CACHE)
-  find_library(MDNS_LIBRARY NAMES mDNSEmbedded dnssd
-                            NO_CACHE)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_path(MDNS_INCLUDE_DIR NAMES dmDnsEmbedded.h dns_sd.h)
+  find_library(MDNS_LIBRARY NAMES mDNSEmbedded dnssd)
 
-  find_path(MDNS_EMBEDDED_INCLUDE_DIR NAMES mDnsEmbedded.h
-                                      NO_CACHE)
+  find_path(MDNS_EMBEDDED_INCLUDE_DIR NAMES mDnsEmbedded.h)
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(MDNS
                                     REQUIRED_VARS MDNS_LIBRARY MDNS_INCLUDE_DIR)
 
   if(MDNS_FOUND)
-    add_library(MDNS::MDNS UNKNOWN IMPORTED)
-    set_target_properties(MDNS::MDNS PROPERTIES
-                                     IMPORTED_LOCATION "${MDNS_LIBRARY}"
-                                     INTERFACE_INCLUDE_DIRECTORIES "${MDNS_INCLUDE_DIR}"
-                                     INTERFACE_COMPILE_DEFINITIONS "HAS_MDNS=1;HAS_ZEROCONF=1")
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${MDNS_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${MDNS_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS "HAS_MDNS;HAS_ZEROCONF")
     if(MDNS_EMBEDDED_INCLUDE_DIR)
-      set_property(TARGET MDNS::MDNS APPEND PROPERTY
-                                            INTERFACE_COMPILE_DEFINITIONS HAS_MDNS_EMBEDDED=1)
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            INTERFACE_COMPILE_DEFINITIONS HAS_MDNS_EMBEDDED)
     endif()
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP MDNS::MDNS)
   endif()
 endif()
diff --git a/xbmc/network/mdns/CMakeLists.txt b/xbmc/network/mdns/CMakeLists.txt
index 66db8e8bc8fd7..106022ae2954e 100644
--- a/xbmc/network/mdns/CMakeLists.txt
+++ b/xbmc/network/mdns/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(TARGET MDNS::MDNS)
+if(TARGET ${APP_NAME_LC}::MDNS)
   set(SOURCES ZeroconfBrowserMDNS.cpp
               ZeroconfMDNS.cpp)
 

From 9177ae88efa08069856bc0f5554c101016a4fc81 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:25:23 +1000
Subject: [PATCH 10/76] [cmake][modules] FindMySqlClient cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindMySqlClient.cmake | 45 +++++++----------------------
 xbmc/dbwrappers/CMakeLists.txt      |  2 +-
 2 files changed, 12 insertions(+), 35 deletions(-)

diff --git a/cmake/modules/FindMySqlClient.cmake b/cmake/modules/FindMySqlClient.cmake
index aed95776f6534..64a28e4bd2bb2 100644
--- a/cmake/modules/FindMySqlClient.cmake
+++ b/cmake/modules/FindMySqlClient.cmake
@@ -5,24 +5,14 @@
 #
 # This will define the following target:
 #
-#   MySqlClient::MySqlClient   - The MySqlClient library
+#   ${APP_NAME_LC}::MySqlClient   - The MySqlClient library
 
-if(NOT TARGET MySqlClient::MySqlClient)
-  # Don't find system wide installed version on Windows
-  if(WIN32)
-    set(EXTRA_FIND_ARGS NO_SYSTEM_ENVIRONMENT_PATH)
-  endif()
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-  find_path(MYSQLCLIENT_INCLUDE_DIR NAMES mysql/mysql.h mysql/server/mysql.h
-                                    NO_CACHE)
-  find_library(MYSQLCLIENT_LIBRARY_RELEASE NAMES mysqlclient libmysql
-                                           PATH_SUFFIXES mysql
-                                           ${EXTRA_FIND_ARGS}
-                                           NO_CACHE)
-  find_library(MYSQLCLIENT_LIBRARY_DEBUG NAMES mysqlclient libmysql
-                                         PATH_SUFFIXES mysql
-                                         ${EXTRA_FIND_ARGS}
-                                         NO_CACHE)
+  find_path(MYSQLCLIENT_INCLUDE_DIR NAMES mysql/mysql.h mysql/server/mysql.h)
+  find_library(MYSQLCLIENT_LIBRARY NAMES mysqlclient libmysql
+                                   PATH_SUFFIXES mysql
+                                   ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
   if(MYSQLCLIENT_INCLUDE_DIR AND EXISTS "${MYSQLCLIENT_INCLUDE_DIR}/mysql/mysql_version.h")
     file(STRINGS "${MYSQLCLIENT_INCLUDE_DIR}/mysql/mysql_version.h" mysql_version_str REGEX "^#define[\t ]+LIBMYSQL_VERSION[\t ]+\".*\".*")
@@ -30,29 +20,16 @@ if(NOT TARGET MySqlClient::MySqlClient)
     unset(mysql_version_str)
   endif()
 
-  include(SelectLibraryConfigurations)
-  select_library_configurations(MYSQLCLIENT)
-
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(MySqlClient
                                     REQUIRED_VARS MYSQLCLIENT_LIBRARY MYSQLCLIENT_INCLUDE_DIR
                                     VERSION_VAR MYSQLCLIENT_VERSION_STRING)
 
   if(MYSQLCLIENT_FOUND)
-    add_library(MySqlClient::MySqlClient UNKNOWN IMPORTED)
-    if(MYSQLCLIENT_LIBRARY_RELEASE)
-      set_target_properties(MySqlClient::MySqlClient PROPERTIES
-                                                     IMPORTED_CONFIGURATIONS RELEASE
-                                                     IMPORTED_LOCATION_RELEASE "${MYSQLCLIENT_LIBRARY_RELEASE}")
-    endif()
-    if(MYSQLCLIENT_LIBRARY_DEBUG)
-      set_target_properties(MySqlClient::MySqlClient PROPERTIES
-                                                     IMPORTED_CONFIGURATIONS DEBUG
-                                                     IMPORTED_LOCATION_DEBUG "${MYSQLCLIENT_LIBRARY_DEBUG}")
-    endif()
-    set_target_properties(MySqlClient::MySqlClient PROPERTIES
-                                                   INTERFACE_INCLUDE_DIRECTORIES "${MYSQLCLIENT_INCLUDE_DIR}"
-                                                   INTERFACE_COMPILE_DEFINITIONS HAS_MYSQL=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP MySqlClient::MySqlClient)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${MYSQLCLIENT_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${MYSQLCLIENT_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_MYSQL)
   endif()
 endif()
diff --git a/xbmc/dbwrappers/CMakeLists.txt b/xbmc/dbwrappers/CMakeLists.txt
index eabd3087d3a5f..20ddd914c5e5f 100644
--- a/xbmc/dbwrappers/CMakeLists.txt
+++ b/xbmc/dbwrappers/CMakeLists.txt
@@ -10,7 +10,7 @@ set(HEADERS Database.h
             qry_dat.h
             sqlitedataset.h)
 
-if(TARGET MySqlClient::MySqlClient OR TARGET ${APP_NAME_LC}::MariaDBClient)
+if(TARGET ${APP_NAME_LC}::MySqlClient OR TARGET ${APP_NAME_LC}::MariaDBClient)
   list(APPEND SOURCES mysqldataset.cpp)
   list(APPEND HEADERS mysqldataset.h)
 endif()

From 72808279bd5d2921a35cb4a44f6895099f9086b9 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:44:54 +1000
Subject: [PATCH 11/76] [cmake][modules] FindNFS cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindNFS.cmake         | 107 +++++++++++++++-------------
 xbmc/filesystem/CMakeLists.txt      |   2 +-
 xbmc/filesystem/test/CMakeLists.txt |   2 +-
 3 files changed, 60 insertions(+), 51 deletions(-)

diff --git a/cmake/modules/FindNFS.cmake b/cmake/modules/FindNFS.cmake
index 2250093749fa5..76a1090652c8a 100644
--- a/cmake/modules/FindNFS.cmake
+++ b/cmake/modules/FindNFS.cmake
@@ -5,9 +5,9 @@
 #
 # This will define the following target:
 #
-#   NFS::NFS   - The libnfs library
+#   ${APP_NAME_LC}::NFS   - The libnfs library
 
-if(NOT TARGET libnfs::nfs)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   macro(buildlibnfs)
     set(CMAKE_ARGS -DBUILD_SHARED_LIBS=OFF
@@ -48,52 +48,51 @@ if(NOT TARGET libnfs::nfs)
     # Build lib
     buildlibnfs()
   else()
-    if(NOT TARGET libnfs::nfs)
-
-      if(NFS_FIND_VERSION)
-        if(NFS_FIND_VERSION_EXACT)
-          set(NFS_FIND_SPEC "=${NFS_FIND_VERSION_COMPLETE}")
+    if(TARGET libnfs::nfs)
+      # This is for the case where a distro provides a non standard (Debug/Release) config type
+      # convert this back to either DEBUG/RELEASE or just RELEASE
+      # we only do this because we use find_package_handle_standard_args for config time output
+      # and it isnt capable of handling TARGETS, so we have to extract the info
+      get_target_property(_LIBNFS_CONFIGURATIONS libnfs::nfs IMPORTED_CONFIGURATIONS)
+      foreach(_libnfs_config IN LISTS _LIBNFS_CONFIGURATIONS)
+        # Just set to RELEASE var so select_library_configurations can continue to work its magic
+        string(TOUPPER ${_libnfs_config} _libnfs_config_UPPER)
+        if((NOT ${_libnfs_config_UPPER} STREQUAL "RELEASE") AND
+           (NOT ${_libnfs_config_UPPER} STREQUAL "DEBUG"))
+          get_target_property(LIBNFS_LIBRARY_RELEASE libnfs::nfs IMPORTED_LOCATION_${_libnfs_config_UPPER})
         else()
-          set(NFS_FIND_SPEC ">=${NFS_FIND_VERSION_COMPLETE}")
+          get_target_property(LIBNFS_LIBRARY_${_libnfs_config_UPPER} libnfs::nfs IMPORTED_LOCATION_${_libnfs_config_UPPER})
         endif()
-      endif()
+      endforeach()
 
+      # libnfs cmake config doesnt include INTERFACE_INCLUDE_DIRECTORIES
+      find_path(LIBNFS_INCLUDE_DIR NAMES nfsc/libnfs.h
+                                   HINTS ${DEPENDS_PATH}/include
+                                   ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
+    else()
       find_package(PkgConfig)
       # Try pkgconfig based search as last resort
-      if(PKG_CONFIG_FOUND)
+      if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
+        if(NFS_FIND_VERSION)
+          if(NFS_FIND_VERSION_EXACT)
+            set(NFS_FIND_SPEC "=${NFS_FIND_VERSION_COMPLETE}")
+          else()
+            set(NFS_FIND_SPEC ">=${NFS_FIND_VERSION_COMPLETE}")
+          endif()
+        endif()
+
         pkg_check_modules(PC_LIBNFS libnfs${NFS_FIND_SPEC} QUIET)
       endif()
 
       find_library(LIBNFS_LIBRARY_RELEASE NAMES nfs libnfs
                                           HINTS ${DEPENDS_PATH}/lib
                                                 ${PC_LIBNFS_LIBDIR}
-                                          ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                          NO_CACHE)
+                                          ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
+      find_path(LIBNFS_INCLUDE_DIR nfsc/libnfs.h HINTS ${PC_LIBNFS_INCLUDEDIR}
+                                                       ${DEPENDS_PATH}/include
+                                                       ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
       set(LIBNFS_VERSION ${PC_LIBNFS_VERSION})
     endif()
-
-    find_path(LIBNFS_INCLUDE_DIR nfsc/libnfs.h HINTS ${PC_LIBNFS_INCLUDEDIR}
-                                                     ${DEPENDS_PATH}/include
-                                               ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                               NO_CACHE)
-  endif()
-
-  if(TARGET libnfs::nfs)
-    # This is for the case where a distro provides a non standard (Debug/Release) config type
-    # convert this back to either DEBUG/RELEASE or just RELEASE
-    # we only do this because we use find_package_handle_standard_args for config time output
-    # and it isnt capable of handling TARGETS, so we have to extract the info
-    get_target_property(_LIBNFS_CONFIGURATIONS libnfs::nfs IMPORTED_CONFIGURATIONS)
-    foreach(_libnfs_config IN LISTS _LIBNFS_CONFIGURATIONS)
-      # Just set to RELEASE var so select_library_configurations can continue to work its magic
-      string(TOUPPER ${_libnfs_config} _libnfs_config_UPPER)
-      if((NOT ${_libnfs_config_UPPER} STREQUAL "RELEASE") AND
-         (NOT ${_libnfs_config_UPPER} STREQUAL "DEBUG"))
-        get_target_property(LIBNFS_LIBRARY_RELEASE libnfs::nfs IMPORTED_LOCATION_${_libnfs_config_UPPER})
-      else()
-        get_target_property(LIBNFS_LIBRARY_${_libnfs_config_UPPER} libnfs::nfs IMPORTED_LOCATION_${_libnfs_config_UPPER})
-      endif()
-    endforeach()
   endif()
 
   include(SelectLibraryConfigurations)
@@ -142,25 +141,37 @@ if(NOT TARGET libnfs::nfs)
       unset(CMAKE_REQUIRED_LIBRARIES)
     endif()
 
-    if(NOT TARGET libnfs::nfs)
-      add_library(libnfs::nfs UNKNOWN IMPORTED)
-      set_target_properties(libnfs::nfs PROPERTIES
-                                        IMPORTED_LOCATION "${LIBNFS_LIBRARY}"
-                                        INTERFACE_INCLUDE_DIRECTORIES "${LIBNFS_INCLUDE_DIR}")
-    endif()
+    list(APPEND _nfs_definitions HAS_FILESYSTEM_NFS)
 
-    if(TARGET libnfs)
-      add_dependencies(libnfs::nfs libnfs)
+    # cmake target and not building internal
+    if(TARGET libnfs::nfs AND NOT TARGET libnfs)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS libnfs::nfs)
+    else()
+
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION "${LIBNFS_LIBRARY}")
     endif()
 
-    list(APPEND _nfs_definitions HAS_FILESYSTEM_NFS)
+    # Test if target is an alias. We cant set properties on alias targets, and must find
+    # the actual target.
+    get_property(aliased_target TARGET "${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME}" PROPERTY ALIASED_TARGET)
+    if("${aliased_target}" STREQUAL "")
+      set(_nfs_target "${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME}")
+    else()
+      set(_nfs_target "${aliased_target}")
+    endif()
 
     # We need to append in case the cmake config already has definitions
-    set_property(TARGET libnfs::nfs APPEND PROPERTY
-                                           INTERFACE_COMPILE_DEFINITIONS ${_nfs_definitions})
+    set_property(TARGET ${_nfs_target} APPEND PROPERTY
+                                              INTERFACE_COMPILE_DEFINITIONS ${_nfs_definitions})
 
     # Need to manually set this, as libnfs cmake config does not provide INTERFACE_INCLUDE_DIRECTORIES
-    set_target_properties(libnfs::nfs PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${LIBNFS_INCLUDE_DIR})
+    set_target_properties(${_nfs_target} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${LIBNFS_INCLUDE_DIR})
+
+    if(TARGET libnfs)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} libnfs)
+    endif()
 
     # Add internal build target when a Multi Config Generator is used
     # We cant add a dependency based off a generator expression for targeted build types,
@@ -177,7 +188,5 @@ if(NOT TARGET libnfs::nfs)
       endif()
       add_dependencies(build_internal_depends libnfs)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP libnfs::nfs)
   endif()
 endif()
diff --git a/xbmc/filesystem/CMakeLists.txt b/xbmc/filesystem/CMakeLists.txt
index 8d2336a347156..9d653ae0f9cbe 100644
--- a/xbmc/filesystem/CMakeLists.txt
+++ b/xbmc/filesystem/CMakeLists.txt
@@ -158,7 +158,7 @@ if(ENABLE_OPTICAL)
                       DVDDirectory.h)
 endif()
 
-if(TARGET libnfs::nfs)
+if(TARGET ${APP_NAME_LC}::NFS)
   list(APPEND SOURCES NFSDirectory.cpp
                       NFSFile.cpp)
   list(APPEND HEADERS NFSDirectory.h
diff --git a/xbmc/filesystem/test/CMakeLists.txt b/xbmc/filesystem/test/CMakeLists.txt
index 0020050598e8b..5d2f0344c7a6a 100644
--- a/xbmc/filesystem/test/CMakeLists.txt
+++ b/xbmc/filesystem/test/CMakeLists.txt
@@ -8,7 +8,7 @@ if(MICROHTTPD_FOUND)
   list(APPEND SOURCES TestHTTPDirectory.cpp)
 endif()
 
-if(TARGET libnfs::nfs)
+if(TARGET ${APP_NAME_LC}::NFS)
   list(APPEND SOURCES TestNfsFile.cpp)
 endif()
 

From ccdf6a1c4e3cdfc32af222bbd844800f01c3817d Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:55:51 +1000
Subject: [PATCH 12/76] [cmake][modules] FindOpenGl cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindOpenGl.cmake                | 21 ++++++++-----------
 xbmc/cores/RetroPlayer/buffers/CMakeLists.txt |  4 ++--
 .../rendering/VideoRenderers/CMakeLists.txt   |  4 ++--
 .../VideoPlayer/VideoRenderers/CMakeLists.txt |  4 ++--
 .../VideoRenderers/HwDecRender/CMakeLists.txt |  4 ++--
 .../VideoShaders/CMakeLists.txt               |  4 ++--
 xbmc/guilib/CMakeLists.txt                    |  4 ++--
 xbmc/pictures/CMakeLists.txt                  |  2 +-
 xbmc/rendering/CMakeLists.txt                 |  2 +-
 xbmc/rendering/gl/CMakeLists.txt              |  2 +-
 xbmc/utils/CMakeLists.txt                     |  2 +-
 xbmc/video/dialogs/CMakeLists.txt             |  2 +-
 xbmc/windowing/X11/CMakeLists.txt             |  2 +-
 xbmc/windowing/gbm/CMakeLists.txt             |  2 +-
 xbmc/windowing/osx/OpenGL/CMakeLists.txt      |  2 +-
 xbmc/windowing/wayland/CMakeLists.txt         |  2 +-
 16 files changed, 30 insertions(+), 33 deletions(-)

diff --git a/cmake/modules/FindOpenGl.cmake b/cmake/modules/FindOpenGl.cmake
index 1af7469e1802b..57cae1597c171 100644
--- a/cmake/modules/FindOpenGl.cmake
+++ b/cmake/modules/FindOpenGl.cmake
@@ -5,9 +5,9 @@
 #
 # This will define the following target:
 #
-#   OpenGL::GL - The OpenGL library
+#   ${APP_NAME_LC}::OpenGl - The OpenGL library
 
-if(NOT TARGET OpenGL::GL)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_OPENGL gl QUIET)
@@ -15,22 +15,19 @@ if(NOT TARGET OpenGL::GL)
 
   find_library(OPENGL_gl_LIBRARY NAMES GL OpenGL
                                  HINTS ${PC_OPENGL_gl_LIBDIR} ${CMAKE_OSX_SYSROOT}/System/Library
-                                 PATH_SUFFIXES Frameworks
-                                 NO_CACHE)
+                                 PATH_SUFFIXES Frameworks)
   find_path(OPENGL_INCLUDE_DIR NAMES GL/gl.h gl.h
-                               HINTS ${PC_OPENGL_gl_INCLUDEDIR} ${OPENGL_gl_LIBRARY}/Headers
-                               NO_CACHE)
+                               HINTS ${PC_OPENGL_gl_INCLUDEDIR} ${OPENGL_gl_LIBRARY}/Headers)
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(OpenGl
                                     REQUIRED_VARS OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR)
 
   if(OPENGL_FOUND)
-    add_library(OpenGL::GL UNKNOWN IMPORTED)
-    set_target_properties(OpenGL::GL PROPERTIES
-                                     IMPORTED_LOCATION "${OPENGL_gl_LIBRARY}"
-                                     INTERFACE_INCLUDE_DIRECTORIES "${OPENGL_INCLUDE_DIR}"
-                                     INTERFACE_COMPILE_DEFINITIONS HAS_GL=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP OpenGL::GL)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${OPENGL_gl_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${OPENGL_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_GL)
   endif()
 endif()
diff --git a/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt b/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt
index ef66479c46b74..871af8a8977ab 100644
--- a/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt
@@ -10,14 +10,14 @@ set(HEADERS BaseRenderBuffer.h
             RenderBufferManager.h
 )
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES RenderBufferOpenGLES.cpp
                       RenderBufferPoolOpenGLES.cpp)
   list(APPEND HEADERS RenderBufferOpenGLES.h
                       RenderBufferPoolOpenGLES.h)
 endif()
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES RenderBufferOpenGL.cpp
                       RenderBufferPoolOpenGL.cpp)
   list(APPEND HEADERS RenderBufferOpenGL.h
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
index 5680b8ec9e190..d371b9fab3a6a 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
@@ -8,12 +8,12 @@ if(CORE_SYSTEM_NAME STREQUAL windows)
   list(APPEND HEADERS RPWinRenderer.h)
 endif()
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES RPRendererOpenGLES.cpp)
   list(APPEND HEADERS RPRendererOpenGLES.h)
 endif()
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES RPRendererOpenGL.cpp)
   list(APPEND HEADERS RPRendererOpenGL.h)
 endif()
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt
index bc367887afe3c..279693766fac5 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt
@@ -29,12 +29,12 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
                       RenderCapture.h)
 endif()
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES FrameBufferObject.cpp)
   list(APPEND HEADERS FrameBufferObject.h)
 endif()
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES LinuxRendererGL.cpp
                       OverlayRendererGL.cpp
                       RenderCaptureGL.cpp)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
index bd4d6333eea08..750b7a0bd97d6 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
@@ -6,7 +6,7 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
 endif()
 
 if(VAAPI_FOUND)
-  if(TARGET OpenGL::GL)
+  if(TARGET ${APP_NAME_LC}::OpenGl)
     list(APPEND SOURCES RendererVAAPIGL.cpp)
     list(APPEND HEADERS RendererVAAPIGL.h)
   endif()
@@ -28,7 +28,7 @@ if(TARGET VDPAU::VDPAU)
 endif()
 
 if(CORE_SYSTEM_NAME STREQUAL osx)
-  if(TARGET OpenGL::GL)
+  if(TARGET ${APP_NAME_LC}::OpenGl)
     list(APPEND SOURCES RendererVTBGL.cpp)
     list(APPEND HEADERS RendererVTBGL.h)
   endif()
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt
index 5bb02199e76b7..2b1940927aa90 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt
@@ -14,14 +14,14 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
 endif()
 
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES ConversionMatrix.cpp
                       ToneMappers.cpp)
   list(APPEND HEADERS ConversionMatrix.h
                       ToneMappers.h)
 endif()
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES GLSLOutput.cpp
                       VideoFilterShaderGL.cpp
                       YUV2RGBShaderGL.cpp)
diff --git a/xbmc/guilib/CMakeLists.txt b/xbmc/guilib/CMakeLists.txt
index 5d598cbad3a32..6b352c78d73a0 100644
--- a/xbmc/guilib/CMakeLists.txt
+++ b/xbmc/guilib/CMakeLists.txt
@@ -159,13 +159,13 @@ set(HEADERS DDSImage.h
             XBTF.h
             XBTFReader.h)
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES Shader.cpp
                       TextureGL.cpp)
   list(APPEND HEADERS Shader.h
                       TextureGL.h)
 
-  if(TARGET OpenGL::GL)
+  if(TARGET ${APP_NAME_LC}::OpenGl)
     list(APPEND SOURCES GUIFontTTFGL.cpp
                         GUITextureGL.cpp)
     list(APPEND HEADERS GUIFontTTFGL.h
diff --git a/xbmc/pictures/CMakeLists.txt b/xbmc/pictures/CMakeLists.txt
index ee73acad6ccf4..678ba70960a73 100644
--- a/xbmc/pictures/CMakeLists.txt
+++ b/xbmc/pictures/CMakeLists.txt
@@ -29,7 +29,7 @@ set(HEADERS interfaces/ISlideShowDelegate.h
             SlideShowDelegator.h
             SlideShowPicture.h)
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES SlideShowPictureGL.cpp)
   list(APPEND HEADERS SlideShowPictureGL.h)
 endif()
diff --git a/xbmc/rendering/CMakeLists.txt b/xbmc/rendering/CMakeLists.txt
index 9daaf0c726254..b128fe51a700a 100644
--- a/xbmc/rendering/CMakeLists.txt
+++ b/xbmc/rendering/CMakeLists.txt
@@ -3,7 +3,7 @@ set(SOURCES RenderSystem.cpp)
 set(HEADERS RenderSystem.h
             RenderSystemTypes.h)
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES MatrixGL.cpp)
   list(APPEND HEADERS MatrixGL.h)
 
diff --git a/xbmc/rendering/gl/CMakeLists.txt b/xbmc/rendering/gl/CMakeLists.txt
index 71c1ee8d322a6..a6a5b905756e1 100644
--- a/xbmc/rendering/gl/CMakeLists.txt
+++ b/xbmc/rendering/gl/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   set(SOURCES RenderSystemGL.cpp
               ScreenshotSurfaceGL.cpp
               GLShader.cpp)
diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index d486bcd976000..a4de874e0ce53 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -199,7 +199,7 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL Clang)
   set_source_files_properties(Mime.cpp PROPERTIES COMPILE_FLAGS -O0)
 endif()
 
-if(TARGET OpenGL::GL OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
   list(APPEND SOURCES GLUtils.cpp)
   list(APPEND HEADERS GLUtils.h)
 endif()
diff --git a/xbmc/video/dialogs/CMakeLists.txt b/xbmc/video/dialogs/CMakeLists.txt
index 15f04c90742ed..c37b369d70fbe 100644
--- a/xbmc/video/dialogs/CMakeLists.txt
+++ b/xbmc/video/dialogs/CMakeLists.txt
@@ -24,7 +24,7 @@ set(HEADERS GUIDialogAudioSettings.h
             GUIDialogVideoOSD.h
             GUIDialogVideoSettings.h)
 
-if(TARGET OpenGL::GL OR CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
+if(TARGET ${APP_NAME_LC}::OpenGl OR CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
   list(APPEND SOURCES GUIDialogCMSSettings.cpp)
   list(APPEND HEADERS GUIDialogCMSSettings.h)
 endif()
diff --git a/xbmc/windowing/X11/CMakeLists.txt b/xbmc/windowing/X11/CMakeLists.txt
index 192d8225ace15..33cc4d7720ba6 100644
--- a/xbmc/windowing/X11/CMakeLists.txt
+++ b/xbmc/windowing/X11/CMakeLists.txt
@@ -23,7 +23,7 @@ if(GLX_FOUND)
                       VideoSyncGLX.h)
 endif()
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES WinSystemX11GLContext.cpp)
   list(APPEND HEADERS WinSystemX11GLContext.h)
   list(APPEND SOURCES VideoSyncOML.cpp)
diff --git a/xbmc/windowing/gbm/CMakeLists.txt b/xbmc/windowing/gbm/CMakeLists.txt
index 91085f8b7f6a5..84cea44524771 100644
--- a/xbmc/windowing/gbm/CMakeLists.txt
+++ b/xbmc/windowing/gbm/CMakeLists.txt
@@ -14,7 +14,7 @@ set(HEADERS OptionalsReg.h
             WinSystemGbmEGLContext.h
             GBMDPMSSupport.h)
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES WinSystemGbmGLContext.cpp)
   list(APPEND HEADERS WinSystemGbmGLContext.h)
 endif()
diff --git a/xbmc/windowing/osx/OpenGL/CMakeLists.txt b/xbmc/windowing/osx/OpenGL/CMakeLists.txt
index 61dc24867f114..42600bf6b2c19 100644
--- a/xbmc/windowing/osx/OpenGL/CMakeLists.txt
+++ b/xbmc/windowing/osx/OpenGL/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES OSXGLView.mm
                       WindowControllerMacOS.mm
                       WinSystemOSXGL.mm)
diff --git a/xbmc/windowing/wayland/CMakeLists.txt b/xbmc/windowing/wayland/CMakeLists.txt
index b1ff8a236f7cb..0cfbdee80af43 100644
--- a/xbmc/windowing/wayland/CMakeLists.txt
+++ b/xbmc/windowing/wayland/CMakeLists.txt
@@ -54,7 +54,7 @@ if(TARGET ${APP_NAME_LC}::EGL)
   list(APPEND HEADERS WinSystemWaylandEGLContext.h)
 endif()
 
-if(TARGET OpenGL::GL)
+if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES WinSystemWaylandEGLContextGL.cpp)
   list(APPEND HEADERS WinSystemWaylandEGLContextGL.h)
 endif()

From 0ea5d3125ecf4f79cd8983c75d89b108a701ea56 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 12:59:26 +1000
Subject: [PATCH 13/76] [cmake][modules] FindOpenGLES cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindOpenGLES.cmake              | 39 ++++++++-----------
 xbmc/cores/RetroPlayer/buffers/CMakeLists.txt |  2 +-
 .../rendering/VideoRenderers/CMakeLists.txt   |  2 +-
 .../VideoPlayer/VideoRenderers/CMakeLists.txt |  4 +-
 .../VideoRenderers/HwDecRender/CMakeLists.txt |  6 +--
 .../VideoShaders/CMakeLists.txt               |  4 +-
 xbmc/guilib/CMakeLists.txt                    |  4 +-
 xbmc/pictures/CMakeLists.txt                  |  2 +-
 xbmc/rendering/CMakeLists.txt                 |  2 +-
 xbmc/rendering/gles/CMakeLists.txt            |  2 +-
 xbmc/utils/CMakeLists.txt                     |  2 +-
 xbmc/windowing/X11/CMakeLists.txt             |  2 +-
 xbmc/windowing/android/CMakeLists.txt         |  2 +-
 xbmc/windowing/gbm/CMakeLists.txt             |  2 +-
 xbmc/windowing/wayland/CMakeLists.txt         |  2 +-
 15 files changed, 36 insertions(+), 41 deletions(-)

diff --git a/cmake/modules/FindOpenGLES.cmake b/cmake/modules/FindOpenGLES.cmake
index 92172bd6282c4..c2c23cc97582f 100644
--- a/cmake/modules/FindOpenGLES.cmake
+++ b/cmake/modules/FindOpenGLES.cmake
@@ -5,9 +5,9 @@
 #
 # This will define the following target:
 #
-#   OpenGL::GLES - The OpenGLES IMPORTED library
+#   ${APP_NAME_LC}::OpenGLES - The OpenGLES IMPORTED library
 
-if(NOT TARGET OpenGL::GLES)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_OPENGLES glesv2 QUIET)
@@ -15,14 +15,11 @@ if(NOT TARGET OpenGL::GLES)
 
   find_library(OPENGLES_gl_LIBRARY NAMES GLESv2 OpenGLES
                                    HINTS ${PC_OPENGLES_LIBDIR} ${CMAKE_OSX_SYSROOT}/System/Library
-                                   PATH_SUFFIXES Frameworks
-                                   NO_CACHE)
+                                   PATH_SUFFIXES Frameworks)
   find_path(OPENGLES_INCLUDE_DIR NAMES GLES2/gl2.h ES2/gl.h
-                                 HINTS ${PC_OPENGLES_INCLUDEDIR} ${OPENGLES_gl_LIBRARY}/Headers
-                                 NO_CACHE)
+                                 HINTS ${PC_OPENGLES_INCLUDEDIR} ${OPENGLES_gl_LIBRARY}/Headers)
   find_path(OPENGLES3_INCLUDE_DIR NAMES GLES3/gl3.h ES3/gl.h
-                                  HINTS ${PC_OPENGLES_INCLUDEDIR} ${OPENGLES_gl_LIBRARY}/Headers
-                                  NO_CACHE)
+                                  HINTS ${PC_OPENGLES_INCLUDEDIR} ${OPENGLES_gl_LIBRARY}/Headers)
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(OpenGLES
@@ -30,26 +27,24 @@ if(NOT TARGET OpenGL::GLES)
 
   if(OPENGLES_FOUND)
     if(${OPENGLES_gl_LIBRARY} MATCHES ".+\.so$")
-      add_library(OpenGL::GLES SHARED IMPORTED)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} SHARED IMPORTED)
     else()
-      add_library(OpenGL::GLES UNKNOWN IMPORTED)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
     endif()
 
-    set_target_properties(OpenGL::GLES PROPERTIES
-                                       IMPORTED_LOCATION "${OPENGLES_gl_LIBRARY}"
-                                       INTERFACE_INCLUDE_DIRECTORIES "${OPENGLES_INCLUDE_DIR}"
-                                       IMPORTED_NO_SONAME TRUE)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${OPENGLES_gl_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${OPENGLES_INCLUDE_DIR}"
+                                                                     IMPORTED_NO_SONAME TRUE)
 
     if(OPENGLES3_INCLUDE_DIR)
-      set_property(TARGET OpenGL::GLES APPEND PROPERTY
-                                       INTERFACE_INCLUDE_DIRECTORIES "${OPENGLES3_INCLUDE_DIR}")
-      set_target_properties(OpenGL::GLES PROPERTIES
-                                         INTERFACE_COMPILE_DEFINITIONS HAS_GLES=3)
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            INTERFACE_INCLUDE_DIRECTORIES "${OPENGLES3_INCLUDE_DIR}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_GLES=3)
     else()
-      set_target_properties(OpenGL::GLES PROPERTIES
-                                         INTERFACE_COMPILE_DEFINITIONS HAS_GLES=2)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_GLES=2)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP OpenGL::GLES)
   endif()
 endif()
diff --git a/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt b/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt
index 871af8a8977ab..4c4b3c025315b 100644
--- a/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt
@@ -10,7 +10,7 @@ set(HEADERS BaseRenderBuffer.h
             RenderBufferManager.h
 )
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES RenderBufferOpenGLES.cpp
                       RenderBufferPoolOpenGLES.cpp)
   list(APPEND HEADERS RenderBufferOpenGLES.h
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
index d371b9fab3a6a..23d3307351a68 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
@@ -8,7 +8,7 @@ if(CORE_SYSTEM_NAME STREQUAL windows)
   list(APPEND HEADERS RPWinRenderer.h)
 endif()
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES RPRendererOpenGLES.cpp)
   list(APPEND HEADERS RPRendererOpenGLES.h)
 endif()
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt
index 279693766fac5..5467be87ef086 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt
@@ -29,7 +29,7 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
                       RenderCapture.h)
 endif()
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES FrameBufferObject.cpp)
   list(APPEND HEADERS FrameBufferObject.h)
 endif()
@@ -43,7 +43,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl)
                       RenderCaptureGL.h)
 endif()
 
-if(TARGET OpenGL::GLES AND ("android" IN_LIST CORE_PLATFORM_NAME_LC OR
+if(TARGET ${APP_NAME_LC}::OpenGLES AND ("android" IN_LIST CORE_PLATFORM_NAME_LC OR
                             "ios" IN_LIST CORE_PLATFORM_NAME_LC OR
                             "tvos" IN_LIST CORE_PLATFORM_NAME_LC OR
                             "gbm" IN_LIST CORE_PLATFORM_NAME_LC OR
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
index 750b7a0bd97d6..ac93f18d314a3 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
@@ -10,7 +10,7 @@ if(VAAPI_FOUND)
     list(APPEND SOURCES RendererVAAPIGL.cpp)
     list(APPEND HEADERS RendererVAAPIGL.h)
   endif()
-  if(TARGET OpenGL::GLES)
+  if(TARGET ${APP_NAME_LC}::OpenGLES)
     list(APPEND SOURCES RendererVAAPIGLES.cpp)
     list(APPEND HEADERS RendererVAAPIGLES.h)
   endif()
@@ -35,7 +35,7 @@ if(CORE_SYSTEM_NAME STREQUAL osx)
 endif()
 
 if(CORE_SYSTEM_NAME STREQUAL darwin_embedded)
-  if(TARGET OpenGL::GLES)
+  if(TARGET ${APP_NAME_LC}::OpenGLES)
     list(APPEND SOURCES RendererVTBGLES.cpp)
     list(APPEND HEADERS RendererVTBGLES.h)
   endif()
@@ -56,7 +56,7 @@ if("gbm" IN_LIST CORE_PLATFORM_NAME_LC OR "wayland" IN_LIST CORE_PLATFORM_NAME_L
                         VideoLayerBridgeDRMPRIME.h)
   endif()
 
-  if(TARGET OpenGL::GLES)
+  if(TARGET ${APP_NAME_LC}::OpenGLES)
     list(APPEND SOURCES RendererDRMPRIMEGLES.cpp
                         DRMPRIMEEGL.cpp)
     list(APPEND HEADERS RendererDRMPRIMEGLES.h
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt
index 2b1940927aa90..4cf1269214d14 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt
@@ -14,7 +14,7 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
 endif()
 
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES ConversionMatrix.cpp
                       ToneMappers.cpp)
   list(APPEND HEADERS ConversionMatrix.h
@@ -30,7 +30,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl)
                       YUV2RGBShaderGL.h)
 endif()
 
-if(TARGET OpenGL::GLES AND ("android" IN_LIST CORE_PLATFORM_NAME_LC OR
+if(TARGET ${APP_NAME_LC}::OpenGLES AND ("android" IN_LIST CORE_PLATFORM_NAME_LC OR
                             "ios" IN_LIST CORE_PLATFORM_NAME_LC OR
                             "tvos" IN_LIST CORE_PLATFORM_NAME_LC OR
                             "gbm" IN_LIST CORE_PLATFORM_NAME_LC OR
diff --git a/xbmc/guilib/CMakeLists.txt b/xbmc/guilib/CMakeLists.txt
index 6b352c78d73a0..dbe128769eca5 100644
--- a/xbmc/guilib/CMakeLists.txt
+++ b/xbmc/guilib/CMakeLists.txt
@@ -159,7 +159,7 @@ set(HEADERS DDSImage.h
             XBTF.h
             XBTFReader.h)
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES Shader.cpp
                       TextureGL.cpp)
   list(APPEND HEADERS Shader.h
@@ -172,7 +172,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
                         GUITextureGL.h)
   endif()
 
-  if(TARGET OpenGL::GLES)
+  if(TARGET ${APP_NAME_LC}::OpenGLES)
     list(APPEND SOURCES GUIFontTTFGLES.cpp
                         GUITextureGLES.cpp)
     list(APPEND HEADERS GUIFontTTFGLES.h
diff --git a/xbmc/pictures/CMakeLists.txt b/xbmc/pictures/CMakeLists.txt
index 678ba70960a73..9253be8f6d6f8 100644
--- a/xbmc/pictures/CMakeLists.txt
+++ b/xbmc/pictures/CMakeLists.txt
@@ -34,7 +34,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND HEADERS SlideShowPictureGL.h)
 endif()
 
-if(TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES SlideShowPictureGLES.cpp)
   list(APPEND HEADERS SlideShowPictureGLES.h)
 endif()
diff --git a/xbmc/rendering/CMakeLists.txt b/xbmc/rendering/CMakeLists.txt
index b128fe51a700a..94ab0720399d1 100644
--- a/xbmc/rendering/CMakeLists.txt
+++ b/xbmc/rendering/CMakeLists.txt
@@ -3,7 +3,7 @@ set(SOURCES RenderSystem.cpp)
 set(HEADERS RenderSystem.h
             RenderSystemTypes.h)
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES MatrixGL.cpp)
   list(APPEND HEADERS MatrixGL.h)
 
diff --git a/xbmc/rendering/gles/CMakeLists.txt b/xbmc/rendering/gles/CMakeLists.txt
index 9276974875c1f..94bef8e8ad410 100644
--- a/xbmc/rendering/gles/CMakeLists.txt
+++ b/xbmc/rendering/gles/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGLES)
   set(SOURCES RenderSystemGLES.cpp
               ScreenshotSurfaceGLES.cpp
               GLESShader.cpp)
diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index a4de874e0ce53..e0f70aa08b2e8 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -199,7 +199,7 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL Clang)
   set_source_files_properties(Mime.cpp PROPERTIES COMPILE_FLAGS -O0)
 endif()
 
-if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES GLUtils.cpp)
   list(APPEND HEADERS GLUtils.h)
 endif()
diff --git a/xbmc/windowing/X11/CMakeLists.txt b/xbmc/windowing/X11/CMakeLists.txt
index 33cc4d7720ba6..b96ff8271aa54 100644
--- a/xbmc/windowing/X11/CMakeLists.txt
+++ b/xbmc/windowing/X11/CMakeLists.txt
@@ -29,7 +29,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES VideoSyncOML.cpp)
   list(APPEND HEADERS VideoSyncOML.h)
 endif()
-if(TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES WinSystemX11GLESContext.cpp)
   list(APPEND HEADERS WinSystemX11GLESContext.h)
 endif()
diff --git a/xbmc/windowing/android/CMakeLists.txt b/xbmc/windowing/android/CMakeLists.txt
index c9462c0419dd7..279d834bcd1c2 100644
--- a/xbmc/windowing/android/CMakeLists.txt
+++ b/xbmc/windowing/android/CMakeLists.txt
@@ -10,7 +10,7 @@ set(HEADERS OSScreenSaverAndroid.h
             AndroidUtils.h
             VideoSyncAndroid.h)
 
-if(TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES WinSystemAndroidGLESContext.cpp)
   list(APPEND HEADERS WinSystemAndroidGLESContext.h)
 endif()
diff --git a/xbmc/windowing/gbm/CMakeLists.txt b/xbmc/windowing/gbm/CMakeLists.txt
index 84cea44524771..4bf4d12262fa1 100644
--- a/xbmc/windowing/gbm/CMakeLists.txt
+++ b/xbmc/windowing/gbm/CMakeLists.txt
@@ -18,7 +18,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES WinSystemGbmGLContext.cpp)
   list(APPEND HEADERS WinSystemGbmGLContext.h)
 endif()
-if(TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES WinSystemGbmGLESContext.cpp)
   list(APPEND HEADERS WinSystemGbmGLESContext.h)
 endif()
diff --git a/xbmc/windowing/wayland/CMakeLists.txt b/xbmc/windowing/wayland/CMakeLists.txt
index 0cfbdee80af43..5e14018453f78 100644
--- a/xbmc/windowing/wayland/CMakeLists.txt
+++ b/xbmc/windowing/wayland/CMakeLists.txt
@@ -58,7 +58,7 @@ if(TARGET ${APP_NAME_LC}::OpenGl)
   list(APPEND SOURCES WinSystemWaylandEGLContextGL.cpp)
   list(APPEND HEADERS WinSystemWaylandEGLContextGL.h)
 endif()
-if(TARGET OpenGL::GLES)
+if(TARGET ${APP_NAME_LC}::OpenGLES)
   list(APPEND SOURCES WinSystemWaylandEGLContextGLES.cpp)
   list(APPEND HEADERS WinSystemWaylandEGLContextGLES.h)
 endif()

From 879f1d20174f9142fa987dcef265327369376cd0 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:06:24 +1000
Subject: [PATCH 14/76] [cmake][modules] FindP8Platform cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindCEC.cmake        |  4 ++--
 cmake/modules/FindP8Platform.cmake | 28 +++++++++++++---------------
 2 files changed, 15 insertions(+), 17 deletions(-)

diff --git a/cmake/modules/FindCEC.cmake b/cmake/modules/FindCEC.cmake
index b15c8e4b1483f..aa2ab9ead7ca6 100644
--- a/cmake/modules/FindCEC.cmake
+++ b/cmake/modules/FindCEC.cmake
@@ -42,7 +42,7 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
                                     COMMAND ${INSTALL_NAME_TOOL} -id ${CEC_LIBRARY} ${CEC_LIBRARY})
     endif()
 
-    add_dependencies(cec P8Platform::P8Platform)
+    add_dependencies(cec ${APP_NAME_LC}::P8Platform)
   endmacro()
 
   # We only need to check p8-platform if we have any intention to build internal
@@ -51,7 +51,7 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
     get_libversion_data("p8-platform" "target")
     find_package(P8Platform ${LIB_P8-PLATFORM_VER} MODULE QUIET REQUIRED)
     # Check if we want to force a build due to a dependency rebuild
-    get_property(LIB_FORCE_REBUILD TARGET P8Platform::P8Platform PROPERTY LIB_BUILD)
+    get_property(LIB_FORCE_REBUILD TARGET ${APP_NAME_LC}::P8Platform PROPERTY LIB_BUILD)
   endif()
 
   set(MODULE_LC cec)
diff --git a/cmake/modules/FindP8Platform.cmake b/cmake/modules/FindP8Platform.cmake
index e80fe9768cfbb..decc37280cdb9 100644
--- a/cmake/modules/FindP8Platform.cmake
+++ b/cmake/modules/FindP8Platform.cmake
@@ -4,11 +4,11 @@
 #
 # This will define the following target:
 #
-#   P8Platform::P8Platform   - The P8-Platform library
+#   ${APP_NAME_LC}::P8Platform   - The P8-Platform library
 
 # If find_package REQUIRED, check again to make sure any potential versions
 # supplied in the call match what we can find/build
-if(NOT P8Platform::P8Platform OR P8Platform_FIND_REQUIRED)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} OR P8Platform_FIND_REQUIRED)
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
   macro(buildlibp8platform)
@@ -59,12 +59,10 @@ if(NOT P8Platform::P8Platform OR P8Platform_FIND_REQUIRED)
     set(P8Platform_FIND_VERSION "2.1")
     find_library(P8-PLATFORM_LIBRARY NAMES p8-platform
                                      HINTS ${DEPENDS_PATH}/lib ${PC_P8PLATFORM_LIBDIR}
-                                     ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                     NO_CACHE)
+                                     ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
     find_path(P8-PLATFORM_INCLUDE_DIR NAMES p8-platform/os.h
                                       HINTS ${DEPENDS_PATH}/include ${PC_P8PLATFORM_INCLUDEDIR}
-                                      ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                      NO_CACHE)
+                                      ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
   endif()
 
   include(FindPackageHandleStandardArgs)
@@ -73,21 +71,21 @@ if(NOT P8Platform::P8Platform OR P8Platform_FIND_REQUIRED)
                                     VERSION_VAR P8-PLATFORM_VERSION)
 
   if(P8PLATFORM_FOUND)
-    add_library(P8Platform::P8Platform UNKNOWN IMPORTED)
-    set_target_properties(P8Platform::P8Platform PROPERTIES
-                                                 IMPORTED_LOCATION "${P8-PLATFORM_LIBRARY}"
-                                                 INTERFACE_INCLUDE_DIRECTORIES "${P8-PLATFORM_INCLUDE_DIR}")
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${P8-PLATFORM_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${P8-PLATFORM_INCLUDE_DIR}")
 
     if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
-      set_target_properties(P8Platform::P8Platform PROPERTIES
-                                                   INTERFACE_LINK_LIBRARIES "-framework CoreVideo")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_LINK_LIBRARIES "-framework CoreVideo")
     endif()
 
     if(TARGET build-p8-platform)
-      add_dependencies(P8Platform::P8Platform build-p8-platform)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} build-p8-platform)
       # If the build target exists here, set LIB_BUILD property to allow calling modules
       # know that this will be rebuilt, and they will need to rebuild as well
-      set_target_properties(P8Platform::P8Platform PROPERTIES LIB_BUILD ON)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES LIB_BUILD ON)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -106,7 +104,7 @@ if(NOT P8Platform::P8Platform OR P8Platform_FIND_REQUIRED)
       add_dependencies(build_internal_depends build-p8-platform)
     endif()
   else()
-    if(P8PLATFORM_FIND_REQUIRED)
+    if(P8Platform_FIND_REQUIRED)
       message(FATAL_ERROR "P8-PLATFORM not found.")
     endif()
   endif()

From 44af16d874097aaa6c1e6a20157eb4481892976b Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:15:49 +1000
Subject: [PATCH 15/76] [cmake][modules] FindPCRE cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindPCRE.cmake | 68 +++++++++++++++++++-----------------
 1 file changed, 36 insertions(+), 32 deletions(-)

diff --git a/cmake/modules/FindPCRE.cmake b/cmake/modules/FindPCRE.cmake
index e662d82116cef..3790dd8f78708 100644
--- a/cmake/modules/FindPCRE.cmake
+++ b/cmake/modules/FindPCRE.cmake
@@ -5,7 +5,7 @@
 #
 # This will define the following targets:
 #
-#   PCRE::PCRE    - The PCRE library
+#   ${APP_NAME_LC}::PCRE    - The PCRE library
 
 macro(buildPCRE)
   set(PCRE_VERSION ${${MODULE}_VER})
@@ -57,7 +57,7 @@ macro(buildPCRE)
   BUILD_DEP_TARGET()
 endmacro()
 
-if(NOT PCRE::pcre)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
@@ -78,25 +78,21 @@ if(NOT PCRE::pcre)
   else()
     if(NOT TARGET PCRE::pcre)
       find_package(PkgConfig)
-      if(PKG_CONFIG_FOUND)
+      if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
         pkg_check_modules(PC_PCRE pcre QUIET)
       endif()
 
       find_path(PCRE_INCLUDE_DIR pcre.h
                                  HINTS ${DEPENDS_PATH}/include ${PC_PCRE_INCLUDEDIR}
-                                 ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                 NO_CACHE)
+                                 ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
       find_library(PCRE_LIBRARY_RELEASE NAMES pcre
                                         HINTS ${DEPENDS_PATH}/lib ${PC_PCRE_LIBDIR}
-                                        ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                        NO_CACHE)
+                                        ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
       find_library(PCRE_LIBRARY_DEBUG NAMES pcred
                                       HINTS ${DEPENDS_PATH}/lib ${PC_PCRE_LIBDIR}
-                                      ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                      NO_CACHE)
+                                      ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
       set(PCRE_VERSION ${PC_PCRE_VERSION})
     else()
-
       # Populate variables for find_package_handle_standard_args usage
       get_target_property(_PCRE_CONFIGURATIONS PCRE::pcre IMPORTED_CONFIGURATIONS)
       foreach(_pcre_config IN LISTS _PCRE_CONFIGURATIONS)
@@ -112,18 +108,13 @@ if(NOT PCRE::pcre)
       # ToDo: patch PCRE cmake to include includedir in config file
       find_path(PCRE_INCLUDE_DIR pcre.h
                                  HINTS ${DEPENDS_PATH}/include ${PC_PCRE_INCLUDEDIR}
-                                 ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                 NO_CACHE)
+                                 ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
       set_target_properties(PCRE::pcre PROPERTIES
                                        INTERFACE_INCLUDE_DIRECTORIES "${PCRE_INCLUDE_DIR}")
     endif()
   endif()
 
-  if(TARGET PCRE::pcre)
-    get_target_property(PCRE_INCLUDE_DIR PCRE::pcre INTERFACE_INCLUDE_DIRECTORIES)
-  endif()
-
   include(SelectLibraryConfigurations)
   select_library_configurations(PCRE)
   unset(PCRE_LIBRARIES)
@@ -134,30 +125,42 @@ if(NOT PCRE::pcre)
                                     VERSION_VAR PCRE_VERSION)
 
   if(PCRE_FOUND)
-    if(NOT TARGET PCRE::pcre)
-      add_library(PCRE::pcre UNKNOWN IMPORTED)
+    # cmake target and not building internal
+    if(TARGET PCRE::pcre AND NOT TARGET pcre)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS PCRE::pcre)
+    else()
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
       if(PCRE_LIBRARY_RELEASE)
-        set_target_properties(PCRE::pcre PROPERTIES
-                                         IMPORTED_CONFIGURATIONS RELEASE
-                                         IMPORTED_LOCATION_RELEASE "${PCRE_LIBRARY_RELEASE}")
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_CONFIGURATIONS RELEASE
+                                                                         IMPORTED_LOCATION_RELEASE "${PCRE_LIBRARY_RELEASE}")
       endif()
       if(PCRE_LIBRARY_DEBUG)
-        set_target_properties(PCRE::pcre PROPERTIES
-                                         IMPORTED_CONFIGURATIONS DEBUG
-                                         IMPORTED_LOCATION_DEBUG "${PCRE_LIBRARY_DEBUG}")
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_LOCATION_DEBUG "${PCRE_LIBRARY_DEBUG}")
+        set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                              IMPORTED_CONFIGURATIONS DEBUG)
       endif()
-      set_target_properties(PCRE::pcre PROPERTIES
-                                       INTERFACE_INCLUDE_DIRECTORIES "${PCRE_INCLUDE_DIR}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${PCRE_INCLUDE_DIR}")
     endif()
 
     # Wee need to explicitly add this define. The cmake config does not propagate this info
     if(WIN32)
-      set_property(TARGET PCRE::pcre APPEND PROPERTY
-                                            INTERFACE_COMPILE_DEFINITIONS "PCRE_STATIC=1")
+      get_target_property(aliased_target ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIASED_TARGET)
+
+      if(NOT aliased_target OR "${aliased_target}" STREQUAL "")
+        set(_pcre_target "${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME}")
+      else()
+        set(_pcre_target "${aliased_target}")
+      endif()
+
+      set_property(TARGET ${_pcre_target} APPEND PROPERTY
+                                                 INTERFACE_COMPILE_DEFINITIONS "PCRE_STATIC")
     endif()
 
     if(TARGET pcre)
-      add_dependencies(PCRE::pcre pcre)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} pcre)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -175,8 +178,9 @@ if(NOT PCRE::pcre)
       endif()
       add_dependencies(build_internal_depends pcre)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP PCRE::pcre)
-
+  else()
+    if(PCRE_FIND_REQUIRED)
+      message(FATAL_ERROR "PCRE library not found. You may want to try -DENABLE_INTERNAL_PCRE=ON")
+    endif()
   endif()
 endif()

From 480aab0ac98195af37edbe6991a4255e693db59d Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:31:32 +1000
Subject: [PATCH 16/76] [cmake][modules] FindPlayerAPIs cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindPlayerAPIs.cmake | 40 +++++++++++++++---------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/cmake/modules/FindPlayerAPIs.cmake b/cmake/modules/FindPlayerAPIs.cmake
index 00b497ffcf2e9..cc2e11ccc0637 100644
--- a/cmake/modules/FindPlayerAPIs.cmake
+++ b/cmake/modules/FindPlayerAPIs.cmake
@@ -5,29 +5,26 @@
 #
 # This will define the following target:
 #
-#   PLAYERAPIS::PLAYERAPIS   - The playerAPIs library
-
-if(NOT TARGET PLAYERAPIS::PLAYERAPIS)
-
-  if(PlayerAPIs_FIND_VERSION)
-    if(PlayerAPIs_FIND_VERSION_EXACT)
-      set(PlayerAPIs_FIND_SPEC "=${PlayerAPIs_FIND_VERSION_COMPLETE}")
-    else()
-      set(PlayerAPIs_FIND_SPEC ">=${PlayerAPIs_FIND_VERSION_COMPLETE}")
-    endif()
-  endif()
+#   ${APP_NAME_LC}::PlayerAPIs   - The playerAPIs library
 
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
+    if(PlayerAPIs_FIND_VERSION)
+      if(PlayerAPIs_FIND_VERSION_EXACT)
+        set(PlayerAPIs_FIND_SPEC "=${PlayerAPIs_FIND_VERSION_COMPLETE}")
+      else()
+        set(PlayerAPIs_FIND_SPEC ">=${PlayerAPIs_FIND_VERSION_COMPLETE}")
+      endif()
+    endif()
+
     pkg_check_modules(PC_PLAYERAPIS libplayerAPIs${PlayerAPIs_FIND_SPEC} QUIET)
   endif()
 
   find_path(PLAYERAPIS_INCLUDE_DIR NAMES starfish-media-pipeline/StarfishMediaAPIs.h
-                                   HINTS ${PC_PLAYERAPIS_INCLUDEDIR}
-                                   NO_CACHE)
+                                   HINTS ${PC_PLAYERAPIS_INCLUDEDIR})
   find_library(PLAYERAPIS_LIBRARY NAMES playerAPIs
-                                  HINTS ${PC_PLAYERAPIS_LIBDIR}
-                                  NO_CACHE)
+                                  HINTS ${PC_PLAYERAPIS_LIBDIR})
 
   set(PLAYERAPIS_VERSION ${PC_PLAYERAPIS_VERSION})
 
@@ -37,10 +34,13 @@ if(NOT TARGET PLAYERAPIS::PLAYERAPIS)
                                     VERSION_VAR PLAYERAPIS_VERSION)
 
   if(PLAYERAPIS_FOUND)
-    add_library(PLAYERAPIS::PLAYERAPIS UNKNOWN IMPORTED)
-    set_target_properties(PLAYERAPIS::PLAYERAPIS PROPERTIES
-                                                 IMPORTED_LOCATION "${PLAYERAPIS_LIBRARY}"
-                                                 INTERFACE_INCLUDE_DIRECTORIES "${PLAYERAPIS_INCLUDE_DIR}")
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP PLAYERAPIS::PLAYERAPIS)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${PLAYERAPIS_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${PLAYERAPIS_INCLUDE_DIR}")
+  else()
+    if(PlayerAPIs_FIND_REQUIRED)
+      message(FATAL_ERROR "PlayerAPIs library not found.")
+    endif()
   endif()
 endif()

From 7659e9943ffb13f3742b5bc18b2a3bd96ec3e93c Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:33:09 +1000
Subject: [PATCH 17/76] [cmake][modules] FindPlayerFactory cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindPlayerFactory.cmake | 40 +++++++++++++--------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/cmake/modules/FindPlayerFactory.cmake b/cmake/modules/FindPlayerFactory.cmake
index 40944e5730c7b..3ddf13a70bbe7 100644
--- a/cmake/modules/FindPlayerFactory.cmake
+++ b/cmake/modules/FindPlayerFactory.cmake
@@ -5,29 +5,26 @@
 #
 # This will define the following target:
 #
-#   PLAYERFACTORY::PLAYERFACTORY   - The PlayerFactory library
-
-if(NOT TARGET PLAYERFACTORY::PLAYERFACTORY)
-
-  if(PlayerFactory_FIND_VERSION)
-    if(PlayerFactory_FIND_VERSION_EXACT)
-      set(PlayerFactory_FIND_SPEC "=${PlayerFactory_FIND_VERSION_COMPLETE}")
-    else()
-      set(PlayerFactory_FIND_SPEC ">=${PlayerFactory_FIND_VERSION_COMPLETE}")
-    endif()
-  endif()
+#   ${APP_NAME_LC}::PlayerFactory   - The PlayerFactory library
 
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
+    if(PlayerFactory_FIND_VERSION)
+      if(PlayerFactory_FIND_VERSION_EXACT)
+        set(PlayerFactory_FIND_SPEC "=${PlayerFactory_FIND_VERSION_COMPLETE}")
+      else()
+        set(PlayerFactory_FIND_SPEC ">=${PlayerFactory_FIND_VERSION_COMPLETE}")
+      endif()
+    endif()
+
     pkg_check_modules(PC_PLAYERFACTORY libpf-1.0${PlayerFactory_FIND_SPEC} QUIET)
   endif()
 
   find_path(PLAYERFACTORY_INCLUDE_DIR NAMES player-factory/common.hpp
-                                      HINTS ${PC_PLAYERFACTORY_INCLUDEDIR}
-                                      NO_CACHE)
+                                      HINTS ${PC_PLAYERFACTORY_INCLUDEDIR})
   find_library(PLAYERFACTORY_LIBRARY NAMES pf-1.0
-                                     HINTS ${PC_PLAYERFACTORY_LIBDIR}
-                                     NO_CACHE)
+                                     HINTS ${PC_PLAYERFACTORY_LIBDIR})
 
   set(PLAYERFACTORY_VERSION ${PC_PLAYERFACTORY_VERSION})
 
@@ -37,10 +34,13 @@ if(NOT TARGET PLAYERFACTORY::PLAYERFACTORY)
                                     VERSION_VAR PLAYERFACTORY_VERSION)
 
   if(PLAYERFACTORY_FOUND)
-    add_library(PLAYERFACTORY::PLAYERFACTORY UNKNOWN IMPORTED)
-    set_target_properties(PLAYERFACTORY::PLAYERFACTORY PROPERTIES
-                                                       IMPORTED_LOCATION "${PLAYERFACTORY_LIBRARY}"
-                                                       INTERFACE_INCLUDE_DIRECTORIES "${PLAYERFACTORY_INCLUDE_DIR}")
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP PLAYERFACTORY::PLAYERFACTORY)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${PLAYERFACTORY_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${PLAYERFACTORY_INCLUDE_DIR}")
+  else()
+    if(PlayerFactory_FIND_REQUIRED)
+      message(FATAL_ERROR "PlayerFactory library not found.")
+    endif()
   endif()
 endif()

From be712d79b0b10ab86f067967941458c2f3257b9d Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:36:10 +1000
Subject: [PATCH 18/76] [cmake][modules] FindPlist cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindPlist.cmake | 28 +++++++++++++---------------
 xbmc/network/CMakeLists.txt   |  2 +-
 2 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/cmake/modules/FindPlist.cmake b/cmake/modules/FindPlist.cmake
index 194ee305e7d53..4ba046de1ce5c 100644
--- a/cmake/modules/FindPlist.cmake
+++ b/cmake/modules/FindPlist.cmake
@@ -5,35 +5,33 @@
 #
 # This will define the following target:
 #
-#   Plist::Plist - The Plist library
+#   ${APP_NAME_LC}::Plist - The Plist library
 
-if(NOT TARGET Plist::Plist)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
-  if(PKG_CONFIG_FOUND)
+  if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
     pkg_search_module(PC_PLIST libplist-2.0 libplist QUIET)
   endif()
 
   find_path(PLIST_INCLUDE_DIR plist/plist.h
-                              HINTS ${PC_PLIST_INCLUDEDIR}
-                              NO_CACHE)
+                              HINTS ${DEPENDS_PATH}/include ${PC_PLIST_INCLUDEDIR}
+                              ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
+  find_library(PLIST_LIBRARY NAMES plist-2.0 plist libplist-2.0 libplist
+                             HINTS ${DEPENDS_PATH}/lib ${PC_PLIST_LIBDIR}
+                             ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
   set(PLIST_VERSION ${PC_PLIST_VERSION})
 
-  find_library(PLIST_LIBRARY NAMES plist-2.0 plist libplist-2.0 libplist
-                                   HINTS ${PC_PLIST_LIBDIR}
-                                   NO_CACHE)
-
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(Plist
                                     REQUIRED_VARS PLIST_LIBRARY PLIST_INCLUDE_DIR
                                     VERSION_VAR PLIST_VERSION)
 
   if(PLIST_FOUND)
-    add_library(Plist::Plist UNKNOWN IMPORTED)
-    set_target_properties(Plist::Plist PROPERTIES
-                                       IMPORTED_LOCATION "${PLIST_LIBRARY}"
-                                       INTERFACE_INCLUDE_DIRECTORIES "${PLIST_INCLUDE_DIR}"
-                                       INTERFACE_COMPILE_DEFINITIONS HAS_AIRPLAY=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP Plist::Plist)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${PLIST_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${PLIST_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_AIRPLAY)
   endif()
 endif()
diff --git a/xbmc/network/CMakeLists.txt b/xbmc/network/CMakeLists.txt
index 20606057613b2..7d7a635a5d21e 100644
--- a/xbmc/network/CMakeLists.txt
+++ b/xbmc/network/CMakeLists.txt
@@ -33,7 +33,7 @@ if(ENABLE_OPTICAL)
   list(APPEND HEADERS cddb.h)
 endif()
 
-if(TARGET Plist::Plist)
+if(TARGET ${APP_NAME_LC}::Plist)
   list(APPEND SOURCES AirPlayServer.cpp)
   list(APPEND HEADERS AirPlayServer.h)
 endif()

From 13d6f1e237db56ee471578bf034fbab7e582d218 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:41:57 +1000
Subject: [PATCH 19/76] [cmake][modules] FindPulseAudio cleanup and use
 core_target_link_libraries

---
 CMakeLists.txt                        |  2 +-
 cmake/modules/FindPulseAudio.cmake    | 64 ++++++++++++---------------
 cmake/scripts/linux/Install.cmake     |  2 +-
 xbmc/cores/AudioEngine/CMakeLists.txt |  2 +-
 4 files changed, 32 insertions(+), 38 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fc57274474e97..662220329cf37 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -296,7 +296,7 @@ endif()
 set(outputFilterRegex "addons/xbmc.json")
 find_addon_xml_in_files(${outputFilterRegex})
 
-if(TARGET ${APP_NAME_LC}::Alsa AND TARGET PulseAudio::PulseAudio)
+if(TARGET ${APP_NAME_LC}::Alsa AND TARGET ${APP_NAME_LC}::PulseAudio)
   list(APPEND AUDIO_BACKENDS_LIST "alsa+pulseaudio")
 endif()
 
diff --git a/cmake/modules/FindPulseAudio.cmake b/cmake/modules/FindPulseAudio.cmake
index 4d480ba6e56ae..907a7f952ea85 100644
--- a/cmake/modules/FindPulseAudio.cmake
+++ b/cmake/modules/FindPulseAudio.cmake
@@ -3,44 +3,40 @@
 # --------------
 # Finds the PulseAudio library
 #
-# This will define the following target:
+# This will define the following targets:
 #
-#   PulseAudio::PulseAudio - The PulseAudio library
-#   PulseAudio::PulseAudioSimple - The PulseAudio simple library
-#   PulseAudio::PulseAudioMainloop - The PulseAudio mainloop library
+#   ${APP_NAME_LC}::PulseAudio - The PulseAudio library
+#   ${APP_NAME_LC}::PulseAudioSimple - The PulseAudio simple library
+#   ${APP_NAME_LC}::PulseAudioMainloop - The PulseAudio mainloop library
 
-if(NOT TARGET PulseAudio::PulseAudio)
-
-  if(PulseAudio_FIND_VERSION)
-    if(PulseAudio_FIND_VERSION_EXACT)
-      set(PulseAudio_FIND_SPEC "=${PulseAudio_FIND_VERSION_COMPLETE}")
-    else()
-      set(PulseAudio_FIND_SPEC ">=${PulseAudio_FIND_VERSION_COMPLETE}")
-    endif()
-  endif()
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
+    if(PulseAudio_FIND_VERSION)
+      if(PulseAudio_FIND_VERSION_EXACT)
+        set(PulseAudio_FIND_SPEC "=${PulseAudio_FIND_VERSION_COMPLETE}")
+      else()
+        set(PulseAudio_FIND_SPEC ">=${PulseAudio_FIND_VERSION_COMPLETE}")
+      endif()
+    endif()
+
     pkg_check_modules(PC_PULSEAUDIO libpulse${PulseAudio_FIND_SPEC} QUIET)
     pkg_check_modules(PC_PULSEAUDIO_MAINLOOP libpulse-mainloop-glib${PulseAudio_FIND_SPEC} QUIET)
     pkg_check_modules(PC_PULSEAUDIO_SIMPLE libpulse-simple${PulseAudio_FIND_SPEC} QUIET)
   endif()
 
   find_path(PULSEAUDIO_INCLUDE_DIR NAMES pulse/pulseaudio.h pulse/simple.h
-                                   HINTS ${PC_PULSEAUDIO_INCLUDEDIR} ${PC_PULSEAUDIO_INCLUDE_DIRS}
-                                   NO_CACHE)
+                                   HINTS ${PC_PULSEAUDIO_INCLUDEDIR} ${PC_PULSEAUDIO_INCLUDE_DIRS})
 
   find_library(PULSEAUDIO_LIBRARY NAMES pulse libpulse
-                                  HINTS ${PC_PULSEAUDIO_LIBDIR} ${PC_PULSEAUDIO_LIBRARY_DIRS}
-                                  NO_CACHE)
+                                  HINTS ${PC_PULSEAUDIO_LIBDIR} ${PC_PULSEAUDIO_LIBRARY_DIRS})
 
   find_library(PULSEAUDIO_SIMPLE_LIBRARY NAMES pulse-simple libpulse-simple
-                                         HINTS ${PC_PULSEAUDIO_LIBDIR} ${PC_PULSEAUDIO_LIBRARY_DIRS}
-                                         NO_CACHE)
+                                         HINTS ${PC_PULSEAUDIO_LIBDIR} ${PC_PULSEAUDIO_LIBRARY_DIRS})
 
   find_library(PULSEAUDIO_MAINLOOP_LIBRARY NAMES pulse-mainloop pulse-mainloop-glib libpulse-mainloop-glib
-                                           HINTS ${PC_PULSEAUDIO_LIBDIR} ${PC_PULSEAUDIO_LIBRARY_DIRS}
-                                           NO_CACHE)
+                                           HINTS ${PC_PULSEAUDIO_LIBDIR} ${PC_PULSEAUDIO_LIBRARY_DIRS})
 
   if(PC_PULSEAUDIO_VERSION)
     set(PULSEAUDIO_VERSION_STRING ${PC_PULSEAUDIO_VERSION})
@@ -59,21 +55,19 @@ if(NOT TARGET PulseAudio::PulseAudio)
     list(APPEND AUDIO_BACKENDS_LIST "pulseaudio")
     set(AUDIO_BACKENDS_LIST ${AUDIO_BACKENDS_LIST} PARENT_SCOPE)
 
-    add_library(PulseAudio::PulseAudioSimple UNKNOWN IMPORTED)
-    set_target_properties(PulseAudio::PulseAudioSimple PROPERTIES
-                                                       IMPORTED_LOCATION "${PULSEAUDIO_SIMPLE_LIBRARY}")
-
-    add_library(PulseAudio::PulseAudioMainloop UNKNOWN IMPORTED)
-    set_target_properties(PulseAudio::PulseAudioMainloop PROPERTIES
-                                                         IMPORTED_LOCATION "${PULSEAUDIO_MAINLOOP_LIBRARY}")
+    add_library(${APP_NAME_LC}::PulseAudioSimple UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::PulseAudioSimple PROPERTIES
+                                                           IMPORTED_LOCATION "${PULSEAUDIO_SIMPLE_LIBRARY}")
 
-    add_library(PulseAudio::PulseAudio UNKNOWN IMPORTED)
-    set_target_properties(PulseAudio::PulseAudio PROPERTIES
-                                                 IMPORTED_LOCATION "${PULSEAUDIO_LIBRARY}"
-                                                 INTERFACE_INCLUDE_DIRECTORIES "${PULSEAUDIO_INCLUDE_DIR}"
-                                                 INTERFACE_COMPILE_DEFINITIONS HAS_PULSEAUDIO=1
-                                                 INTERFACE_LINK_LIBRARIES "PulseAudio::PulseAudioMainloop;PulseAudio::PulseAudioSimple")
+    add_library(${APP_NAME_LC}::PulseAudioMainloop UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::PulseAudioMainloop PROPERTIES
+                                                             IMPORTED_LOCATION "${PULSEAUDIO_MAINLOOP_LIBRARY}")
 
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP PulseAudio::PulseAudio)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${PULSEAUDIO_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${PULSEAUDIO_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_PULSEAUDIO
+                                                                     INTERFACE_LINK_LIBRARIES "${APP_NAME_LC}::PulseAudioMainloop;${APP_NAME_LC}::PulseAudioSimple")
   endif()
 endif()
diff --git a/cmake/scripts/linux/Install.cmake b/cmake/scripts/linux/Install.cmake
index 47dc8faeef74b..efe7674b74a5a 100644
--- a/cmake/scripts/linux/Install.cmake
+++ b/cmake/scripts/linux/Install.cmake
@@ -13,7 +13,7 @@ set(APP_INCLUDE_DIR ${includedir}/${APP_NAME_LC})
 
 # Set XBMC_STANDALONE_SH_PULSE so we can insert PulseAudio block into kodi-standalone
 if(EXISTS ${CMAKE_SOURCE_DIR}/tools/Linux/kodi-standalone.sh.pulse)
-  if(ENABLE_PULSEAUDIO AND TARGET PulseAudio::PulseAudio)
+  if(ENABLE_PULSEAUDIO AND TARGET ${APP_NAME_LC}::PulseAudio)
     file(READ "${CMAKE_SOURCE_DIR}/tools/Linux/kodi-standalone.sh.pulse" pulse_content)
     set(XBMC_STANDALONE_SH_PULSE ${pulse_content})
   endif()
diff --git a/xbmc/cores/AudioEngine/CMakeLists.txt b/xbmc/cores/AudioEngine/CMakeLists.txt
index 5536d7b17ca05..cb3132c1afa48 100644
--- a/xbmc/cores/AudioEngine/CMakeLists.txt
+++ b/xbmc/cores/AudioEngine/CMakeLists.txt
@@ -65,7 +65,7 @@ if(TARGET ${APP_NAME_LC}::Alsa)
   endif()
 endif()
 
-if(TARGET PulseAudio::PulseAudio)
+if(TARGET ${APP_NAME_LC}::PulseAudio)
   list(APPEND SOURCES Sinks/AESinkPULSE.cpp)
   list(APPEND HEADERS Sinks/AESinkPULSE.h)
 endif()

From 2857f0975c1c4d26f483913b3a717fc87e0c78bb Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:46:05 +1000
Subject: [PATCH 20/76] [cmake][modules] FindRapidJSON cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindRapidJSON.cmake | 21 +++++++++++----------
 1 file changed, 11 insertions(+), 10 deletions(-)

diff --git a/cmake/modules/FindRapidJSON.cmake b/cmake/modules/FindRapidJSON.cmake
index df34eff2b27d1..10a21390d1953 100644
--- a/cmake/modules/FindRapidJSON.cmake
+++ b/cmake/modules/FindRapidJSON.cmake
@@ -5,10 +5,10 @@
 #
 # This will define the following target:
 #
-#   RapidJSON::RapidJSON - The RapidJSON library
+#   ${APP_NAME_LC}::RapidJSON - The RapidJSON library
 #
 
-if(NOT TARGET RapidJSON::RapidJSON)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
   macro(buildrapidjson)
@@ -71,8 +71,7 @@ if(NOT TARGET RapidJSON::RapidJSON)
 
       find_path(RAPIDJSON_INCLUDE_DIRS NAMES rapidjson/rapidjson.h
                                        HINTS ${DEPENDS_PATH}/include ${PC_RapidJSON_INCLUDEDIR}
-                                       ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                       NO_CACHE)
+                                       ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
     endif()
   endif()
 
@@ -82,11 +81,11 @@ if(NOT TARGET RapidJSON::RapidJSON)
                                     VERSION_VAR RapidJSON_VERSION)
 
   if(RAPIDJSON_FOUND)
-    add_library(RapidJSON::RapidJSON INTERFACE IMPORTED)
-    set_target_properties(RapidJSON::RapidJSON PROPERTIES
-                                               INTERFACE_INCLUDE_DIRECTORIES "${RAPIDJSON_INCLUDE_DIRS}")
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${RAPIDJSON_INCLUDE_DIRS}")
     if(TARGET rapidjson)
-      add_dependencies(RapidJSON::RapidJSON rapidjson)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} rapidjson)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -104,7 +103,9 @@ if(NOT TARGET RapidJSON::RapidJSON)
       endif()
       add_dependencies(build_internal_depends rapidjson)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP RapidJSON::RapidJSON)
+  else()
+    if(RapidJSON_FIND_REQUIRED)
+      message(FATAL_ERROR "RapidJSON library not found. You may want to try -DENABLE_INTERNAL_RapidJSON=ON")
+    endif()
   endif()
 endif()

From 0f75d80938dfdcf9d366ef183b20524aff2b0638 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 16:18:42 +1000
Subject: [PATCH 21/76] [cmake][macro] core_required_dep append to
 required_deps list if dep found

---
 cmake/scripts/common/Macros.cmake | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/cmake/scripts/common/Macros.cmake b/cmake/scripts/common/Macros.cmake
index d6a8778019bf2..84ca11ec889c4 100644
--- a/cmake/scripts/common/Macros.cmake
+++ b/cmake/scripts/common/Macros.cmake
@@ -421,6 +421,15 @@ function(core_require_dep)
     list(APPEND DEPLIBS ${${depup}_LIBRARIES})
     list(APPEND DEP_DEFINES ${${depup}_DEFINITIONS})
     export_dep()
+
+    # We dont want to add a build tool
+    if (NOT ${depspec} IN_LIST optional_buildtools AND NOT ${depspec} IN_LIST required_buildtools)
+      # If dependency is found and is not in the list (eg shairplay) add to list
+      if (NOT ${depspec} IN_LIST required_deps)
+        set(required_deps  ${required_deps} ${depspec} PARENT_SCOPE)
+      endif()
+    endif()
+
   endforeach()
 endfunction()
 

From 186cce6a70778d249977d874fe2c9625b701e574 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 13:51:48 +1000
Subject: [PATCH 22/76] [cmake][modules] FindShairplay cleanup and use
 core_target_link_libraries

---
 CMakeLists.txt                      |  2 +-
 cmake/modules/FindShairplay.cmake   | 31 ++++++++++++++---------------
 cmake/scripts/android/Install.cmake |  4 ++--
 xbmc/network/CMakeLists.txt         |  2 +-
 4 files changed, 19 insertions(+), 20 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 662220329cf37..c4d2f5a8be47c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -285,7 +285,7 @@ endif()
 
 if(ENABLE_AIRTUNES)
   find_package(Shairplay)
-  if(TARGET Shairplay::Shairplay)
+  if(TARGET ${APP_NAME_LC}::Shairplay)
     core_require_dep(Shairplay)
   endif()
 endif()
diff --git a/cmake/modules/FindShairplay.cmake b/cmake/modules/FindShairplay.cmake
index df4afa72d5b14..fd916ca648524 100644
--- a/cmake/modules/FindShairplay.cmake
+++ b/cmake/modules/FindShairplay.cmake
@@ -7,15 +7,16 @@
 #
 #   Shairplay::Shairplay - The Shairplay library
 
-if(NOT TARGET Shairplay::Shairplay)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-  find_path(SHAIRPLAY_INCLUDE_DIR shairplay/raop.h NO_CACHE)
+  find_path(SHAIRPLAY_INCLUDE_DIR shairplay/raop.h)
+  find_library(SHAIRPLAY_LIBRARY NAMES shairplay libshairplay)
 
   include(FindPackageHandleStandardArgs)
-  find_library(SHAIRPLAY_LIBRARY NAMES shairplay libshairplay
-                                 NO_CACHE)
+  find_package_handle_standard_args(Shairplay
+                                    REQUIRED_VARS SHAIRPLAY_LIBRARY SHAIRPLAY_INCLUDE_DIR)
 
-  if(SHAIRPLAY_INCLUDE_DIR AND SHAIRPLAY_LIBRARY)
+  if(SHAIRPLAY_FOUND)
     include(CheckCSourceCompiles)
     set(CMAKE_REQUIRED_INCLUDES ${SHAIRPLAY_INCLUDE_DIR})
     set(CMAKE_REQUIRED_LIBRARIES ${SHAIRPLAY_LIBRARIES})
@@ -28,17 +29,15 @@ if(NOT TARGET Shairplay::Shairplay)
                                return 0;
                              }
                             " HAVE_SHAIRPLAY_CALLBACK_CLS)
-  endif()
+    unset(CMAKE_REQUIRED_INCLUDES)
+    unset(CMAKE_REQUIRED_LIBRARIES)
 
-  find_package_handle_standard_args(Shairplay
-                                    REQUIRED_VARS SHAIRPLAY_LIBRARY SHAIRPLAY_INCLUDE_DIR HAVE_SHAIRPLAY_CALLBACK_CLS)
-
-  if(SHAIRPLAY_FOUND)
-    add_library(Shairplay::Shairplay UNKNOWN IMPORTED)
-    set_target_properties(Shairplay::Shairplay PROPERTIES
-                                               IMPORTED_LOCATION "${SHAIRPLAY_LIBRARY}"
-                                               INTERFACE_INCLUDE_DIRECTORIES "${SHAIRPLAY_INCLUDE_DIR}"
-                                               INTERFACE_COMPILE_DEFINITIONS HAS_AIRTUNES=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP Shairplay::Shairplay)
+    if(HAVE_SHAIRPLAY_CALLBACK_CLS)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION "${SHAIRPLAY_LIBRARY}"
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${SHAIRPLAY_INCLUDE_DIR}"
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_AIRTUNES)
+    endif()
   endif()
 endif()
diff --git a/cmake/scripts/android/Install.cmake b/cmake/scripts/android/Install.cmake
index b9121410070e9..8e2b90e7b4fa5 100644
--- a/cmake/scripts/android/Install.cmake
+++ b/cmake/scripts/android/Install.cmake
@@ -141,8 +141,8 @@ foreach(library IN LISTS LIBRARY_FILES)
   add_bundle_file(${library} ${libdir}/${APP_NAME_LC} ${CMAKE_BINARY_DIR})
 endforeach()
 
-if(TARGET Shairplay::Shairplay)
-  add_bundle_file(Shairplay::Shairplay ${libdir} "")
+if(TARGET ${APP_NAME_LC}::Shairplay)
+  add_bundle_file(${APP_NAME_LC}::Shairplay ${libdir} "")
 endif()
 
 # Main targets from Makefile.in
diff --git a/xbmc/network/CMakeLists.txt b/xbmc/network/CMakeLists.txt
index 7d7a635a5d21e..b5266914bb38e 100644
--- a/xbmc/network/CMakeLists.txt
+++ b/xbmc/network/CMakeLists.txt
@@ -38,7 +38,7 @@ if(TARGET ${APP_NAME_LC}::Plist)
   list(APPEND HEADERS AirPlayServer.h)
 endif()
 
-if(TARGET Shairplay::Shairplay)
+if(TARGET ${APP_NAME_LC}::Shairplay)
   list(APPEND SOURCES AirTunesServer.cpp)
   list(APPEND HEADERS AirTunesServer.h)
 endif()

From d477ec8dd2f42a127eb7ba359d11d019499e4fb4 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:15:17 +1000
Subject: [PATCH 23/76] [cmake][modules] FindSmbClient cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindSmbClient.cmake             | 91 +++++++++++--------
 cmake/scripts/windows/ArchSetup.cmake         |  2 +-
 xbmc/network/CMakeLists.txt                   |  2 +-
 xbmc/platform/posix/filesystem/CMakeLists.txt |  2 +-
 4 files changed, 56 insertions(+), 41 deletions(-)

diff --git a/cmake/modules/FindSmbClient.cmake b/cmake/modules/FindSmbClient.cmake
index 1cb265036aabb..159dae52f77c0 100644
--- a/cmake/modules/FindSmbClient.cmake
+++ b/cmake/modules/FindSmbClient.cmake
@@ -3,50 +3,65 @@
 # -------------
 # Finds the SMB Client library
 #
-# This will define the following variables::
+# This following imported target will be defined::
 #
-# SMBCLIENT_FOUND - system has SmbClient
-# SMBCLIENT_INCLUDE_DIRS - the SmbClient include directory
-# SMBCLIENT_LIBRARIES - the SmbClient libraries
-# SMBCLIENT_DEFINITIONS - the SmbClient definitions
-#
-# and the following imported targets::
-#
-#   SmbClient::SmbClient   - The SmbClient library
+#   ${APP_NAME_LC}::SmbClient   - The SmbClient library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_SMBCLIENT smbclient QUIET)
-endif()
+  if(WIN32 OR WINDOWS_STORE)
+    # UWP doesnt have native smb support. It receives it from an addon.
+    if(NOT CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_FILESYSTEM_SMB)
+    endif()
+  else()
 
-find_path(SMBCLIENT_INCLUDE_DIR NAMES libsmbclient.h
-                                HINTS ${PC_SMBCLIENT_INCLUDEDIR})
-find_library(SMBCLIENT_LIBRARY NAMES smbclient
-                               HINTS ${PC_SMBCLIENT_LIBDIR})
+    find_package(PkgConfig)
 
-set(SMBCLIENT_VERSION ${PC_SMBCLIENT_VERSION})
+    if(PKG_CONFIG_FOUND)
+      pkg_check_modules(SMBCLIENT smbclient QUIET)
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(SmbClient
-                                  REQUIRED_VARS SMBCLIENT_LIBRARY SMBCLIENT_INCLUDE_DIR
-                                  VERSION_VAR SMBCLIENT_VERSION)
+      # First item is the full path of the library file found
+      # pkg_check_modules does not populate a variable of the found library explicitly
+      list(GET SMBCLIENT_LINK_LIBRARIES 0 SMBCLIENT_LIBRARY)
 
-if(SMBCLIENT_FOUND)
-  set(SMBCLIENT_LIBRARIES ${SMBCLIENT_LIBRARY})
-  if(${SMBCLIENT_LIBRARY} MATCHES ".+\.a$" AND PC_SMBCLIENT_STATIC_LIBRARIES)
-    list(APPEND SMBCLIENT_LIBRARIES ${PC_SMBCLIENT_STATIC_LIBRARIES})
-  endif()
-  set(SMBCLIENT_INCLUDE_DIRS ${SMBCLIENT_INCLUDE_DIR})
-  set(SMBCLIENT_DEFINITIONS -DHAS_FILESYSTEM_SMB=1)
-
-  if(NOT TARGET SmbClient::SmbClient)
-    add_library(SmbClient::SmbClient UNKNOWN IMPORTED)
-    set_target_properties(SmbClient::SmbClient PROPERTIES
-                                   IMPORTED_LOCATION "${SMBCLIENT_LIBRARY}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${SMBCLIENT_INCLUDE_DIR}"
-                                   INTERFACE_COMPILE_DEFINITIONS HAS_FILESYSTEM_SMB=1)
+      # Add link libraries for static lib usage
+      if(${SMBCLIENT_LIBRARY} MATCHES ".+\.a$" AND SMBCLIENT_LINK_LIBRARIES)
+        # Remove duplicates
+        list(REMOVE_DUPLICATES SMBCLIENT_LINK_LIBRARIES)
+
+        # Remove own library
+        list(FILTER SMBCLIENT_LINK_LIBRARIES EXCLUDE REGEX ".*smbclient.*\.a$")
+        set(PC_SMBCLIENT_LINK_LIBRARIES ${SMBCLIENT_LINK_LIBRARIES})
+      endif()
+
+      # pkgconfig sets SMBCLIENT_INCLUDEDIR, map this to our "standard" variable name
+      set(SMBCLIENT_INCLUDE_DIR ${SMBCLIENT_INCLUDEDIR})
+      set(SMBCLIENT_VERSION ${PC_SMBCLIENT_VERSION})
+    else()
+      find_path(SMBCLIENT_INCLUDE_DIR NAMES libsmbclient.h)
+      find_library(SMBCLIENT_LIBRARY NAMES smbclient)
+    endif()
+
+    include(FindPackageHandleStandardArgs)
+    find_package_handle_standard_args(SmbClient
+                                      REQUIRED_VARS SMBCLIENT_LIBRARY SMBCLIENT_INCLUDE_DIR
+                                      VERSION_VAR SMBCLIENT_VERSION)
+
+    if(SMBCLIENT_FOUND)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION "${SMBCLIENT_LIBRARY}"
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${SMBCLIENT_INCLUDE_DIR}"
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_FILESYSTEM_SMB)
+
+      # Add link libraries for static lib usage found from pkg-config
+      if(PC_SMBCLIENT_LINK_LIBRARIES)
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         INTERFACE_LINK_LIBRARIES "${PC_SMBCLIENT_LINK_LIBRARIES}")
+      endif()
+    endif()
   endif()
 endif()
-
-mark_as_advanced(LIBSMBCLIENT_INCLUDE_DIR LIBSMBCLIENT_LIBRARY)
diff --git a/cmake/scripts/windows/ArchSetup.cmake b/cmake/scripts/windows/ArchSetup.cmake
index 1744ae30b02e5..301ecf68c7295 100644
--- a/cmake/scripts/windows/ArchSetup.cmake
+++ b/cmake/scripts/windows/ArchSetup.cmake
@@ -63,7 +63,7 @@ set(SYSTEM_DEFINES -DWIN32_LEAN_AND_MEAN -DNOMINMAX -DHAS_DX -D__STDC_CONSTANT_M
                    $<$<CONFIG:Debug>:-DD3D_DEBUG_INFO>)
 
 # Additional SYSTEM_DEFINES
-list(APPEND SYSTEM_DEFINES -DHAS_WIN32_NETWORK -DHAS_FILESYSTEM_SMB)
+list(APPEND SYSTEM_DEFINES -DHAS_WIN32_NETWORK)
 
 # The /MP option enables /FS by default.
 if(CMAKE_GENERATOR MATCHES "Visual Studio")
diff --git a/xbmc/network/CMakeLists.txt b/xbmc/network/CMakeLists.txt
index b5266914bb38e..a4dac89ecbdd2 100644
--- a/xbmc/network/CMakeLists.txt
+++ b/xbmc/network/CMakeLists.txt
@@ -43,7 +43,7 @@ if(TARGET ${APP_NAME_LC}::Shairplay)
   list(APPEND HEADERS AirTunesServer.h)
 endif()
 
-if(SMBCLIENT_FOUND)
+if(TARGET ${APP_NAME_LC}::SmbClient)
   list(APPEND HEADERS IWSDiscovery.h)
 endif()
 
diff --git a/xbmc/platform/posix/filesystem/CMakeLists.txt b/xbmc/platform/posix/filesystem/CMakeLists.txt
index badb1a8da8d81..2ee8695e80a9f 100644
--- a/xbmc/platform/posix/filesystem/CMakeLists.txt
+++ b/xbmc/platform/posix/filesystem/CMakeLists.txt
@@ -4,7 +4,7 @@ set(SOURCES PosixDirectory.cpp
 set(HEADERS PosixDirectory.h
             PosixFile.h)
 
-if(SMBCLIENT_FOUND)
+if(TARGET ${APP_NAME_LC}::SmbClient)
   list(APPEND SOURCES SMBDirectory.cpp
                       SMBFile.cpp
                       SMBWSDiscovery.cpp

From 60e016d7457d33a74f5e58a97567dfd98f1a8158 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:24:31 +1000
Subject: [PATCH 24/76] [cmake][modules] FindSmctemp cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindSmctemp.cmake | 22 ++++++++++++----------
 1 file changed, 12 insertions(+), 10 deletions(-)

diff --git a/cmake/modules/FindSmctemp.cmake b/cmake/modules/FindSmctemp.cmake
index a96aa3375e2f9..3cfa5d6fa5672 100644
--- a/cmake/modules/FindSmctemp.cmake
+++ b/cmake/modules/FindSmctemp.cmake
@@ -5,14 +5,14 @@
 #
 # This will define the following imported targets::
 #
-#   SMCTEMP::SMCTEMP   - The smctemp library
+#   ${APP_NAME_LC}::Smctemp   - The smctemp library
 
-if(NOT TARGET SMCTEMP::SMCTEMP)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   find_path(SMCTEMP_INCLUDE_DIR NAMES smctemp.h
-                                PATHS ${PC_SMCTEMP_INCLUDEDIR} NO_CACHE)
+                                HINTS ${DEPENDS_PATH}/include)
   find_library(SMCTEMP_LIBRARY NAMES smctemp
-                               PATHS ${PC_SMCTEMP_LIBDIR} NO_CACHE)
+                               HINTS ${DEPENDS_PATH}/lib)
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(Smctemp
@@ -20,11 +20,13 @@ if(NOT TARGET SMCTEMP::SMCTEMP)
                                     VERSION_VAR SMCTEMP_VERSION)
 
   if(SMCTEMP_FOUND)
-    add_library(SMCTEMP::SMCTEMP UNKNOWN IMPORTED)
-    set_target_properties(SMCTEMP::SMCTEMP PROPERTIES
-                                           IMPORTED_LOCATION "${SMCTEMP_LIBRARY}"
-                                           INTERFACE_INCLUDE_DIRECTORIES "${SMCTEMP_INCLUDE_DIR}")
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP SMCTEMP::SMCTEMP)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${SMCTEMP_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${SMCTEMP_INCLUDE_DIR}")
+  else()
+    if(Smctemp_FIND_REQUIRED)
+      message(FATAL_ERROR "Smctemp library not found.")
+    endif()
   endif()
 endif()

From b550f6493e749aff8d6f4a16b12e3a9376daade2 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:27:36 +1000
Subject: [PATCH 25/76] [cmake][modules] FindSndio cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindSndio.cmake         | 20 +++++++++-----------
 xbmc/cores/AudioEngine/CMakeLists.txt |  2 +-
 2 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/cmake/modules/FindSndio.cmake b/cmake/modules/FindSndio.cmake
index c8c7161bff490..bc4f6d370a0e1 100644
--- a/cmake/modules/FindSndio.cmake
+++ b/cmake/modules/FindSndio.cmake
@@ -5,11 +5,11 @@
 #
 # This will define the following target:
 #
-#  Sndio::Sndio - the sndio library
+#  ${APP_NAME_LC}::Sndio - the sndio library
 #
-if(NOT TARGET Sndio::Sndio)
-  find_path(SNDIO_INCLUDE_DIR sndio.h NO_CACHE)
-  find_library(SNDIO_LIBRARY sndio NO_CACHE)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_path(SNDIO_INCLUDE_DIR sndio.h)
+  find_library(SNDIO_LIBRARY sndio)
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(Sndio
@@ -19,12 +19,10 @@ if(NOT TARGET Sndio::Sndio)
     list(APPEND AUDIO_BACKENDS_LIST "sndio")
     set(AUDIO_BACKENDS_LIST ${AUDIO_BACKENDS_LIST} PARENT_SCOPE)
 
-
-    add_library(Sndio::Sndio UNKNOWN IMPORTED)
-    set_target_properties(Sndio::Sndio PROPERTIES
-                                       IMPORTED_LOCATION "${SNDIO_LIBRARY}"
-                                       INTERFACE_INCLUDE_DIRECTORIES "${SNDIO_INCLUDE_DIR}"
-                                       INTERFACE_COMPILE_DEFINITIONS HAS_SNDIO=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP Sndio::Sndio)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${SNDIO_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${SNDIO_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_SNDIO)
   endif()
 endif()
diff --git a/xbmc/cores/AudioEngine/CMakeLists.txt b/xbmc/cores/AudioEngine/CMakeLists.txt
index cb3132c1afa48..593e1849d41a7 100644
--- a/xbmc/cores/AudioEngine/CMakeLists.txt
+++ b/xbmc/cores/AudioEngine/CMakeLists.txt
@@ -93,7 +93,7 @@ if(PIPEWIRE_FOUND)
                       Sinks/pipewire/PipewireThreadLoop.h)
 endif()
 
-if(TARGET Sndio::Sndio)
+if(TARGET ${APP_NAME_LC}::Sndio)
   list(APPEND SOURCES Sinks/AESinkSNDIO.cpp)
   list(APPEND HEADERS Sinks/AESinkSNDIO.h)
 endif()

From c8c60c1addd992d78954edb3f479ce4d4c8d17a2 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:40:13 +1000
Subject: [PATCH 26/76] [cmake][modules] FindSpdlog cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindSpdlog.cmake      | 115 ++++++++++++++--------------
 xbmc/interfaces/swig/CMakeLists.txt |   6 +-
 2 files changed, 61 insertions(+), 60 deletions(-)

diff --git a/cmake/modules/FindSpdlog.cmake b/cmake/modules/FindSpdlog.cmake
index d1c76451d687e..4432acc434775 100644
--- a/cmake/modules/FindSpdlog.cmake
+++ b/cmake/modules/FindSpdlog.cmake
@@ -4,7 +4,7 @@
 #
 # This will define the following target:
 #
-#   spdlog::spdlog   - The Spdlog library
+#   ${APP_NAME_LC}::Spdlog   - The Spdlog library
 
 macro(buildSpdlog)
   if(APPLE)
@@ -45,7 +45,7 @@ macro(buildSpdlog)
   add_dependencies(${MODULE_LC} ${APP_NAME_LC}::Fmt)
 endmacro()
 
-if(NOT TARGET spdlog::spdlog)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
   # Check for dependencies - Must be done before SETUP_BUILD_VARS
@@ -74,59 +74,55 @@ if(NOT TARGET spdlog::spdlog)
 
     buildSpdlog()
   else()
-    if(NOT TARGET spdlog::spdlog)
+    if(TARGET spdlog::spdlog)
+      # This is for the case where a distro provides a non standard (Debug/Release) config type
+      # eg Debian's config file is spdlogConfigTargets-none.cmake
+      # convert this back to either DEBUG/RELEASE or just RELEASE
+      # we only do this because we use find_package_handle_standard_args for config time output
+      # and it isnt capable of handling TARGETS, so we have to extract the info
+      get_target_property(_SPDLOG_CONFIGURATIONS spdlog::spdlog IMPORTED_CONFIGURATIONS)
+      foreach(_spdlog_config IN LISTS _SPDLOG_CONFIGURATIONS)
+        # Some non standard config (eg None on Debian)
+        # Just set to RELEASE var so select_library_configurations can continue to work its magic
+        string(TOUPPER ${_spdlog_config} _spdlog_config_UPPER)
+        if((NOT ${_spdlog_config_UPPER} STREQUAL "RELEASE") AND
+           (NOT ${_spdlog_config_UPPER} STREQUAL "DEBUG"))
+          get_target_property(SPDLOG_LIBRARY_RELEASE spdlog::spdlog IMPORTED_LOCATION_${_spdlog_config_UPPER})
+        else()
+          get_target_property(SPDLOG_LIBRARY_${_spdlog_config_UPPER} spdlog::spdlog IMPORTED_LOCATION_${_spdlog_config_UPPER})
+        endif()
+      endforeach()
+
+      get_target_property(SPDLOG_INCLUDE_DIR spdlog::spdlog INTERFACE_INCLUDE_DIRECTORIES)
+    else()
       find_package(PkgConfig)
       # Fallback to pkg-config and individual lib/include file search
       if(PKG_CONFIG_FOUND)
         pkg_check_modules(PC_SPDLOG spdlog QUIET)
+
+        # Only add -D definitions. Skip -I include as we do a find_path for the header anyway
+        foreach(_spdlog_cflag IN LISTS PC_SPDLOG_CFLAGS)
+          if(${_spdlog_cflag} MATCHES "^-D(.*)")
+            list(APPEND _spdlog_definitions ${CMAKE_MATCH_1})
+          endif()
+        endforeach()
+
         set(SPDLOG_VERSION ${PC_SPDLOG_VERSION})
       endif()
 
       find_path(SPDLOG_INCLUDE_DIR NAMES spdlog/spdlog.h
                                    HINTS ${DEPENDS_PATH}/include ${PC_SPDLOG_INCLUDEDIR}
-                                   ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                   NO_CACHE)
+                                   ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
       find_library(SPDLOG_LIBRARY_RELEASE NAMES spdlog
                                           HINTS ${DEPENDS_PATH}/lib ${PC_SPDLOG_LIBDIR}
-                                          ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                          NO_CACHE)
+                                          ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
       find_library(SPDLOG_LIBRARY_DEBUG NAMES spdlogd
                                         HINTS ${DEPENDS_PATH}/lib ${PC_SPDLOG_LIBDIR}
-                                        ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                        NO_CACHE)
-
-      # Only add -D definitions. Skip -I include as we do a find_path for the header anyway
-      foreach(_spdlog_cflag IN LISTS PC_SPDLOG_CFLAGS)
-        if(${_spdlog_cflag} MATCHES "^-D(.*)")
-          list(APPEND _spdlog_definitions ${CMAKE_MATCH_1})
-        endif()
-      endforeach()
+                                        ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
     endif()
   endif()
 
-  if(TARGET spdlog::spdlog)
-    # This is for the case where a distro provides a non standard (Debug/Release) config type
-    # eg Debian's config file is spdlogConfigTargets-none.cmake
-    # convert this back to either DEBUG/RELEASE or just RELEASE
-    # we only do this because we use find_package_handle_standard_args for config time output
-    # and it isnt capable of handling TARGETS, so we have to extract the info
-    get_target_property(_SPDLOG_CONFIGURATIONS spdlog::spdlog IMPORTED_CONFIGURATIONS)
-    foreach(_spdlog_config IN LISTS _SPDLOG_CONFIGURATIONS)
-      # Some non standard config (eg None on Debian)
-      # Just set to RELEASE var so select_library_configurations can continue to work its magic
-      string(TOUPPER ${_spdlog_config} _spdlog_config_UPPER)
-      if((NOT ${_spdlog_config_UPPER} STREQUAL "RELEASE") AND
-         (NOT ${_spdlog_config_UPPER} STREQUAL "DEBUG"))
-        get_target_property(SPDLOG_LIBRARY_RELEASE spdlog::spdlog IMPORTED_LOCATION_${_spdlog_config_UPPER})
-      else()
-        get_target_property(SPDLOG_LIBRARY_${_spdlog_config_UPPER} spdlog::spdlog IMPORTED_LOCATION_${_spdlog_config_UPPER})
-      endif()
-    endforeach()
-
-    get_target_property(SPDLOG_INCLUDE_DIR spdlog::spdlog INTERFACE_INCLUDE_DIRECTORIES)
-  endif()
-
   include(SelectLibraryConfigurations)
   select_library_configurations(SPDLOG)
   unset(SPDLOG_LIBRARIES)
@@ -137,34 +133,35 @@ if(NOT TARGET spdlog::spdlog)
                                     VERSION_VAR SPDLOG_VERSION)
 
   if(Spdlog_FOUND)
-    if(NOT TARGET spdlog::spdlog)
-      # Ideally we probably shouldnt be overriding these. We should trust the cmake config file
-      list(APPEND _spdlog_definitions SPDLOG_DEBUG_ON
-                                      SPDLOG_NO_ATOMIC_LEVELS)
+    # cmake target and not building internal
+    if(TARGET spdlog::spdlog AND NOT TARGET spdlog)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS spdlog::spdlog)
 
-      add_library(spdlog::spdlog UNKNOWN IMPORTED)
+    else()
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
       if(SPDLOG_LIBRARY_RELEASE)
-        set_target_properties(spdlog::spdlog PROPERTIES
-                                             IMPORTED_CONFIGURATIONS RELEASE
-                                             IMPORTED_LOCATION_RELEASE "${SPDLOG_LIBRARY_RELEASE}")
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_CONFIGURATIONS RELEASE
+                                                                         IMPORTED_LOCATION_RELEASE "${SPDLOG_LIBRARY_RELEASE}")
       endif()
       if(SPDLOG_LIBRARY_DEBUG)
-        set_target_properties(spdlog::spdlog PROPERTIES
-                                             IMPORTED_CONFIGURATIONS DEBUG
-                                             IMPORTED_LOCATION_DEBUG "${SPDLOG_LIBRARY_DEBUG}")
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_LOCATION_DEBUG "${SPDLOG_LIBRARY_DEBUG}")
+        set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                              IMPORTED_CONFIGURATIONS DEBUG)
       endif()
-      set_target_properties(spdlog::spdlog PROPERTIES
-                                           INTERFACE_INCLUDE_DIRECTORIES "${SPDLOG_INCLUDE_DIR}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${SPDLOG_INCLUDE_DIR}")
 
-      # We need to append in case the cmake config already has definitions
-      set_property(TARGET spdlog::spdlog APPEND PROPERTY
-                                                INTERFACE_COMPILE_DEFINITIONS "${_spdlog_definitions}")
+      if(_spdlog_definitions)
+        # We need to append in case the cmake config already has definitions
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         INTERFACE_COMPILE_DEFINITIONS "${_spdlog_definitions}")
+      endif()
     endif()
 
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP spdlog::spdlog)
-
     if(TARGET spdlog)
-      add_dependencies(spdlog::spdlog spdlog)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} spdlog)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -182,5 +179,9 @@ if(NOT TARGET spdlog::spdlog)
       endif()
       add_dependencies(build_internal_depends spdlog)
     endif()
+  else()
+    if(Spdlog_FIND_REQUIRED)
+      message(FATAL_ERROR "Spdlog libraries were not found. You may want to try -DENABLE_INTERNAL_SPDLOG=ON")
+    endif()
   endif()
 endif()
diff --git a/xbmc/interfaces/swig/CMakeLists.txt b/xbmc/interfaces/swig/CMakeLists.txt
index 0d0cadcabd524..ae23c77261af4 100644
--- a/xbmc/interfaces/swig/CMakeLists.txt
+++ b/xbmc/interfaces/swig/CMakeLists.txt
@@ -117,9 +117,9 @@ add_library(python_binding STATIC ${SOURCES})
 set_target_properties(python_binding PROPERTIES POSITION_INDEPENDENT_CODE TRUE
                                                 FOLDER "Build Utilities")
 set(core_DEPENDS python_binding ${core_DEPENDS} CACHE STRING "" FORCE)
-add_dependencies(python_binding ${GLOBAL_TARGET_DEPS})
-# This propagates target options from dependencies (eg spdlog definitions)
-target_link_libraries(python_binding PRIVATE ${GLOBAL_TARGET_DEPS})
+
+# This target is not run through our regular macro's. Explicitly link required target
+target_link_libraries(python_binding PRIVATE ${APP_NAME_LC}::Spdlog)
 
 if(CORE_SYSTEM_NAME STREQUAL windowsstore)
   set_target_properties(python_binding PROPERTIES STATIC_LIBRARY_FLAGS "/ignore:4264")

From 717844a237936d898de8b37109bd866b1c8d9839 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:45:34 +1000
Subject: [PATCH 27/76] [cmake][modules] FindSqlite3 cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindSqlite3.cmake | 32 +++++++++++++++++---------------
 1 file changed, 17 insertions(+), 15 deletions(-)

diff --git a/cmake/modules/FindSqlite3.cmake b/cmake/modules/FindSqlite3.cmake
index 6fb2bfe2d74d5..c7c81fd96897c 100644
--- a/cmake/modules/FindSqlite3.cmake
+++ b/cmake/modules/FindSqlite3.cmake
@@ -5,23 +5,23 @@
 #
 # This will define the following target:
 #
-#   SQLite3::SQLite3 - The SQLite3 library
+#   ${APP_NAME_LC}::Sqlite3 - The SQLite3 library
 #
 
-if(NOT TARGET SQLite3::SQLite3)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
-  if(PKG_CONFIG_FOUND)
+  if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
     pkg_check_modules(PC_SQLITE3 sqlite3 QUIET)
+
+    set(SQLITE3_VERSION ${PC_SQLITE3_VERSION})
   endif()
 
   find_path(SQLITE3_INCLUDE_DIR NAMES sqlite3.h
-                                HINTS ${PC_SQLITE3_INCLUDEDIR}
-                                NO_CACHE)
+                             HINTS ${DEPENDS_PATH}/include ${PC_SQLITE3_INCLUDEDIR}
+                             ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
   find_library(SQLITE3_LIBRARY NAMES sqlite3
-                               HINTS ${PC_SQLITE3_LIBDIR}
-                               NO_CACHE)
-
-  set(SQLITE3_VERSION ${PC_SQLITE3_VERSION})
+                               HINTS ${DEPENDS_PATH}/lib ${PC_SQLITE3_LIBDIR}
+                               ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
   include(FindPackageHandleStandardArgs)
   find_package_handle_standard_args(Sqlite3
@@ -29,11 +29,13 @@ if(NOT TARGET SQLite3::SQLite3)
                                     VERSION_VAR SQLITE3_VERSION)
 
   if(Sqlite3_FOUND)
-    add_library(SQLite3::SQLite3 UNKNOWN IMPORTED)
-    set_target_properties(SQLite3::SQLite3 PROPERTIES
-                                           IMPORTED_LOCATION "${SQLITE3_LIBRARY}"
-                                           INTERFACE_INCLUDE_DIRECTORIES "${SQLITE3_INCLUDE_DIR}")
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP SQLite3::SQLite3)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${SQLITE3_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${SQLITE3_INCLUDE_DIR}")
+  else()
+    if(Sqlite3_FIND_REQUIRED)
+      message(FATAL_ERROR "SQLite3 library not found.")
+    endif()
   endif()
 endif()

From 64c2dcdead736415436177e1bf9b936646940d4a Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:53:30 +1000
Subject: [PATCH 28/76] [cmake][modules] FindTagLib cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindTagLib.cmake | 67 ++++++++++++++--------------------
 1 file changed, 28 insertions(+), 39 deletions(-)

diff --git a/cmake/modules/FindTagLib.cmake b/cmake/modules/FindTagLib.cmake
index 1883d3fd9d14b..04b78d3d921d4 100644
--- a/cmake/modules/FindTagLib.cmake
+++ b/cmake/modules/FindTagLib.cmake
@@ -5,7 +5,7 @@
 #
 # This will define the following target:
 #
-#   TagLib::TagLib   - The TagLib library
+#   ${APP_NAME_LC}::TagLib   - The TagLib library
 #
 
 macro(buildTagLib)
@@ -46,9 +46,10 @@ macro(buildTagLib)
   BUILD_DEP_TARGET()
 
   add_dependencies(${MODULE_LC} ZLIB::ZLIB)
+  set(TAGLIB_LINK_LIBRARIES "ZLIB::ZLIB")
 endmacro()
 
-if(NOT TARGET TagLib::TagLib)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
@@ -71,6 +72,7 @@ if(NOT TARGET TagLib::TagLib)
     # Build Taglib
     buildTagLib()
   else()
+    find_package(PkgConfig)
     if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
       if(TagLib_FIND_VERSION)
         if(TagLib_FIND_VERSION_EXACT)
@@ -79,29 +81,18 @@ if(NOT TARGET TagLib::TagLib)
           set(TagLib_FIND_SPEC ">=${TagLib_FIND_VERSION_COMPLETE}")
         endif()
       endif()
-      pkg_check_modules(PC_TAGLIB taglib${TagLib_FIND_SPEC} QUIET)
-
-      set(TAGLIB_LINK_LIBS ${PC_TAGLIB_LIBRARIES})
+      pkg_check_modules(TAGLIB taglib${TagLib_FIND_SPEC} QUIET)
     endif()
 
     find_path(TAGLIB_INCLUDE_DIR NAMES taglib/tag.h
-                                 HINTS ${DEPENDS_PATH}/include ${PC_TAGLIB_INCLUDEDIR}
-                                 ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                 NO_CACHE)
+                                 HINTS ${DEPENDS_PATH}/include ${TAGLIB_INCLUDEDIR}
+                                 ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
     find_library(TAGLIB_LIBRARY_RELEASE NAMES tag
-                                        HINTS ${DEPENDS_PATH}/lib ${PC_TAGLIB_LIBDIR}
-                                        ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                        NO_CACHE)
+                                        HINTS ${DEPENDS_PATH}/lib ${TAGLIB_LIBDIR}
+                                        ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
     find_library(TAGLIB_LIBRARY_DEBUG NAMES tagd
-                                      HINTS ${DEPENDS_PATH}/lib ${PC_TAGLIB_LIBDIR}
-                                      ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG}
-                                      NO_CACHE)
-
-    if(TAGLIBCONFIG_VER)
-      set(TAGLIB_VERSION ${TAGLIBCONFIG_VER})
-    else()
-      set(TAGLIB_VERSION ${PC_TAGLIB_VERSION})
-    endif()
+                                      HINTS ${DEPENDS_PATH}/lib ${TAGLIB_LIBDIR}
+                                      ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
   endif()
 
   include(SelectLibraryConfigurations)
@@ -114,29 +105,29 @@ if(NOT TARGET TagLib::TagLib)
                                     VERSION_VAR TAGLIB_VERSION)
 
   if(TagLib_FOUND)
-    add_library(TagLib::TagLib UNKNOWN IMPORTED)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
     if(TAGLIB_LIBRARY_RELEASE)
-      set_target_properties(TagLib::TagLib PROPERTIES
-                                           IMPORTED_CONFIGURATIONS RELEASE
-                                           IMPORTED_LOCATION_RELEASE "${TAGLIB_LIBRARY_RELEASE}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_CONFIGURATIONS RELEASE
+                                                                       IMPORTED_LOCATION_RELEASE "${TAGLIB_LIBRARY_RELEASE}")
     endif()
     if(TAGLIB_LIBRARY_DEBUG)
-      set_target_properties(TagLib::TagLib PROPERTIES
-                                           IMPORTED_CONFIGURATIONS DEBUG
-                                           IMPORTED_LOCATION_DEBUG "${TAGLIB_LIBRARY_DEBUG}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION_DEBUG "${TAGLIB_LIBRARY_DEBUG}")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            IMPORTED_CONFIGURATIONS DEBUG)
     endif()
-    set_target_properties(TagLib::TagLib PROPERTIES
-                                         INTERFACE_INCLUDE_DIRECTORIES "${TAGLIB_INCLUDE_DIR}")
-
-    # if pkg-config returns link libs at to TARGET. For internal build, we use ZLIB::Zlib
-    # dependency explicitly
-    if(TAGLIB_LINK_LIBS)
-        set_target_properties(TagLib::TagLib PROPERTIES
-                                             INTERFACE_LINK_LIBRARIES "${TAGLIB_LINK_LIBS}")
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${TAGLIB_INCLUDE_DIR}")
+
+    # if pkg-config returns link libs add to TARGET.
+    if(TAGLIB_LINK_LIBRARIES)
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         INTERFACE_LINK_LIBRARIES "${TAGLIB_LINK_LIBRARIES}")
     endif()
 
     if(TARGET taglib)
-      add_dependencies(TagLib::TagLib taglib)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} taglib)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -154,11 +145,9 @@ if(NOT TARGET TagLib::TagLib)
       endif()
       add_dependencies(build_internal_depends taglib)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP TagLib::TagLib)
   else()
     if(TagLib_FIND_REQUIRED)
-      message(FATAL_ERROR "TagLib not found.")
+      message(FATAL_ERROR "TagLib not found. You may want to try -DENABLE_INTERNAL_TAGLIB=ON")
     endif()
   endif()
 endif()

From 2e86babb7e605c704e1bc4bf51f5292fef1cb3a0 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 14:58:09 +1000
Subject: [PATCH 29/76] [cmake][modules] FindTinyXML cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindTinyXML.cmake | 88 +++++++++++++++------------------
 1 file changed, 39 insertions(+), 49 deletions(-)

diff --git a/cmake/modules/FindTinyXML.cmake b/cmake/modules/FindTinyXML.cmake
index c0daa9978e82b..9b17c52629e0b 100644
--- a/cmake/modules/FindTinyXML.cmake
+++ b/cmake/modules/FindTinyXML.cmake
@@ -3,68 +3,58 @@
 # -----------
 # Finds the TinyXML library
 #
-# This will define the following variables::
+# The following imported targets are created::
 #
-# TINYXML_FOUND - system has TinyXML
-# TINYXML_INCLUDE_DIRS - the TinyXML include directory
-# TINYXML_LIBRARIES - the TinyXML libraries
-# TINYXML_DEFINITIONS - the TinyXML definitions
-#
-# and the following imported targets::
-#
-#   TinyXML::TinyXML   - The TinyXML library
+#   ${APP_NAME_LC}::TinyXML   - The TinyXML library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_TINYXML tinyxml QUIET)
-endif()
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_TINYXML tinyxml QUIET)
+  endif()
 
-find_path(TINYXML_INCLUDE_DIR tinyxml.h
-                              PATH_SUFFIXES tinyxml
-                              HINTS ${PC_TINYXML_INCLUDEDIR})
-find_library(TINYXML_LIBRARY_RELEASE NAMES tinyxml tinyxmlSTL
+  find_path(TINYXML_INCLUDE_DIR tinyxml.h
+                                PATH_SUFFIXES tinyxml
+                                HINTS ${PC_TINYXML_INCLUDEDIR})
+  find_library(TINYXML_LIBRARY_RELEASE NAMES tinyxml tinyxmlSTL
+                                       PATH_SUFFIXES tinyxml
+                                       HINTS ${PC_TINYXML_LIBDIR})
+  find_library(TINYXML_LIBRARY_DEBUG NAMES tinyxmld tinyxmlSTLd
                                      PATH_SUFFIXES tinyxml
                                      HINTS ${PC_TINYXML_LIBDIR})
-find_library(TINYXML_LIBRARY_DEBUG NAMES tinyxmld tinyxmlSTLd
-                                   PATH_SUFFIXES tinyxml
-                                   HINTS ${PC_TINYXML_LIBDIR})
-set(TINYXML_VERSION ${PC_TINYXML_VERSION})
+  set(TINYXML_VERSION ${PC_TINYXML_VERSION})
 
-include(SelectLibraryConfigurations)
-select_library_configurations(TINYXML)
+  include(SelectLibraryConfigurations)
+  select_library_configurations(TINYXML)
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(TinyXML
-                                  REQUIRED_VARS TINYXML_LIBRARY TINYXML_INCLUDE_DIR
-                                  VERSION_VAR TINYXML_VERSION)
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(TinyXML
+                                    REQUIRED_VARS TINYXML_LIBRARY TINYXML_INCLUDE_DIR
+                                    VERSION_VAR TINYXML_VERSION)
 
-if(TINYXML_FOUND)
-  set(TINYXML_LIBRARIES ${TINYXML_LIBRARY})
-  set(TINYXML_INCLUDE_DIRS ${TINYXML_INCLUDE_DIR})
-  if(WIN32)
-    set(TINYXML_DEFINITIONS -DTIXML_USE_STL=1)
-  endif()
-
-  if(NOT TARGET TinyXML::TinyXML)
-    add_library(TinyXML::TinyXML UNKNOWN IMPORTED)
+  if(TINYXML_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
     if(TINYXML_LIBRARY_RELEASE)
-      set_target_properties(TinyXML::TinyXML PROPERTIES
-                                             IMPORTED_CONFIGURATIONS RELEASE
-                                             IMPORTED_LOCATION "${TINYXML_LIBRARY_RELEASE}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_CONFIGURATIONS RELEASE
+                                                                       IMPORTED_LOCATION_RELEASE "${TINYXML_LIBRARY_RELEASE}")
     endif()
     if(TINYXML_LIBRARY_DEBUG)
-      set_target_properties(TinyXML::TinyXML PROPERTIES
-                                             IMPORTED_CONFIGURATIONS DEBUG
-                                             IMPORTED_LOCATION "${TINYXML_LIBRARY_DEBUG}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION_DEBUG "${TINYXML_LIBRARY_DEBUG}")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            IMPORTED_CONFIGURATIONS DEBUG)
     endif()
-    set_target_properties(TinyXML::TinyXML PROPERTIES
-                                           INTERFACE_INCLUDE_DIRECTORIES "${TINYXML_INCLUDE_DIR}")
-    if(WIN32)
-      set_target_properties(TinyXML::TinyXML PROPERTIES
-                                             INTERFACE_COMPILE_DEFINITIONS TIXML_USE_STL=1)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${TINYXML_INCLUDE_DIR}")
+    if(WIN32 OR WINDOWS_STORE)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_COMPILE_DEFINITIONS TIXML_USE_STL)
+    endif()
+  else()
+    if(TinyXML_FIND_REQUIRED)
+      message(FATAL_ERROR "TinyXML library not found.")
     endif()
   endif()
 endif()
-
-mark_as_advanced(TINYXML_INCLUDE_DIR TINYXML_LIBRARY)

From 485a197c02d15e983edb2ebd4b357d122338138b Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:06:42 +1000
Subject: [PATCH 30/76] [cmake][modules] FindTinyXML2 cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindTinyXML2.cmake | 99 ++++++++++++++++----------------
 1 file changed, 48 insertions(+), 51 deletions(-)

diff --git a/cmake/modules/FindTinyXML2.cmake b/cmake/modules/FindTinyXML2.cmake
index a75c370f7e175..d65d4b597713f 100644
--- a/cmake/modules/FindTinyXML2.cmake
+++ b/cmake/modules/FindTinyXML2.cmake
@@ -5,7 +5,7 @@
 #
 # This will define the following target:
 #
-#   tinyxml2::tinyxml2   - The TinyXML2 library
+#   ${APP_NAME_LC}::TinyXML2   - The TinyXML2 library
 
 macro(buildTinyXML2)
   set(TINYXML2_VERSION ${${MODULE}_VER})
@@ -41,72 +41,64 @@ macro(buildTinyXML2)
   BUILD_DEP_TARGET()
 endmacro()
 
-if(NOT TARGET tinyxml2::tinyxml2)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
   set(MODULE_LC tinyxml2)
 
   SETUP_BUILD_VARS()
 
-  find_package(TINYXML2 CONFIG QUIET
+  find_package(tinyxml2 CONFIG QUIET
                                HINTS ${DEPENDS_PATH}/lib/cmake
                                ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
   # Check for existing TINYXML2. If version >= TINYXML2-VERSION file version, dont build
   # A corner case, but if a linux/freebsd user WANTS to build internal tinyxml2, build anyway
-  if((TINYXML2_VERSION VERSION_LESS ${${MODULE}_VER} AND ENABLE_INTERNAL_TINYXML2) OR
+  if((tinyxml2_VERSION VERSION_LESS ${${MODULE}_VER} AND ENABLE_INTERNAL_TINYXML2) OR
      ((CORE_SYSTEM_NAME STREQUAL linux OR CORE_SYSTEM_NAME STREQUAL freebsd) AND ENABLE_INTERNAL_TINYXML2))
 
     buildTinyXML2()
   else()
-    # This is the fallback case where linux distro's dont ship cmake config files
-    # use the old find_library way. Only do this if we didnt find a cmake config 
-    # in the event of the version < depends version
-    if(NOT TARGET tinyxml2::tinyxml2)
+    if(TARGET tinyxml2::tinyxml2)
+      # This is for the case where a distro provides a non standard (Debug/Release) config type
+      # eg Debian's config file is tinyxml2ConfigTargets-none.cmake
+      # convert this back to either DEBUG/RELEASE or just RELEASE
+      # we only do this because we use find_package_handle_standard_args for config time output
+      # and it isnt capable of handling TARGETS, so we have to extract the info
+      get_target_property(_TINYXML2_CONFIGURATIONS tinyxml2::tinyxml2 IMPORTED_CONFIGURATIONS)
+      foreach(_tinyxml2_config IN LISTS _TINYXML2_CONFIGURATIONS)
+        # Some non standard config (eg None on Debian)
+        # Just set to RELEASE var so select_library_configurations can continue to work its magic
+        string(TOUPPER ${_tinyxml2_config} _tinyxml2_config_UPPER)
+        if((NOT ${_tinyxml2_config_UPPER} STREQUAL "RELEASE") AND
+           (NOT ${_tinyxml2_config_UPPER} STREQUAL "DEBUG"))
+          get_target_property(TINYXML2_LIBRARY_RELEASE tinyxml2::tinyxml2 IMPORTED_LOCATION_${_tinyxml2_config_UPPER})
+        else()
+          get_target_property(TINYXML2_LIBRARY_${_tinyxml2_config_UPPER} tinyxml2::tinyxml2 IMPORTED_LOCATION_${_tinyxml2_config_UPPER})
+        endif()
+      endforeach()
+
+      # Need this, as we may only get the existing TARGET from system and not build or use pkg-config
+      get_target_property(TINYXML2_INCLUDE_DIR tinyxml2::tinyxml2 INTERFACE_INCLUDE_DIRECTORIES)
+    else()
       if(PKG_CONFIG_FOUND)
         pkg_check_modules(PC_TINYXML2 tinyxml2 QUIET)
       endif()
 
       find_path(TINYXML2_INCLUDE_DIR NAMES tinyxml2.h
                                      HINTS ${DEPENDS_PATH}/include ${PC_TINYXML2_INCLUDEDIR}
-                                     ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                     NO_CACHE)
+                                     ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
       find_library(TINYXML2_LIBRARY_RELEASE NAMES tinyxml2
                                             HINTS ${DEPENDS_PATH}/lib ${PC_TINYXML2_LIBDIR}
-                                            ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                            NO_CACHE)
+                                            ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
       find_library(TINYXML2_LIBRARY_DEBUG NAMES tinyxml2d
                                           HINTS ${DEPENDS_PATH}/lib ${PC_TINYXML2_LIBDIR}
-                                          ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                          NO_CACHE)
+                                          ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
       set(TINYXML2_VERSION ${PC_TINYXML2_VERSION})
     endif()
   endif()
 
-  if(TARGET tinyxml2::tinyxml2)
-    # This is for the case where a distro provides a non standard (Debug/Release) config type
-    # eg Debian's config file is tinyxml2ConfigTargets-none.cmake
-    # convert this back to either DEBUG/RELEASE or just RELEASE
-    # we only do this because we use find_package_handle_standard_args for config time output
-    # and it isnt capable of handling TARGETS, so we have to extract the info
-    get_target_property(_TINYXML2_CONFIGURATIONS tinyxml2::tinyxml2 IMPORTED_CONFIGURATIONS)
-    foreach(_tinyxml2_config IN LISTS _TINYXML2_CONFIGURATIONS)
-      # Some non standard config (eg None on Debian)
-      # Just set to RELEASE var so select_library_configurations can continue to work its magic
-      string(TOUPPER ${_tinyxml2_config} _tinyxml2_config_UPPER)
-      if((NOT ${_tinyxml2_config_UPPER} STREQUAL "RELEASE") AND
-         (NOT ${_tinyxml2_config_UPPER} STREQUAL "DEBUG"))
-        get_target_property(TINYXML2_LIBRARY_RELEASE tinyxml2::tinyxml2 IMPORTED_LOCATION_${_tinyxml2_config_UPPER})
-      else()
-        get_target_property(TINYXML2_LIBRARY_${_tinyxml2_config_UPPER} tinyxml2::tinyxml2 IMPORTED_LOCATION_${_tinyxml2_config_UPPER})
-      endif()
-    endforeach()
-
-    # Need this, as we may only get the existing TARGET from system and not build or use pkg-config
-    get_target_property(TINYXML2_INCLUDE_DIR tinyxml2::tinyxml2 INTERFACE_INCLUDE_DIRECTORIES)
-  endif()
-
   include(SelectLibraryConfigurations)
   select_library_configurations(TINYXML2)
   unset(TINYXML2_LIBRARIES)
@@ -117,24 +109,28 @@ if(NOT TARGET tinyxml2::tinyxml2)
                                     VERSION_VAR TINYXML2_VERSION)
 
   if(TinyXML2_FOUND)
-    if(NOT TARGET tinyxml2::tinyxml2)
-      add_library(tinyxml2::tinyxml2 UNKNOWN IMPORTED)
+    # cmake target and not building internal
+    if(TARGET tinyxml2::tinyxml2 AND NOT TARGET tinyxml2)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS tinyxml2::tinyxml2)
+    else()
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
       if(TINYXML2_LIBRARY_RELEASE)
-        set_target_properties(tinyxml2::tinyxml2 PROPERTIES
-                                                 IMPORTED_CONFIGURATIONS RELEASE
-                                                 IMPORTED_LOCATION_RELEASE "${TINYXML2_LIBRARY_RELEASE}")
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_CONFIGURATIONS RELEASE
+                                                                         IMPORTED_LOCATION_RELEASE "${TINYXML2_LIBRARY_RELEASE}")
       endif()
       if(TINYXML2_LIBRARY_DEBUG)
-        set_target_properties(tinyxml2::tinyxml2 PROPERTIES
-                                                 IMPORTED_CONFIGURATIONS DEBUG
-                                                 IMPORTED_LOCATION_DEBUG "${TINYXML2_LIBRARY_DEBUG}")
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_LOCATION_DEBUG "${TINYXML2_LIBRARY_DEBUG}")
+        set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                              IMPORTED_CONFIGURATIONS DEBUG)
       endif()
-      set_target_properties(tinyxml2::tinyxml2 PROPERTIES
-                                               INTERFACE_INCLUDE_DIRECTORIES "${TINYXML2_INCLUDE_DIR}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${TINYXML2_INCLUDE_DIR}")
     endif()
 
     if(TARGET tinyxml2)
-      add_dependencies(tinyxml2::tinyxml2 tinyxml2)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} tinyxml2)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -152,8 +148,9 @@ if(NOT TARGET tinyxml2::tinyxml2)
       endif()
       add_dependencies(build_internal_depends tinyxml2)
     endif()
-
+  else()
+    if(TinyXML2_FIND_REQUIRED)
+      message(FATAL_ERROR "TinyXML2 libraries were not found. You may want to try -DENABLE_INTERNAL_TINYXML2=ON")
+    endif()
   endif()
-
-  set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP tinyxml2::tinyxml2)
 endif()

From 622da74650cec93e13befec80677af36b7bad3f2 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:08:56 +1000
Subject: [PATCH 31/76] [cmake][modules] FindUDEV cleanup and use
 core_target_link_libraries

---
 CMakeLists.txt                                |  2 +-
 cmake/modules/FindUDEV.cmake                  | 21 ++++++++-----------
 xbmc/cores/AudioEngine/CMakeLists.txt         |  2 +-
 .../platform/linux/peripherals/CMakeLists.txt |  2 +-
 xbmc/platform/linux/storage/CMakeLists.txt    |  2 +-
 5 files changed, 13 insertions(+), 16 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c4d2f5a8be47c..01bf6a1d7db07 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -271,7 +271,7 @@ if(NOT TARGET ${APP_NAME_LC}::MariaDBClient)
   core_optional_dep(MySqlClient)
 endif()
 
-if(NOT TARGET UDEV::UDEV)
+if(NOT TARGET ${APP_NAME_LC}::UDEV)
   core_optional_dep(LibUSB)
 endif()
 
diff --git a/cmake/modules/FindUDEV.cmake b/cmake/modules/FindUDEV.cmake
index 8187e0206d38f..5ad22f17c80d8 100644
--- a/cmake/modules/FindUDEV.cmake
+++ b/cmake/modules/FindUDEV.cmake
@@ -5,20 +5,18 @@
 #
 # This will define the following target:
 #
-#   UDEV::UDEV   - The UDEV library
+#   ${APP_NAME_LC}::UDEV   - The UDEV library
 
-if(NOT TARGET UDEV::UDEV)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_UDEV libudev QUIET)
   endif()
 
   find_path(UDEV_INCLUDE_DIR NAMES libudev.h
-                             HINTS ${PC_UDEV_INCLUDEDIR}
-                             NO_CACHE)
+                             HINTS ${PC_UDEV_INCLUDEDIR})
   find_library(UDEV_LIBRARY NAMES udev
-                            HINTS ${PC_UDEV_LIBDIR}
-                            NO_CACHE)
+                            HINTS ${PC_UDEV_LIBDIR})
 
   set(UDEV_VERSION ${PC_UDEV_VERSION})
 
@@ -28,11 +26,10 @@ if(NOT TARGET UDEV::UDEV)
                                     VERSION_VAR UDEV_VERSION)
 
   if(UDEV_FOUND)
-    add_library(UDEV::UDEV UNKNOWN IMPORTED)
-    set_target_properties(UDEV::UDEV PROPERTIES
-                                   IMPORTED_LOCATION "${UDEV_LIBRARY}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${UDEV_INCLUDE_DIR}"
-                                   INTERFACE_COMPILE_DEFINITIONS HAVE_LIBUDEV=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP UDEV::UDEV)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${UDEV_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${UDEV_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_LIBUDEV)
   endif()
 endif()
diff --git a/xbmc/cores/AudioEngine/CMakeLists.txt b/xbmc/cores/AudioEngine/CMakeLists.txt
index 593e1849d41a7..9185e1e81d7d0 100644
--- a/xbmc/cores/AudioEngine/CMakeLists.txt
+++ b/xbmc/cores/AudioEngine/CMakeLists.txt
@@ -59,7 +59,7 @@ if(TARGET ${APP_NAME_LC}::Alsa)
     list(APPEND HEADERS Sinks/alsa/ALSAHControlMonitor.h)
   endif()
 
-  if(TARGET UDEV::UDEV)
+  if(TARGET ${APP_NAME_LC}::UDEV)
     list(APPEND SOURCES Sinks/alsa/ALSADeviceMonitor.cpp)
     list(APPEND HEADERS Sinks/alsa/ALSADeviceMonitor.h)
   endif()
diff --git a/xbmc/platform/linux/peripherals/CMakeLists.txt b/xbmc/platform/linux/peripherals/CMakeLists.txt
index 554f753e2fb53..0706421ad0862 100644
--- a/xbmc/platform/linux/peripherals/CMakeLists.txt
+++ b/xbmc/platform/linux/peripherals/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(TARGET UDEV::UDEV)
+if(TARGET ${APP_NAME_LC}::UDEV)
   list(APPEND SOURCES PeripheralBusUSBLibUdev.cpp)
   list(APPEND HEADERS PeripheralBusUSBLibUdev.h)
 elseif(TARGET ${APP_NAME_LC}::LibUSB)
diff --git a/xbmc/platform/linux/storage/CMakeLists.txt b/xbmc/platform/linux/storage/CMakeLists.txt
index 9fa51a23a456f..ed21cbb32e08c 100644
--- a/xbmc/platform/linux/storage/CMakeLists.txt
+++ b/xbmc/platform/linux/storage/CMakeLists.txt
@@ -9,7 +9,7 @@ if(TARGET ${APP_NAME_LC}::DBus)
                       UDisks2Provider.h)
 endif()
 
-if(TARGET UDEV::UDEV)
+if(TARGET ${APP_NAME_LC}::UDEV)
   list(APPEND SOURCES UDevProvider.cpp)
   list(APPEND HEADERS UDevProvider.h)
 endif()

From 3246664564e69bfe9cf793f491b1ddc712d6e151 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:35:28 +1000
Subject: [PATCH 32/76] [cmake][modules] FindUdfread cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindUdfread.cmake | 108 ++++++++++++++++----------------
 xbmc/filesystem/CMakeLists.txt  |   2 +-
 2 files changed, 55 insertions(+), 55 deletions(-)

diff --git a/cmake/modules/FindUdfread.cmake b/cmake/modules/FindUdfread.cmake
index 5aadd9167708b..ff88b31b5cf2d 100644
--- a/cmake/modules/FindUdfread.cmake
+++ b/cmake/modules/FindUdfread.cmake
@@ -5,13 +5,30 @@
 #
 # This will define the following target:
 #
-#   udfread::udfread - The libudfread library
+#   ${APP_NAME_LC}::Udfread - The libudfread library
+
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+
+  macro(buildudfread)
+    set(UDFREAD_VERSION ${${MODULE}_VER})
+    set(BUILD_NAME udfread_build)
+
+    set(CONFIGURE_COMMAND autoreconf -vif &&
+                          ./configure
+                          --enable-static
+                          --disable-shared
+                          --prefix=${DEPENDS_PATH})
+    set(BUILD_IN_SOURCE 1)
+
+    BUILD_DEP_TARGET()
+  endmacro()
 
-if(NOT TARGET udfread::udfread)
   if(WIN32 OR WINDOWS_STORE)
     include(FindPackageMessage)
 
-    find_package(libudfread CONFIG)
+    find_package(libudfread CONFIG QUIET
+                            HINTS ${DEPENDS_PATH}/lib/cmake
+                            ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
     if(libudfread_FOUND)
       # Specifically tailored to kodi windows cmake config - Debug and RelWithDebInfo available
@@ -21,14 +38,11 @@ if(NOT TARGET udfread::udfread)
 
       include(SelectLibraryConfigurations)
       select_library_configurations(UDFREAD)
-
-      find_package_handle_standard_args(Udfread
-                                        REQUIRED_VARS UDFREAD_LIBRARY UDFREAD_INCLUDE_DIR
-                                        VERSION_VAR UDFREAD_VERSION)
+      unset(UDFREAD_LIBRARIES)
     endif()
   else()
     find_package(PkgConfig)
-    pkg_check_modules(udfread libudfread IMPORTED_TARGET GLOBAL QUIET)
+    pkg_check_modules(libudfread libudfread IMPORTED_TARGET GLOBAL QUIET)
 
     include(cmake/scripts/common/ModuleHelpers.cmake)
 
@@ -37,56 +51,42 @@ if(NOT TARGET udfread::udfread)
 
     # Check for existing UDFREAD. If version >= UDFREAD-VERSION file version, dont build
     # A corner case, but if a linux/freebsd user WANTS to build internal udfread, build anyway
-    if(NOT udfread_FOUND OR 
-       (udfread_VERSION VERSION_LESS ${${MODULE}_VER} AND ENABLE_INTERNAL_UDFREAD) OR
+    if((libudfread_VERSION VERSION_LESS ${${MODULE}_VER} AND ENABLE_INTERNAL_UDFREAD) OR
        ((CORE_SYSTEM_NAME STREQUAL linux OR CORE_SYSTEM_NAME STREQUAL freebsd) AND ENABLE_INTERNAL_UDFREAD))
-
-      set(UDFREAD_VERSION ${${MODULE}_VER})
-      set(BUILD_NAME udfread_build)
-
-      set(CONFIGURE_COMMAND autoreconf -vif &&
-                            ./configure
-                            --enable-static
-                            --disable-shared
-                            --prefix=${DEPENDS_PATH})
-      set(BUILD_IN_SOURCE 1)
-
-      BUILD_DEP_TARGET()
-    elseif(udfread_FOUND)
-      get_target_property(UDFREAD_LIBRARY PkgConfig::udfread INTERFACE_LINK_LIBRARIES)
-      get_target_property(UDFREAD_INCLUDE_DIR PkgConfig::udfread INTERFACE_INCLUDE_DIRECTORIES)
-      set(UDFREAD_VERSION ${udfread_VERSION})
-    endif()
-
-    if(udfread_FOUND OR TARGET udfread_build)
-      set(UDFREAD_FOUND ${udfread_FOUND})
-      include(FindPackageMessage)
-      find_package_message(udfread "Found udfread: ${UDFREAD_LIBRARY} (version: \"${UDFREAD_VERSION}\")" "[${UDFREAD_LIBRARY}][${UDFREAD_INCLUDE_DIR}]")
+      buildudfread()
+  
+    else()
+      if(TARGET PkgConfig::libudfread)
+        get_target_property(UDFREAD_LIBRARY PkgConfig::libudfread INTERFACE_LINK_LIBRARIES)
+        get_target_property(UDFREAD_INCLUDE_DIR PkgConfig::libudfread INTERFACE_INCLUDE_DIRECTORIES)
+        set(UDFREAD_VERSION ${libudfread_VERSION})
+      endif()
     endif()
-
   endif()
 
-  # pkgconfig populate target that is sufficient version
-  if(TARGET PkgConfig::udfread AND NOT TARGET udfread_build)
-    add_library(udfread::udfread ALIAS PkgConfig::udfread)
-    set_target_properties(PkgConfig::udfread PROPERTIES
-                                             INTERFACE_COMPILE_DEFINITIONS HAS_UDFREAD=1)
-  # windows cmake config populated target
-  elseif(TARGET libudfread::libudfread)
-    add_library(udfread::udfread ALIAS libudfread::libudfread)
-    set_target_properties(libudfread::libudfread PROPERTIES
-                                                 INTERFACE_COMPILE_DEFINITIONS HAS_UDFREAD=1)
-  # otherwise we are building
-  elseif(TARGET udfread_build)
-    add_library(udfread::udfread UNKNOWN IMPORTED)
-    set_target_properties(udfread::udfread PROPERTIES
-                                           IMPORTED_LOCATION "${UDFREAD_LIBRARY}"
-                                           INTERFACE_INCLUDE_DIRECTORIES "${UDFREAD_INCLUDE_DIR}"
-                                           INTERFACE_COMPILE_DEFINITIONS HAS_UDFREAD=1)
-    add_dependencies(udfread::udfread udfread_build)
-  endif()
+  find_package_handle_standard_args(Udfread
+                                    REQUIRED_VARS UDFREAD_LIBRARY UDFREAD_INCLUDE_DIR
+                                    VERSION_VAR UDFREAD_VERSION)
 
-  if(TARGET udfread::udfread)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP udfread::udfread)
+  if(UDFREAD_FOUND)
+    # pkgconfig populate target that is sufficient version
+    if(TARGET PkgConfig::libudfread AND NOT TARGET udfread_build)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS PkgConfig::libudfread)
+      set_target_properties(PkgConfig::libudfread PROPERTIES
+                                                  INTERFACE_COMPILE_DEFINITIONS HAS_UDFREAD)
+    # windows cmake config populated target
+    elseif(TARGET libudfread::libudfread)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS libudfread::libudfread)
+      set_target_properties(libudfread::libudfread PROPERTIES
+                                                   INTERFACE_COMPILE_DEFINITIONS HAS_UDFREAD)
+    # otherwise we are building
+    elseif(TARGET udfread_build)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION "${UDFREAD_LIBRARY}"
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${UDFREAD_INCLUDE_DIR}"
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_UDFREAD)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} udfread_build)
+    endif()
   endif()
 endif()
diff --git a/xbmc/filesystem/CMakeLists.txt b/xbmc/filesystem/CMakeLists.txt
index 9d653ae0f9cbe..1416872da0b1a 100644
--- a/xbmc/filesystem/CMakeLists.txt
+++ b/xbmc/filesystem/CMakeLists.txt
@@ -131,7 +131,7 @@ if(ISO9660PP_FOUND)
                       ISO9660File.h)
 endif()
 
-if(TARGET udfread::udfread)
+if(TARGET ${APP_NAME_LC}::Udfread)
   list(APPEND SOURCES UDFBlockInput.cpp
                       UDFDirectory.cpp
                       UDFFile.cpp)

From 8311292d5c980a334d03659726b492b040354729 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:37:48 +1000
Subject: [PATCH 33/76] [cmake][modules] FindVDPAU cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindVDPAU.cmake                 | 21 ++++++++-----------
 .../DVDCodecs/Video/CMakeLists.txt            |  2 +-
 .../VideoRenderers/HwDecRender/CMakeLists.txt |  2 +-
 3 files changed, 11 insertions(+), 14 deletions(-)

diff --git a/cmake/modules/FindVDPAU.cmake b/cmake/modules/FindVDPAU.cmake
index 680a43f366223..bb19a5439383d 100644
--- a/cmake/modules/FindVDPAU.cmake
+++ b/cmake/modules/FindVDPAU.cmake
@@ -5,20 +5,18 @@
 #
 # This will define the following target:
 #
-#   VDPAU::VDPAU   - The VDPAU library
+#   ${APP_NAME_LC}::VDPAU   - The VDPAU library
 
-if(NOT TARGET VDPAU::VDPAU)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_VDPAU vdpau QUIET)
   endif()
 
   find_path(VDPAU_INCLUDE_DIR NAMES vdpau/vdpau.h vdpau/vdpau_x11.h
-                              HINTS ${PC_VDPAU_INCLUDEDIR}
-                              NO_CACHE)
+                              HINTS ${PC_VDPAU_INCLUDEDIR})
   find_library(VDPAU_LIBRARY NAMES vdpau
-                             HINTS ${PC_VDPAU_LIBDIR}
-                             NO_CACHE)
+                             HINTS ${PC_VDPAU_LIBDIR})
 
   set(VDPAU_VERSION ${PC_VDPAU_VERSION})
 
@@ -28,11 +26,10 @@ if(NOT TARGET VDPAU::VDPAU)
                                     VERSION_VAR VDPAU_VERSION)
 
   if(VDPAU_FOUND)
-    add_library(VDPAU::VDPAU UNKNOWN IMPORTED)
-    set_target_properties(VDPAU::VDPAU PROPERTIES
-                                       IMPORTED_LOCATION "${VDPAU_LIBRARY}"
-                                       INTERFACE_INCLUDE_DIRECTORIES "${VDPAU_INCLUDE_DIR}"
-                                       INTERFACE_COMPILE_DEFINITIONS HAVE_LIBVDPAU=1)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP VDPAU::VDPAU)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${VDPAU_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${VDPAU_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_LIBVDPAU)
   endif()
 endif()
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt b/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt
index 452ed873be3be..d21f6cc99567a 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt
@@ -16,7 +16,7 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
   list(APPEND HEADERS DXVA.h)
 endif()
 
-if(TARGET VDPAU::VDPAU)
+if(TARGET ${APP_NAME_LC}::VDPAU)
   list(APPEND SOURCES VDPAU.cpp)
   list(APPEND HEADERS VDPAU.h)
 endif()
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
index ac93f18d314a3..14bd61c5b8550 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
@@ -20,7 +20,7 @@ if(VAAPI_FOUND)
   endif()
 endif()
 
-if(TARGET VDPAU::VDPAU)
+if(TARGET ${APP_NAME_LC}::VDPAU)
   list(APPEND SOURCES RendererVDPAU.cpp
                       VdpauGL.cpp)
   list(APPEND HEADERS RendererVDPAU.h

From 6260904afe6b8a25a25469b64f412b2307ea04a7 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:41:00 +1000
Subject: [PATCH 34/76] [cmake][modules] FindWebOSHelpers cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindWebOSHelpers.cmake | 40 ++++++++++++++--------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/cmake/modules/FindWebOSHelpers.cmake b/cmake/modules/FindWebOSHelpers.cmake
index 0c862b7a7913d..facfbcc03e1b6 100644
--- a/cmake/modules/FindWebOSHelpers.cmake
+++ b/cmake/modules/FindWebOSHelpers.cmake
@@ -5,29 +5,26 @@
 #
 # This will define the following target:
 #
-#   WEBOSHELPERS::WEBOSHELPERS   - The webOS helpers library
-
-if(NOT TARGET WEBOSHELPERS::WEBOSHELPERS)
-
-  if(WebOSHelpers_FIND_VERSION)
-    if(WebOSHelpers_FIND_VERSION_EXACT)
-      set(WebOSHelpers_FIND_SPEC "=${WebOSHelpers_FIND_VERSION_COMPLETE}")
-    else()
-      set(WebOSHelpers_FIND_SPEC ">=${WebOSHelpers_FIND_VERSION_COMPLETE}")
-    endif()
-  endif()
+#   ${APP_NAME_LC}::WebOSHelpers   - The webOS helpers library
 
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
+    if(WebOSHelpers_FIND_VERSION)
+      if(WebOSHelpers_FIND_VERSION_EXACT)
+        set(WebOSHelpers_FIND_SPEC "=${WebOSHelpers_FIND_VERSION_COMPLETE}")
+      else()
+        set(WebOSHelpers_FIND_SPEC ">=${WebOSHelpers_FIND_VERSION_COMPLETE}")
+      endif()
+    endif()
+
     pkg_check_modules(PC_WEBOSHELPERS helpers${WebOSHelpers_FIND_SPEC} QUIET)
   endif()
 
   find_path(WEBOSHELPERS_INCLUDE_DIR NAMES webos-helpers/libhelpers.h
-                                     HINTS ${PC_WEBOSHELPERS_INCLUDEDIR}
-                                     NO_CACHE)
+                                     HINTS ${PC_WEBOSHELPERS_INCLUDEDIR})
   find_library(WEBOSHELPERS_LIBRARY NAMES helpers
-                                    HINTS ${PC_WEBOSHELPERS_LIBDIR}
-                                    NO_CACHE)
+                                    HINTS ${PC_WEBOSHELPERS_LIBDIR})
 
   set(WEBOSHELPERS_VERSION ${PC_WEBOSHELPERS_VERSION})
 
@@ -37,10 +34,13 @@ if(NOT TARGET WEBOSHELPERS::WEBOSHELPERS)
                                     VERSION_VAR WEBOSHELPERS_VERSION)
 
   if(WEBOSHELPERS_FOUND)
-    add_library(WEBOSHELPERS::WEBOSHELPERS UNKNOWN IMPORTED)
-    set_target_properties(WEBOSHELPERS::WEBOSHELPERS PROPERTIES
-                                                     IMPORTED_LOCATION "${WEBOSHELPERS_LIBRARY}"
-                                                     INTERFACE_INCLUDE_DIRECTORIES "${WEBOSHELPERS_INCLUDE_DIR}")
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP WEBOSHELPERS::WEBOSHELPERS)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${WEBOSHELPERS_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${WEBOSHELPERS_INCLUDE_DIR}")
+  else()
+    if(WebOSHelpers_FIND_REQUIRED)
+      message(FATAL_ERROR "WebOSHelpers libraries were not found.")
+    endif()
   endif()
 endif()

From d1c03133230235f54fdd6a8ea878a8d2ec93ae84 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:44:47 +1000
Subject: [PATCH 35/76] [cmake][modules] FindX cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindX.cmake              | 37 +++++++++++---------------
 cmake/scripts/linux/ExtraTargets.cmake |  4 +--
 cmake/scripts/linux/Install.cmake      |  4 +--
 3 files changed, 20 insertions(+), 25 deletions(-)

diff --git a/cmake/modules/FindX.cmake b/cmake/modules/FindX.cmake
index 0dd69405f48b0..cec47008378d9 100644
--- a/cmake/modules/FindX.cmake
+++ b/cmake/modules/FindX.cmake
@@ -5,24 +5,21 @@
 #
 # This will define the following targets:
 #
-#   X::X    - The X11 library
-#   X::Xext - The X11 extension library
+#   ${APP_NAME_LC}::X    - The X11 library
+#   ${APP_NAME_LC}::Xext - The X11 extension library
 
-if(NOT TARGET X::X)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_X x11 xext QUIET)
   endif()
 
   find_path(X_INCLUDE_DIR NAMES X11/Xlib.h
-                          HINTS ${PC_X_x11_INCLUDEDIR}
-                          NO_CACHE)
+                          HINTS ${PC_X_x11_INCLUDEDIR})
   find_library(X_LIBRARY NAMES X11
-                         HINTS ${PC_X_x11_LIBDIR}
-                         NO_CACHE)
+                         HINTS ${PC_X_x11_LIBDIR})
   find_library(X_EXT_LIBRARY NAMES Xext
-                             HINTS ${PC_X_xext_LIBDIR}
-                             NO_CACHE)
+                             HINTS ${PC_X_xext_LIBDIR})
 
   set(X_VERSION ${PC_X_x11_VERSION})
 
@@ -32,17 +29,15 @@ if(NOT TARGET X::X)
                                     VERSION_VAR X_VERSION)
 
   if(X_FOUND)
-    add_library(X::Xext UNKNOWN IMPORTED)
-    set_target_properties(X::Xext PROPERTIES
-                                  IMPORTED_LOCATION "${X_EXT_LIBRARY}"
-                                  INTERFACE_INCLUDE_DIRECTORIES "${X_INCLUDE_DIR}")
-    add_library(X::X UNKNOWN IMPORTED)
-    set_target_properties(X::X PROPERTIES
-                               IMPORTED_LOCATION "${X_LIBRARY}"
-                               INTERFACE_INCLUDE_DIRECTORIES "${X_INCLUDE_DIR}"
-                               INTERFACE_COMPILE_DEFINITIONS HAVE_X11=1
-                               INTERFACE_LINK_LIBRARIES X::Xext)
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP X::X)
+    add_library(${APP_NAME_LC}::Xext UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::Xext PROPERTIES
+                                               IMPORTED_LOCATION "${X_EXT_LIBRARY}"
+                                               INTERFACE_INCLUDE_DIRECTORIES "${X_INCLUDE_DIR}")
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${X_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${X_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_X11
+                                                                     INTERFACE_LINK_LIBRARIES ${APP_NAME_LC}::Xext)
   endif()
 endif()
diff --git a/cmake/scripts/linux/ExtraTargets.cmake b/cmake/scripts/linux/ExtraTargets.cmake
index d3b3f1807c657..947c89301bc15 100644
--- a/cmake/scripts/linux/ExtraTargets.cmake
+++ b/cmake/scripts/linux/ExtraTargets.cmake
@@ -1,9 +1,9 @@
 # xrandr
-if(TARGET X::X AND TARGET XRandR::XRandR)
+if(TARGET ${APP_NAME_LC}::X AND TARGET XRandR::XRandR)
   find_package(X QUIET)
   find_package(XRandR QUIET)
   add_executable(${APP_NAME_LC}-xrandr ${CMAKE_SOURCE_DIR}/xbmc-xrandr.c)
-  target_link_libraries(${APP_NAME_LC}-xrandr ${SYSTEM_LDFLAGS} X::X m XRandR::XRandR)
+  target_link_libraries(${APP_NAME_LC}-xrandr ${SYSTEM_LDFLAGS} ${APP_NAME_LC}::X m XRandR::XRandR)
 endif()
 
 # WiiRemote
diff --git a/cmake/scripts/linux/Install.cmake b/cmake/scripts/linux/Install.cmake
index efe7674b74a5a..c23983c68bb07 100644
--- a/cmake/scripts/linux/Install.cmake
+++ b/cmake/scripts/linux/Install.cmake
@@ -1,4 +1,4 @@
-if(X_FOUND)
+if(TARGET ${APP_NAME_LC}::X)
   set(USE_X11 1)
 else()
   set(USE_X11 0)
@@ -49,7 +49,7 @@ configure_file(${CMAKE_SOURCE_DIR}/tools/Linux/kodi.metainfo.xml.in
 install(TARGETS ${APP_NAME_LC}
         DESTINATION ${libdir}/${APP_NAME_LC}
         COMPONENT kodi-bin)
-if(TARGET X::X AND TARGET XRandR::XRandR)
+if(TARGET ${APP_NAME_LC}::X AND TARGET XRandR::XRandR)
   install(TARGETS ${APP_NAME_LC}-xrandr
           DESTINATION ${libdir}/${APP_NAME_LC}
           COMPONENT kodi-bin)

From 06494f5985758cd1da4670f0446177b6e13a6fed Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:46:13 +1000
Subject: [PATCH 36/76] [cmake][modules] FindXkbcommon cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindXkbcommon.cmake | 19 ++++++++-----------
 1 file changed, 8 insertions(+), 11 deletions(-)

diff --git a/cmake/modules/FindXkbcommon.cmake b/cmake/modules/FindXkbcommon.cmake
index 51916f36b62a4..5fbda7a1e85ee 100644
--- a/cmake/modules/FindXkbcommon.cmake
+++ b/cmake/modules/FindXkbcommon.cmake
@@ -4,20 +4,18 @@
 #
 # This will define the following target:
 #
-#   XKBCOMMON::XKBCOMMON   - The libxkbcommon library
+#   ${APP_NAME_LC}::Xkbcommon   - The libxkbcommon library
 
-if(NOT TARGET XKBCOMMON::XKBCOMMON)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
   if(PKG_CONFIG_FOUND)
     pkg_check_modules(PC_XKBCOMMON xkbcommon QUIET)
   endif()
 
   find_path(XKBCOMMON_INCLUDE_DIR NAMES xkbcommon/xkbcommon.h
-                                  HINTS ${PC_XKBCOMMON_INCLUDEDIR}
-                                  NO_CACHE)
+                                  HINTS ${PC_XKBCOMMON_INCLUDEDIR})
   find_library(XKBCOMMON_LIBRARY NAMES xkbcommon
-                                 HINTS ${PC_XKBCOMMON_LIBDIR}
-                                 NO_CACHE)
+                                 HINTS ${PC_XKBCOMMON_LIBDIR})
 
   set(XKBCOMMON_VERSION ${PC_XKBCOMMON_VERSION})
 
@@ -27,10 +25,9 @@ if(NOT TARGET XKBCOMMON::XKBCOMMON)
                                     VERSION_VAR XKBCOMMON_VERSION)
 
   if(XKBCOMMON_FOUND)
-    add_library(XKBCOMMON::XKBCOMMON UNKNOWN IMPORTED)
-    set_target_properties(XKBCOMMON::XKBCOMMON PROPERTIES
-                                               IMPORTED_LOCATION "${XKBCOMMON_LIBRARY}"
-                                               INTERFACE_INCLUDE_DIRECTORIES "${XKBCOMMON_INCLUDE_DIR}")
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP XKBCOMMON::XKBCOMMON)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${XKBCOMMON_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${XKBCOMMON_INCLUDE_DIR}")
   endif()
 endif()

From 8ea038bbf41d4d5c62f76010a89816c1b81412f5 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:50:50 +1000
Subject: [PATCH 37/76] [cmake][modules] FindXRandR cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindXRandR.cmake         | 23 +++++++++--------------
 cmake/scripts/linux/ExtraTargets.cmake |  4 ++--
 cmake/scripts/linux/Install.cmake      |  2 +-
 3 files changed, 12 insertions(+), 17 deletions(-)

diff --git a/cmake/modules/FindXRandR.cmake b/cmake/modules/FindXRandR.cmake
index f0ad366d90038..c09f2bd3c10c8 100644
--- a/cmake/modules/FindXRandR.cmake
+++ b/cmake/modules/FindXRandR.cmake
@@ -5,10 +5,9 @@
 #
 # This will define the following target:
 #
-#   XRandR::XRandR   - The XRANDR library
-
-if(NOT TARGET XRandR::XRandR)
+#   ${APP_NAME_LC}::XRandR   - The XRANDR library
 
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
   find_package(PkgConfig)
 
   if(PKG_CONFIG_FOUND)
@@ -16,11 +15,9 @@ if(NOT TARGET XRandR::XRandR)
   endif()
 
   find_path(XRANDR_INCLUDE_DIR NAMES X11/extensions/Xrandr.h
-                               HINTS ${PC_XRANDR_INCLUDEDIR}
-                               NO_CACHE)
+                               HINTS ${PC_XRANDR_INCLUDEDIR})
   find_library(XRANDR_LIBRARY NAMES Xrandr
-                              HINTS ${PC_XRANDR_LIBDIR}
-                              NO_CACHE)
+                              HINTS ${PC_XRANDR_LIBDIR})
 
   set(XRANDR_VERSION ${PC_XRANDR_VERSION})
 
@@ -30,12 +27,10 @@ if(NOT TARGET XRandR::XRandR)
                                     VERSION_VAR XRANDR_VERSION)
 
   if(XRANDR_FOUND)
-    add_library(XRandR::XRandR UNKNOWN IMPORTED)
-    set_target_properties(XRandR::XRandR PROPERTIES
-                                         IMPORTED_LOCATION "${XRANDR_LIBRARY}"
-                                         INTERFACE_INCLUDE_DIRECTORIES "${XRANDR_INCLUDE_DIR}"
-                                         INTERFACE_COMPILE_DEFINITIONS HAVE_LIBXRANDR=1)
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP XRandR::XRandR)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${XRANDR_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${XRANDR_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_LIBXRANDR)
   endif()
 endif()
diff --git a/cmake/scripts/linux/ExtraTargets.cmake b/cmake/scripts/linux/ExtraTargets.cmake
index 947c89301bc15..c6ad66b18ea26 100644
--- a/cmake/scripts/linux/ExtraTargets.cmake
+++ b/cmake/scripts/linux/ExtraTargets.cmake
@@ -1,9 +1,9 @@
 # xrandr
-if(TARGET ${APP_NAME_LC}::X AND TARGET XRandR::XRandR)
+if(TARGET ${APP_NAME_LC}::X AND TARGET ${APP_NAME_LC}::XRandR)
   find_package(X QUIET)
   find_package(XRandR QUIET)
   add_executable(${APP_NAME_LC}-xrandr ${CMAKE_SOURCE_DIR}/xbmc-xrandr.c)
-  target_link_libraries(${APP_NAME_LC}-xrandr ${SYSTEM_LDFLAGS} ${APP_NAME_LC}::X m XRandR::XRandR)
+  target_link_libraries(${APP_NAME_LC}-xrandr ${SYSTEM_LDFLAGS} ${APP_NAME_LC}::X m ${APP_NAME_LC}::XRandR)
 endif()
 
 # WiiRemote
diff --git a/cmake/scripts/linux/Install.cmake b/cmake/scripts/linux/Install.cmake
index c23983c68bb07..fba3211bc7e60 100644
--- a/cmake/scripts/linux/Install.cmake
+++ b/cmake/scripts/linux/Install.cmake
@@ -49,7 +49,7 @@ configure_file(${CMAKE_SOURCE_DIR}/tools/Linux/kodi.metainfo.xml.in
 install(TARGETS ${APP_NAME_LC}
         DESTINATION ${libdir}/${APP_NAME_LC}
         COMPONENT kodi-bin)
-if(TARGET ${APP_NAME_LC}::X AND TARGET XRandR::XRandR)
+if(TARGET ${APP_NAME_LC}::X AND TARGET ${APP_NAME_LC}::XRandR)
   install(TARGETS ${APP_NAME_LC}-xrandr
           DESTINATION ${libdir}/${APP_NAME_LC}
           COMPONENT kodi-bin)

From bee2d8a67c533eb897a94f5044331622daea13e0 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 15:52:57 +1000
Subject: [PATCH 38/76] [cmake][modules] FindXSLT cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindXSLT.cmake | 27 ++++++++++++++-------------
 xbmc/utils/CMakeLists.txt    |  2 +-
 2 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/cmake/modules/FindXSLT.cmake b/cmake/modules/FindXSLT.cmake
index 34ef75e14cd22..1c24ab35cf73f 100644
--- a/cmake/modules/FindXSLT.cmake
+++ b/cmake/modules/FindXSLT.cmake
@@ -5,21 +5,23 @@
 #
 # This will define the following target:
 #
-#   XSLT::XSLT - The XSLT library
+#   ${APP_NAME_LC}::XSLT - The XSLT library
 
-if(NOT TARGET XSLT::XSLT)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   find_package(LibXml2 REQUIRED)
   find_package(PkgConfig)
 
-  if(PKG_CONFIG_FOUND)
+  if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
     pkg_check_modules(PC_XSLT libxslt QUIET)
   endif()
 
   find_path(XSLT_INCLUDE_DIR NAMES libxslt/xslt.h
-                             HINTS ${PC_XSLT_INCLUDEDIR})
+                             HINTS ${DEPENDS_PATH}/include ${PC_XSLT_INCLUDEDIR}
+                             ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
   find_library(XSLT_LIBRARY NAMES xslt libxslt
-                            HINTS ${PC_XSLT_LIBDIR})
+                            HINTS ${DEPENDS_PATH}/lib ${PC_XSLT_LIBDIR}
+                            ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
   set(XSLT_VERSION ${PC_XSLT_VERSION})
 
@@ -29,13 +31,12 @@ if(NOT TARGET XSLT::XSLT)
                                     VERSION_VAR XSLT_VERSION)
 
   if(XSLT_FOUND)
-    add_library(XSLT::XSLT UNKNOWN IMPORTED)
-    set_target_properties(XSLT::XSLT PROPERTIES
-                                     IMPORTED_LOCATION "${XSLT_LIBRARY}"
-                                     INTERFACE_INCLUDE_DIRECTORIES "${XSLT_INCLUDE_DIR}"
-                                     INTERFACE_COMPILE_DEFINITIONS HAVE_LIBXSLT=1)
-
-    target_link_libraries(XSLT::XSLT INTERFACE LibXml2::LibXml2)
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP XSLT::XSLT)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${XSLT_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${XSLT_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_LIBXSLT)
+
+    target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE LibXml2::LibXml2)
   endif()
 endif()
diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index e0f70aa08b2e8..8fcad352af667 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -183,7 +183,7 @@ set(HEADERS ActorProtocol.h
             XMLUtils.h
             XTimeUtils.h)
 
-if(TARGET XSLT::XSLT)
+if(TARGET ${APP_NAME_LC}::XSLT)
   list(APPEND SOURCES XSLTUtils.cpp)
   list(APPEND HEADERS XSLTUtils.h)
 endif()

From ab3b3335041ea7a59a150d948da3a0ef9ef4b74e Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 17:20:43 +1000
Subject: [PATCH 39/76] [cmake][modules] FindGLU update to target usage

---
 cmake/modules/FindGLU.cmake            | 46 +++++++++++++-------------
 cmake/scripts/linux/ExtraTargets.cmake |  2 +-
 2 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/cmake/modules/FindGLU.cmake b/cmake/modules/FindGLU.cmake
index 5d232970e0ff0..900f30baeb939 100644
--- a/cmake/modules/FindGLU.cmake
+++ b/cmake/modules/FindGLU.cmake
@@ -3,33 +3,33 @@
 # -----
 # Finds the GLU library
 #
-# This will define the following variables::
-#
-# GLU_FOUND - system has GLU
-# GLU_INCLUDE_DIRS - the GLU include directory
-# GLU_LIBRARIES - the GLU libraries
-# GLU_DEFINITIONS - the GLU definitions
+# This will define the following target:
 #
+#   ${APP_NAME_LC}::GLU   - The GLU library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_GLU glu QUIET)
-endif()
+  find_package(PkgConfig)
 
-find_path(GLU_INCLUDE_DIR NAMES GL/glu.h
-                          HINTS ${PC_GLU_INCLUDEDIR})
-find_library(GLU_LIBRARY NAMES GLU
-                         HINTS ${PC_GLU_LIBDIR})
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_GLU glu QUIET)
+  endif()
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(GLU
-                                  REQUIRED_VARS GLU_LIBRARY GLU_INCLUDE_DIR)
+  find_path(GLU_INCLUDE_DIR NAMES GL/glu.h
+                            HINTS ${PC_GLU_INCLUDEDIR})
+  find_library(GLU_LIBRARY NAMES GLU
+                           HINTS ${PC_GLU_LIBDIR})
 
-if(GLU_FOUND)
-  set(GLU_LIBRARIES ${GLU_LIBRARY})
-  set(GLU_INCLUDE_DIRS ${GLU_INCLUDE_DIR})
-  set(GLU_DEFINITIONS -DHAS_GLU=1)
-endif()
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(GLU
+                                    REQUIRED_VARS GLU_LIBRARY GLU_INCLUDE_DIR)
 
-mark_as_advanced(GLU_INCLUDE_DIR GLU_LIBRARY)
+  if(GLU_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${GLU_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${GLU_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_GLU)
+  endif()
+
+endif()
diff --git a/cmake/scripts/linux/ExtraTargets.cmake b/cmake/scripts/linux/ExtraTargets.cmake
index c6ad66b18ea26..15756a9b23b30 100644
--- a/cmake/scripts/linux/ExtraTargets.cmake
+++ b/cmake/scripts/linux/ExtraTargets.cmake
@@ -10,7 +10,7 @@ endif()
 if(ENABLE_EVENTCLIENTS AND TARGET ${APP_NAME_LC}::Bluetooth)
   find_package(CWiid QUIET)
   find_package(GLU QUIET)
-  if(CWIID_FOUND AND GLU_FOUND)
+  if(CWIID_FOUND AND TARGET ${APP_NAME_LC}::GLU)
     add_subdirectory(${CMAKE_SOURCE_DIR}/tools/EventClients/Clients/WiiRemote build/WiiRemote)
   endif()
 endif()

From 2311a905ce153af833abb3d2508f7ec084dfa4c5 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 17:21:07 +1000
Subject: [PATCH 40/76] [cmake][modules] FindGLU remove unused
 COMPILE_DEFINITION

---
 cmake/modules/FindGLU.cmake | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/cmake/modules/FindGLU.cmake b/cmake/modules/FindGLU.cmake
index 900f30baeb939..68ec1eb2eb77a 100644
--- a/cmake/modules/FindGLU.cmake
+++ b/cmake/modules/FindGLU.cmake
@@ -28,8 +28,7 @@ if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
     add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
     set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
                                                                      IMPORTED_LOCATION "${GLU_LIBRARY}"
-                                                                     INTERFACE_INCLUDE_DIRECTORIES "${GLU_INCLUDE_DIR}"
-                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_GLU)
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${GLU_INCLUDE_DIR}")
   endif()
 
 endif()

From bd00b7bd1fdd1760f4570c282a40aee9fe5ee1e2 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 17:24:13 +1000
Subject: [PATCH 41/76] [cmake][modules] FindGLX update to target usage

---
 cmake/modules/FindGLX.cmake       | 51 ++++++++++++++-----------------
 xbmc/windowing/X11/CMakeLists.txt |  2 +-
 2 files changed, 24 insertions(+), 29 deletions(-)

diff --git a/cmake/modules/FindGLX.cmake b/cmake/modules/FindGLX.cmake
index 25c650e7048a8..67e19f4ebaa64 100644
--- a/cmake/modules/FindGLX.cmake
+++ b/cmake/modules/FindGLX.cmake
@@ -3,39 +3,34 @@
 # -----
 # Finds the GLX library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# GLX_FOUND - system has GLX
-# GLX_INCLUDE_DIRS - the GLX include directory
-# GLX_LIBRARIES - the GLX libraries
-# GLX_DEFINITIONS - the GLX definitions
-#
-# and the following imported targets::
-#
-#   GLX::GLX    - The GLX library
+#   ${APP_NAME_LC}::GLX    - The GLX library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_GLX glx QUIET)
-endif()
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_GLX glx QUIET)
+  endif()
 
-find_path(GLX_INCLUDE_DIR NAMES GL/glx.h
-                          HINTS ${PC_GLX_INCLUDEDIR})
-find_library(GLX_LIBRARY NAMES GL
-                         HINTS ${PC_GLX_LIBDIR})
+  find_path(GLX_INCLUDE_DIR NAMES GL/glx.h
+                            HINTS ${PC_GLX_INCLUDEDIR})
+  find_library(GLX_LIBRARY NAMES GL
+                           HINTS ${PC_GLX_LIBDIR})
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(GLX
-                                  REQUIRED_VARS GLX_LIBRARY GLX_INCLUDE_DIR)
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(GLX
+                                    REQUIRED_VARS GLX_LIBRARY GLX_INCLUDE_DIR)
 
-if(GLX_FOUND)
-  list(APPEND GL_INTERFACES_LIST glx)
-  set(GL_INTERFACES_LIST ${GL_INTERFACES_LIST} PARENT_SCOPE)
+  if(GLX_FOUND)
+    list(APPEND GL_INTERFACES_LIST glx)
+    set(GL_INTERFACES_LIST ${GL_INTERFACES_LIST} PARENT_SCOPE)
 
-  set(GLX_LIBRARIES ${GLX_LIBRARY})
-  set(GLX_INCLUDE_DIRS ${GLX_INCLUDE_DIR})
-  set(GLX_DEFINITIONS -DHAS_GLX=1)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${GLX_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${GLX_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_GLX)
+  endif()
 endif()
-
-mark_as_advanced(GLX_INCLUDE_DIR GLX_LIBRARY)
diff --git a/xbmc/windowing/X11/CMakeLists.txt b/xbmc/windowing/X11/CMakeLists.txt
index b96ff8271aa54..b7d35d9bb5fa5 100644
--- a/xbmc/windowing/X11/CMakeLists.txt
+++ b/xbmc/windowing/X11/CMakeLists.txt
@@ -16,7 +16,7 @@ set(HEADERS GLContext.h
             XRandR.h
             X11DPMSSupport.h)
 
-if(GLX_FOUND)
+if(TARGET ${APP_NAME_LC}::GLX)
   list(APPEND SOURCES GLContextGLX.cpp
                       VideoSyncGLX.cpp)
   list(APPEND HEADERS GLContextGLX.h

From ad0516b526f95e7bc87f3ce4bf43be8eddf1b736 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 17:42:09 +1000
Subject: [PATCH 42/76] [cmake][modules] FindAtomic update to target usage

---
 cmake/modules/FindAtomic.cmake | 75 +++++++++++++++-------------------
 1 file changed, 33 insertions(+), 42 deletions(-)

diff --git a/cmake/modules/FindAtomic.cmake b/cmake/modules/FindAtomic.cmake
index 8ea3c815d74b1..91e0b39c13a8f 100644
--- a/cmake/modules/FindAtomic.cmake
+++ b/cmake/modules/FindAtomic.cmake
@@ -3,54 +3,45 @@
 # -----
 # Finds the ATOMIC library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# ATOMIC_FOUND - system has ATOMIC
-# ATOMIC_LIBRARIES - the ATOMIC libraries
-#
-# and the following imported targets::
-#
-#   ATOMIC::ATOMIC    - The ATOMIC library
-
+#   ${APP_NAME_LC}::ATOMIC    - The ATOMIC library
 
-include(CheckCXXSourceCompiles)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  include(CheckCXXSourceCompiles)
+  include(FindPackageMessage)
 
-set(atomic_code
-    "
-     #include <atomic>
-     #include <cstdint>
-     std::atomic<uint8_t> n8 (0); // riscv64
-     std::atomic<uint64_t> n64 (0); // armel, mipsel, powerpc
-     int main() {
-       ++n8;
-       ++n64;
-       return 0;
-     }")
+  set(atomic_code
+      "
+       #include <atomic>
+       #include <cstdint>
+       std::atomic<uint8_t> n8 (0); // riscv64
+       std::atomic<uint64_t> n64 (0); // armel, mipsel, powerpc
+       int main() {
+         ++n8;
+         ++n64;
+         return 0;
+       }")
 
-check_cxx_source_compiles("${atomic_code}" ATOMIC_LOCK_FREE_INSTRUCTIONS)
+  check_cxx_source_compiles("${atomic_code}" ATOMIC_LOCK_FREE_INSTRUCTIONS)
 
-if(ATOMIC_LOCK_FREE_INSTRUCTIONS)
-  set(ATOMIC_FOUND TRUE)
-  set(ATOMIC_LIBRARIES)
-else()
-  set(CMAKE_REQUIRED_LIBRARIES "-latomic")
-  check_cxx_source_compiles("${atomic_code}" ATOMIC_IN_LIBRARY)
-  set(CMAKE_REQUIRED_LIBRARIES)
-  if(ATOMIC_IN_LIBRARY)
-    set(ATOMIC_LIBRARY atomic)
-    include(FindPackageHandleStandardArgs)
-    find_package_handle_standard_args(Atomic DEFAULT_MSG ATOMIC_LIBRARY)
-    set(ATOMIC_LIBRARIES ${ATOMIC_LIBRARY})
-    if(NOT TARGET ATOMIC::ATOMIC)
-      add_library(ATOMIC::ATOMIC UNKNOWN IMPORTED)
-      set_target_properties(ATOMIC::ATOMIC PROPERTIES
-	      IMPORTED_LOCATION "${ATOMIC_LIBRARY}")
-    endif()
-    unset(ATOMIC_LIBRARY)
+  if(ATOMIC_LOCK_FREE_INSTRUCTIONS)
+    find_package_message(Atomic "Found Atomic: Lock Free" "")
   else()
-    if(Atomic_FIND_REQUIRED)
-      message(FATAL_ERROR "Neither lock free instructions nor -latomic found.")
+    set(CMAKE_REQUIRED_LIBRARIES "-latomic")
+    check_cxx_source_compiles("${atomic_code}" ATOMIC_IN_LIBRARY)
+    set(CMAKE_REQUIRED_LIBRARIES)
+    if(ATOMIC_IN_LIBRARY)
+      find_package_message(Atomic "Found Atomic library: -latomic" "")
+
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION "-latomic")
+    else()
+      if(Atomic_FIND_REQUIRED)
+        message(FATAL_ERROR "Neither lock free instructions nor -latomic found.")
+      endif()
     endif()
   endif()
+  unset(atomic_code)
 endif()
-unset(atomic_code)

From 168ba895e3163f8187d58795d55713e70cf7ea7e Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 18:22:01 +1000
Subject: [PATCH 43/76] [cmake][modules] FindCdio update to target usage

---
 cmake/modules/FindCdio.cmake | 86 +++++++++++++++++++++---------------
 1 file changed, 50 insertions(+), 36 deletions(-)

diff --git a/cmake/modules/FindCdio.cmake b/cmake/modules/FindCdio.cmake
index 16a7aef9c613f..5f8b33c8d14b0 100644
--- a/cmake/modules/FindCdio.cmake
+++ b/cmake/modules/FindCdio.cmake
@@ -3,42 +3,56 @@
 # --------
 # Finds the cdio library
 #
-# This will define the following variables::
+# This will define the following target:
+#
+# ${APP_NAME_LC}::Cdio - The LibCap library
 #
-# CDIO_FOUND - system has cdio
-# CDIO_INCLUDE_DIRS - the cdio include directory
-# CDIO_LIBRARIES - the cdio libraries
-
-find_package(PkgConfig)
-
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_CDIO libcdio>=0.80 QUIET)
-  pkg_check_modules(PC_CDIOPP libcdio++>=2.1.0 QUIET)
-endif()
-
-find_path(CDIO_INCLUDE_DIR NAMES cdio/cdio.h
-                           HINTS ${PC_CDIO_INCLUDEDIR})
-
-find_library(CDIO_LIBRARY NAMES cdio libcdio
-                          HINTS ${PC_CDIO_LIBDIR})
-
-if(DEFINED PC_CDIO_VERSION AND DEFINED PC_CDIOPP_VERSION AND NOT "${PC_CDIO_VERSION}" VERSION_EQUAL "${PC_CDIOPP_VERSION}")
-  message(WARNING "Detected libcdio (${PC_CDIO_VERSION}) and libcdio++ (${PC_CDIOPP_VERSION}) version mismatch. libcdio++ will not be used.")
-else()
-  find_path(CDIOPP_INCLUDE_DIR NAMES cdio++/cdio.hpp
-                               HINTS ${PC_CDIOPP_INCLUDEDIR} ${CDIO_INCLUDE_DIR})
-
-  set(CDIO_VERSION ${PC_CDIO_VERSION})
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Cdio
-                                  REQUIRED_VARS CDIO_LIBRARY CDIO_INCLUDE_DIR
-                                  VERSION_VAR CDIO_VERSION)
 
-if(CDIO_FOUND)
-  set(CDIO_LIBRARIES ${CDIO_LIBRARY})
-  set(CDIO_INCLUDE_DIRS ${CDIO_INCLUDE_DIR})
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
+
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_CDIO libcdio>=0.80 QUIET)
+    pkg_check_modules(PC_CDIOPP libcdio++>=2.1.0 QUIET)
+  endif()
+
+  find_path(CDIO_INCLUDE_DIR NAMES cdio/cdio.h
+                             HINTS ${PC_CDIO_INCLUDEDIR})
+
+  find_library(CDIO_LIBRARY NAMES cdio libcdio
+                            HINTS ${PC_CDIO_LIBDIR})
+
+  if(DEFINED PC_CDIO_VERSION AND DEFINED PC_CDIOPP_VERSION AND NOT "${PC_CDIO_VERSION}" VERSION_EQUAL "${PC_CDIOPP_VERSION}")
+    message(WARNING "Detected libcdio (${PC_CDIO_VERSION}) and libcdio++ (${PC_CDIOPP_VERSION}) version mismatch. libcdio++ will not be used.")
+  else()
+    find_path(CDIOPP_INCLUDE_DIR NAMES cdio++/cdio.hpp
+                                 HINTS ${PC_CDIOPP_INCLUDEDIR} ${CDIO_INCLUDE_DIR})
+
+    set(CDIO_VERSION ${PC_CDIO_VERSION})
+  endif()
+
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(Cdio
+                                    REQUIRED_VARS CDIO_LIBRARY CDIO_INCLUDE_DIR
+                                    VERSION_VAR CDIO_VERSION)
+
+  if(CDIO_FOUND)
+
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${CDIO_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${CDIO_INCLUDE_DIR}")
+
+    if(CDIOPP_INCLUDE_DIR)
+      add_library(${APP_NAME_LC}::CdioPP INTERFACE IMPORTED)
+      set_target_properties(${APP_NAME_LC}::CdioPP PROPERTIES
+                                                   INTERFACE_INCLUDE_DIRECTORIES "${CDIOPP_INCLUDE_DIR}")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            INTERFACE_LINK_LIBRARIES "${APP_NAME_LC}::CdioPP")
+    endif()
+  else()
+    if(Cdio_FIND_REQUIRED)
+      message(FATAL_ERROR "cdio library not found.")
+    endif()
+  endif()
 endif()
-
-mark_as_advanced(CDIO_INCLUDE_DIR CDIOPP_INCLUDE_DIR CDIO_LIBRARY)

From dae5361332f48ad9e4ab5c558f7088fd17845880 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 18:35:03 +1000
Subject: [PATCH 44/76] [cmake][modules] FindCWiid update to target usage

---
 cmake/modules/FindCWiid.cmake                 | 50 ++++++++-----------
 cmake/scripts/linux/ExtraTargets.cmake        |  2 +-
 cmake/scripts/linux/Install.cmake             |  2 +-
 .../Clients/WiiRemote/CMakeLists.txt          |  4 +-
 4 files changed, 24 insertions(+), 34 deletions(-)

diff --git a/cmake/modules/FindCWiid.cmake b/cmake/modules/FindCWiid.cmake
index e1cb02260c5ab..db8a67ed82d05 100644
--- a/cmake/modules/FindCWiid.cmake
+++ b/cmake/modules/FindCWiid.cmake
@@ -3,42 +3,32 @@
 # ---------
 # Finds the CWiid library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# CWIID_FOUND - system has CWiid
-# CWIID_INCLUDE_DIRS - the CWiid include directory
-# CWIID_LIBRARIES - the CWiid libraries
-#
-# and the following imported targets::
-#
-#   CWiid::CWiid   - The CWiid library
+#   ${APP_NAME_LC}::CWiid   - The CWiid library
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_CWIID cwiid QUIET)
-endif()
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_CWIID cwiid QUIET)
+  endif()
 
-find_path(CWIID_INCLUDE_DIR NAMES cwiid.h
-                            PATHS ${PC_CWIID_INCLUDEDIR})
-find_library(CWIID_LIBRARY NAMES cwiid
-                           PATHS ${PC_CWIID_LIBDIR})
+  find_path(CWIID_INCLUDE_DIR NAMES cwiid.h
+                              PATHS ${PC_CWIID_INCLUDEDIR})
+  find_library(CWIID_LIBRARY NAMES cwiid
+                             PATHS ${PC_CWIID_LIBDIR})
 
-set(CWIID_VERSION ${PC_CWIID_VERSION})
+  set(CWIID_VERSION ${PC_CWIID_VERSION})
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(CWiid
-                                  REQUIRED_VARS CWIID_LIBRARY CWIID_INCLUDE_DIR
-                                  VERSION_VAR CWIID_VERSION)
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(CWiid
+                                    REQUIRED_VARS CWIID_LIBRARY CWIID_INCLUDE_DIR
+                                    VERSION_VAR CWIID_VERSION)
 
-if(CWIID_FOUND)
-  set(CWIID_INCLUDE_DIRS ${CWIID_INCLUDE_DIR})
-  set(CWIID_LIBRARIES ${CWIID_LIBRARY})
+  if(CWIID_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${CWIID_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${CWIID_INCLUDE_DIR}")
 
-  if(NOT TARGET CWiid::CWiid)
-    add_library(CWiid::CWiid UNKNOWN IMPORTED)
-    set_target_properties(CWiid::CWiid PROPERTIES
-                                       IMPORTED_LOCATION "${CWIID_LIBRARY}"
-                                       INTERFACE_INCLUDE_DIRECTORIES "${CWIID_INCLUDE_DIR}")
   endif()
 endif()
-
-mark_as_advanced(CWIID_INCLUDE_DIR CWIID_LIBRARY)
diff --git a/cmake/scripts/linux/ExtraTargets.cmake b/cmake/scripts/linux/ExtraTargets.cmake
index 15756a9b23b30..f402f7c491126 100644
--- a/cmake/scripts/linux/ExtraTargets.cmake
+++ b/cmake/scripts/linux/ExtraTargets.cmake
@@ -10,7 +10,7 @@ endif()
 if(ENABLE_EVENTCLIENTS AND TARGET ${APP_NAME_LC}::Bluetooth)
   find_package(CWiid QUIET)
   find_package(GLU QUIET)
-  if(CWIID_FOUND AND TARGET ${APP_NAME_LC}::GLU)
+  if(TARGET ${APP_NAME_LC}::CWiid AND TARGET ${APP_NAME_LC}::GLU)
     add_subdirectory(${CMAKE_SOURCE_DIR}/tools/EventClients/Clients/WiiRemote build/WiiRemote)
   endif()
 endif()
diff --git a/cmake/scripts/linux/Install.cmake b/cmake/scripts/linux/Install.cmake
index fba3211bc7e60..5b4216badb30c 100644
--- a/cmake/scripts/linux/Install.cmake
+++ b/cmake/scripts/linux/Install.cmake
@@ -275,7 +275,7 @@ if(ENABLE_EVENTCLIENTS)
           DESTINATION ${bindir}
           COMPONENT kodi-eventclients-ps3)
 
-  if(TARGET ${APP_NAME_LC}::Bluetooth AND CWIID_FOUND AND GLU_FOUND)
+  if(TARGET ${APP_NAME_LC}::Bluetooth AND ${APP_NAME_LC}::CWiid AND GLU_FOUND)
     # Install kodi-eventclients-wiiremote
     install(PROGRAMS ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/WiiRemote/${APP_NAME_LC}-wiiremote
             DESTINATION ${bindir}
diff --git a/tools/EventClients/Clients/WiiRemote/CMakeLists.txt b/tools/EventClients/Clients/WiiRemote/CMakeLists.txt
index 2a8e41cc913d2..f638b56c76acd 100644
--- a/tools/EventClients/Clients/WiiRemote/CMakeLists.txt
+++ b/tools/EventClients/Clients/WiiRemote/CMakeLists.txt
@@ -12,12 +12,12 @@ add_executable(${APP_NAME_LC}-wiiremote ${SOURCES} ${HEADERS})
 
 target_include_directories(${APP_NAME_LC}-wiiremote
                            PRIVATE $<TARGET_PROPERTY:${APP_NAME_LC}::Bluetooth,INTERFACE_INCLUDE_DIRECTORIES>
-                                   ${CWIID_INCLUDE_DIRS})
+                                   $<TARGET_PROPERTY:${APP_NAME_LC}::CWiid,INTERFACE_INCLUDE_DIRECTORIES>)
 
 target_link_libraries(${APP_NAME_LC}-wiiremote
                       PRIVATE ${SYSTEM_LDFLAGS}
                               ${APP_NAME_LC}::Bluetooth
-                              ${CWIID_LIBRARIES})
+                              ${APP_NAME_LC}::CWiid)
 
 target_compile_options(${APP_NAME_LC}-wiiremote PRIVATE ${ARCH_DEFINES})
 

From 42494f60e65c1ba63c77375cdc552f03ee5e0ed7 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 18:39:32 +1000
Subject: [PATCH 45/76] [cmake][modules] FindDav1d update to target usage

---
 cmake/modules/FindDav1d.cmake  | 23 ++++++++++-------------
 cmake/modules/FindFFMPEG.cmake |  6 +++---
 2 files changed, 13 insertions(+), 16 deletions(-)

diff --git a/cmake/modules/FindDav1d.cmake b/cmake/modules/FindDav1d.cmake
index 8bfd4153814cf..f87db06d0a073 100644
--- a/cmake/modules/FindDav1d.cmake
+++ b/cmake/modules/FindDav1d.cmake
@@ -5,10 +5,10 @@
 #
 # This will define the following target:
 #
-#   dav1d::dav1d   - The dav1d library
+#   ${APP_NAME_LC}::Dav1d   - The dav1d library
 
-if(NOT TARGET dav1d::dav1d)
-  if(ENABLE_INTERNAL_DAV1D)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  if(ENABLE_INTERNAL_DAV1D AND NOT (WIN32 OR WINDOWS_STORE))
     include(cmake/scripts/common/ModuleHelpers.cmake)
 
     set(MODULE_LC dav1d)
@@ -43,13 +43,11 @@ if(NOT TARGET dav1d::dav1d)
 
     find_library(DAV1D_LIBRARY NAMES dav1d libdav1d
                                HINTS ${DEPENDS_PATH}/lib ${PC_DAV1D_LIBDIR}
-                               ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                               NO_CACHE)
+                               ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
     find_path(DAV1D_INCLUDE_DIR NAMES dav1d/dav1d.h
                                 HINTS ${DEPENDS_PATH}/include ${PC_DAV1D_INCLUDEDIR}
-                                ${${CORE_PLATFORM_LC}_SEARCH_CONFIG}
-                                NO_CACHE)
+                                ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
     set(DAV1D_VERSION ${PC_DAV1D_VERSION})
   endif()
@@ -60,14 +58,13 @@ if(NOT TARGET dav1d::dav1d)
                                     VERSION_VAR DAV1D_VERSION)
 
   if(DAV1D_FOUND)
-    add_library(dav1d::dav1d UNKNOWN IMPORTED)
-    set_target_properties(dav1d::dav1d PROPERTIES
-                                             IMPORTED_LOCATION "${DAV1D_LIBRARY}"
-                                             INTERFACE_INCLUDE_DIRECTORIES "${DAV1D_INCLUDE_DIR}")
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP dav1d::dav1d)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${DAV1D_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${DAV1D_INCLUDE_DIR}")
 
     if(TARGET dav1d)
-      add_dependencies(dav1d::dav1d dav1d)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} dav1d)
     endif()
   endif()
 endif()
diff --git a/cmake/modules/FindFFMPEG.cmake b/cmake/modules/FindFFMPEG.cmake
index 76857b0ccab66..e04b52c97cbbc 100644
--- a/cmake/modules/FindFFMPEG.cmake
+++ b/cmake/modules/FindFFMPEG.cmake
@@ -32,7 +32,7 @@ macro(buildFFMPEG)
   # Check for dependencies - Must be done before SETUP_BUILD_VARS
   get_libversion_data("dav1d" "target")
   find_package(Dav1d ${LIB_DAV1D_VER} MODULE)
-  if(NOT TARGET dav1d::dav1d)
+  if(NOT TARGET ${APP_NAME_LC}::Dav1d)
     message(STATUS "dav1d not found, internal ffmpeg build will be missing AV1 support!")
   else()
     set(FFMPEG_OPTIONS -DENABLE_DAV1D=ON)
@@ -93,8 +93,8 @@ macro(buildFFMPEG)
 
   BUILD_DEP_TARGET()
 
-  if(TARGET dav1d::dav1d)
-    add_dependencies(ffmpeg dav1d::dav1d)
+  if(TARGET ${APP_NAME_LC}::Dav1d)
+    add_dependencies(ffmpeg ${APP_NAME_LC}::Dav1d)
   endif()
 
   find_program(BASH_COMMAND bash)

From 09b90f61906366bb5c5beb45b9b7b976cf085bb8 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 18:42:14 +1000
Subject: [PATCH 46/76] [cmake][modules] FindEpollShim update to target usage

---
 cmake/modules/FindEpollShim.cmake | 40 +++++++++++++++----------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/cmake/modules/FindEpollShim.cmake b/cmake/modules/FindEpollShim.cmake
index a4c705f9f2364..abd37884edd8e 100644
--- a/cmake/modules/FindEpollShim.cmake
+++ b/cmake/modules/FindEpollShim.cmake
@@ -2,30 +2,30 @@
 # -------------
 # Finds the epoll-shim library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# EPOLLSHIM_FOUND       - the system has epoll-shim
-# EPOLLSHIM_INCLUDE_DIR - the epoll-shim include directory
-# EPOLLSHIM_LIBRARY     - the epoll-shim library
+#   ${APP_NAME_LC}::EpollShim   - The epoll-shim library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_EPOLLSHIM epoll-shim QUIET)
-endif()
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_EPOLLSHIM epoll-shim QUIET)
+  endif()
 
-find_path(EPOLLSHIM_INCLUDE_DIR NAMES sys/epoll.h
-                                HINTS ${PC_EPOLLSHIM_INCLUDE_DIRS})
-find_library(EPOLLSHIM_LIBRARY NAMES epoll-shim
-                               HINTS ${PC_EPOLLSHIM_LIBDIR})
+  find_path(EPOLLSHIM_INCLUDE_DIR NAMES sys/epoll.h
+                                  HINTS ${PC_EPOLLSHIM_INCLUDE_DIRS})
+  find_library(EPOLLSHIM_LIBRARY NAMES epoll-shim
+                                 HINTS ${PC_EPOLLSHIM_LIBDIR})
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(EpollShim
-                                  REQUIRED_VARS EPOLLSHIM_LIBRARY EPOLLSHIM_INCLUDE_DIR)
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(EpollShim
+                                    REQUIRED_VARS EPOLLSHIM_LIBRARY EPOLLSHIM_INCLUDE_DIR)
 
-if(EPOLLSHIM_FOUND)
-  set(EPOLLSHIM_INCLUDE_DIRS ${EPOLLSHIM_INCLUDE_DIR})
-  set(EPOLLSHIM_LIBRARIES ${EPOLLSHIM_LIBRARY})
+  if(EPOLLSHIM_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${EPOLLSHIM_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${EPOLLSHIM_INCLUDE_DIR}")
+  endif()
 endif()
-
-mark_as_advanced(EPOLLSHIM_INCLUDE_DIR EPOLLSHIM_LIBRARY)

From a5dbedb03c97472019a89b526da11dcdd53c645f Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 19:07:13 +1000
Subject: [PATCH 47/76] [cmake][modules] FindFriBidi update target usage

---
 cmake/modules/FindFriBidi.cmake | 72 +++++++++++++++------------------
 1 file changed, 32 insertions(+), 40 deletions(-)

diff --git a/cmake/modules/FindFriBidi.cmake b/cmake/modules/FindFriBidi.cmake
index 310152f846357..6a265e1c2a3b8 100644
--- a/cmake/modules/FindFriBidi.cmake
+++ b/cmake/modules/FindFriBidi.cmake
@@ -3,52 +3,44 @@
 # -----------
 # Finds the GNU FriBidi library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# FRIBIDI_FOUND - system has FriBidi
-# FRIBIDI_INCLUDE_DIRS - the FriBidi include directory
-# FRIBIDI_LIBRARIES - the FriBidi libraries
-#
-# and the following imported targets::
-#
-#   FriBidi::FriBidi   - The FriBidi library
+#   ${APP_NAME_LC}::Fribidi   - The FriBidi library
 
-find_package(PkgConfig)
-
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_FRIBIDI fribidi QUIET)
-endif()
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
 
-find_path(FRIBIDI_INCLUDE_DIR NAMES fribidi.h
-                              PATH_SUFFIXES fribidi
-                              HINTS ${PC_FRIBIDI_INCLUDEDIR})
-find_library(FRIBIDI_LIBRARY NAMES fribidi libfribidi
-                             HINTS ${PC_FRIBIDI_LIBDIR})
+  if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
+    pkg_check_modules(FRIBIDI fribidi IMPORTED_TARGET GLOBAL QUIET)
 
-set(FRIBIDI_VERSION ${PC_FRIBIDI_VERSION})
+    get_target_property(FRIBIDI_LIBRARY PkgConfig::FRIBIDI INTERFACE_LINK_LIBRARIES)
+    get_target_property(FRIBIDI_INCLUDE_DIR PkgConfig::FRIBIDI INTERFACE_INCLUDE_DIRECTORIES)
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(FriBidi
-                                  REQUIRED_VARS FRIBIDI_LIBRARY FRIBIDI_INCLUDE_DIR
-                                  VERSION_VAR FRIBIDI_VERSION)
-
-if(FRIBIDI_FOUND)
-  set(FRIBIDI_LIBRARIES ${FRIBIDI_LIBRARY})
-  set(FRIBIDI_INCLUDE_DIRS ${FRIBIDI_INCLUDE_DIR})
-  if(PC_FRIBIDI_INCLUDE_DIRS)
-    list(APPEND FRIBIDI_INCLUDE_DIRS ${PC_FRIBIDI_INCLUDE_DIRS})
-  endif()
-  if(PC_FRIBIDI_CFLAGS_OTHER)
-    set(FRIBIDI_DEFINITIONS ${PC_FRIBIDI_CFLAGS_OTHER})
+  else()
+    find_path(FRIBIDI_INCLUDE_DIR NAMES fribidi.h
+                                  PATH_SUFFIXES fribidi
+                                  HINTS ${DEPENDS_PATH}/include)
+    find_library(FRIBIDI_LIBRARY NAMES fribidi libfribidi
+                                 HINTS ${DEPENDS_PATH}/lib)
   endif()
 
-  if(NOT TARGET FriBidi::FriBidi)
-    add_library(FriBidi::FriBidi UNKNOWN IMPORTED)
-    set_target_properties(FriBidi::FriBidi PROPERTIES
-                                           IMPORTED_LOCATION "${FRIBIDI_LIBRARY}"
-                                           INTERFACE_INCLUDE_DIRECTORIES "${FRIBIDI_INCLUDE_DIRS}"
-                                           INTERFACE_COMPILE_OPTIONS "${FRIBIDI_DEFINITIONS}")
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(FriBidi
+                                    REQUIRED_VARS FRIBIDI_LIBRARY FRIBIDI_INCLUDE_DIR
+                                    VERSION_VAR FRIBIDI_VERSION)
+
+  if(FRIBIDI_FOUND)
+    if(TARGET PkgConfig::FRIBIDI)
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS PkgConfig::FRIBIDI)
+    else()
+        add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         IMPORTED_LOCATION "${FRIBIDI_LIBRARY}"
+                                                                         INTERFACE_INCLUDE_DIRECTORIES "${FRIBIDI_INCLUDE_DIR}")
+    endif()
+  else()
+    if(FriBidi_FIND_REQUIRED)
+      message(FATAL_ERROR "FriBidi library was not found.")
+    endif()
   endif()
 endif()
-
-mark_as_advanced(FRIBIDI_INCLUDE_DIR FRIBIDI_LIBRARY)

From 34f76825d5a4b3dc2ce934712e1e635260b42d66 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 19:23:14 +1000
Subject: [PATCH 48/76] [cmake][modules] Remove FindGnuTLS.cmake

cmake has supplied a FindGnuTLS since cmake 3.16. use it
---
 cmake/modules/FindGnuTLS.cmake | 30 ------------------------------
 cmake/modules/FindLibZip.cmake |  2 +-
 2 files changed, 1 insertion(+), 31 deletions(-)
 delete mode 100644 cmake/modules/FindGnuTLS.cmake

diff --git a/cmake/modules/FindGnuTLS.cmake b/cmake/modules/FindGnuTLS.cmake
deleted file mode 100644
index b323e9e27787b..0000000000000
--- a/cmake/modules/FindGnuTLS.cmake
+++ /dev/null
@@ -1,30 +0,0 @@
-# - Try to find gnutls
-# Once done this will define
-#
-# GNUTLS_FOUND - system has gnutls
-# GNUTLS_INCLUDE_DIRS - the gnutls include directory
-# GNUTLS_LIBRARIES - The gnutls libraries
-
-find_package(PkgConfig)
-
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(GNUTLS gnutls QUIET)
-endif()
-
-if(NOT GNUTLS_FOUND)
-  find_path(GNUTLS_INCLUDE_DIRS gnutls/gnutls.h)
-  find_library(GNUTLS_LIBRARIES gnutls)
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(GnuTLS DEFAULT_MSG GNUTLS_INCLUDE_DIRS GNUTLS_LIBRARIES)
-
-if(GNUTLS_FOUND)
-  list(APPEND GNUTLS_DEFINITIONS -DHAVE_GNUTLS=1)
-else()
-  if(GNUTLS_FIND_REQUIRED)
-    message(FATAL_ERROR "GNUTLS Not Found.")
-  endif()
-endif()
-
-mark_as_advanced(GNUTLS_INCLUDE_DIRS GNUTLS_LIBRARIES GNUTLS_DEFINITIONS)
diff --git a/cmake/modules/FindLibZip.cmake b/cmake/modules/FindLibZip.cmake
index c108970c34b7e..139514590e344 100644
--- a/cmake/modules/FindLibZip.cmake
+++ b/cmake/modules/FindLibZip.cmake
@@ -19,7 +19,7 @@ find_package(libzip CONFIG QUIET
 
 if(NOT LIBZIP_FOUND OR libzip_VERSION VERSION_LESS ${${MODULE}_VER})
   # Check for dependencies
-  find_package(GnuTLS MODULE REQUIRED)
+  find_package(GnuTLS REQUIRED)
 
   # Eventually we will want Find modules for the following deps
   # bzip2 

From eb8dcbd7ed542085cf2dc75fdea4bde2b2b97e2b Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 19:32:02 +1000
Subject: [PATCH 49/76] [cmake][modules] FindFFMPEG cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindFFMPEG.cmake        | 26 ++++++++++++--------------
 xbmc/cores/AudioEngine/CMakeLists.txt |  2 +-
 2 files changed, 13 insertions(+), 15 deletions(-)

diff --git a/cmake/modules/FindFFMPEG.cmake b/cmake/modules/FindFFMPEG.cmake
index e04b52c97cbbc..26dd6e8301da1 100644
--- a/cmake/modules/FindFFMPEG.cmake
+++ b/cmake/modules/FindFFMPEG.cmake
@@ -20,7 +20,7 @@
 # --------
 # This will define the following target:
 #
-# ffmpeg::ffmpeg  - The FFmpeg interface target
+# ${APP_NAME_LC}::FFMPEG  - The FFmpeg interface target
 # --------
 #
 
@@ -306,24 +306,22 @@ endif()
 if(FFMPEG_FOUND)
   set(_ffmpeg_definitions FFMPEG_VER_SHA=${FFMPEG_VERSION})
 
-  if(NOT TARGET ffmpeg::ffmpeg)
-    add_library(ffmpeg::ffmpeg INTERFACE IMPORTED)
-    set_target_properties(ffmpeg::ffmpeg PROPERTIES
+  if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
                                          INTERFACE_INCLUDE_DIRECTORIES "${FFMPEG_INCLUDE_DIRS}"
                                          INTERFACE_COMPILE_DEFINITIONS "${_ffmpeg_definitions}")
   endif()
 
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libavcodec)
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libavfilter)
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libavformat)
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libavutil)
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libswscale)
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libswresample)
-  target_link_libraries(ffmpeg::ffmpeg INTERFACE ffmpeg::libpostproc)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libavcodec)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libavfilter)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libavformat)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libavutil)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libswscale)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libswresample)
+  target_link_libraries(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE ffmpeg::libpostproc)
 
   if(TARGET ffmpeg)
-    add_dependencies(ffmpeg::ffmpeg ffmpeg)
+    add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ffmpeg)
   endif()
-
-  set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP ffmpeg::ffmpeg)
 endif()
diff --git a/xbmc/cores/AudioEngine/CMakeLists.txt b/xbmc/cores/AudioEngine/CMakeLists.txt
index 9185e1e81d7d0..f3eaf2711c9f1 100644
--- a/xbmc/cores/AudioEngine/CMakeLists.txt
+++ b/xbmc/cores/AudioEngine/CMakeLists.txt
@@ -98,7 +98,7 @@ if(TARGET ${APP_NAME_LC}::Sndio)
   list(APPEND HEADERS Sinks/AESinkSNDIO.h)
 endif()
 
-if(TARGET ffmpeg::ffmpeg)
+if(TARGET ${APP_NAME_LC}::FFMPEG)
   list(APPEND SOURCES Engines/ActiveAE/ActiveAEResampleFFMPEG.cpp)
   list(APPEND HEADERS Engines/ActiveAE/ActiveAEResampleFFMPEG.h)
 endif()

From 70ce289cc81c0f068ae9d0b0bc8c935233c06d2e Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sun, 12 May 2024 19:57:39 +1000
Subject: [PATCH 50/76] [cmake][modules] FindIso9660pp update target usage

---
 cmake/modules/FindIso9660pp.cmake | 90 ++++++++++++++++++-------------
 xbmc/filesystem/CMakeLists.txt    |  2 +-
 2 files changed, 53 insertions(+), 39 deletions(-)

diff --git a/cmake/modules/FindIso9660pp.cmake b/cmake/modules/FindIso9660pp.cmake
index b6fbdc83e4998..b8fcd420f1840 100644
--- a/cmake/modules/FindIso9660pp.cmake
+++ b/cmake/modules/FindIso9660pp.cmake
@@ -3,52 +3,66 @@
 # --------
 # Finds the iso9660++ library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# ISO9660PP_FOUND - system has iso9660++
-# ISO9660PP_INCLUDE_DIRS - the iso9660++ include directory
-# ISO9660PP_LIBRARIES - the iso9660++ libraries
-# ISO9660PP_DEFINITIONS  - the iso9660++ definitions
-
-if(Iso9660pp_FIND_VERSION)
-  if(Iso9660pp_FIND_VERSION_EXACT)
-    set(Iso9660pp_FIND_SPEC "=${Iso9660pp_FIND_VERSION_COMPLETE}")
-  else()
-    set(Iso9660pp_FIND_SPEC ">=${Iso9660pp_FIND_VERSION_COMPLETE}")
-  endif()
-endif()
+#   ${APP_NAME_LC}::Iso9660pp - The Iso9660pp library
 
-find_package(PkgConfig)
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_ISO9660PP libiso9660++${Iso9660pp_FIND_SPEC} QUIET)
-  pkg_check_modules(PC_ISO9660 libiso9660${Iso9660pp_FIND_SPEC} QUIET)
-endif()
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(Cdio)
 
-find_package(Cdio)
+  if(Cdio_FOUND)
+    find_package(PkgConfig)
+    if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
+      if(Iso9660pp_FIND_VERSION)
+        if(Iso9660pp_FIND_VERSION_EXACT)
+          set(Iso9660pp_FIND_SPEC "=${Iso9660pp_FIND_VERSION_COMPLETE}")
+        else()
+          set(Iso9660pp_FIND_SPEC ">=${Iso9660pp_FIND_VERSION_COMPLETE}")
+        endif()
+      endif()
 
-find_path(ISO9660PP_INCLUDE_DIR NAMES cdio++/iso9660.hpp
-                                HINTS ${PC_ISO9660PP_INCLUDEDIR})
+      pkg_check_modules(PC_ISO9660PP libiso9660++${Iso9660pp_FIND_SPEC} QUIET)
+      pkg_check_modules(PC_ISO9660 libiso9660${Iso9660pp_FIND_SPEC} QUIET)
+    endif()
 
-find_library(ISO9660PP_LIBRARY NAMES libiso9660++ iso9660++
-                               HINTS ${PC_ISO9660PP_LIBDIR})
+    find_path(ISO9660PP_INCLUDE_DIR NAMES cdio++/iso9660.hpp
+                                    HINTS ${DEPENDS_PATH}/include ${PC_ISO9660PP_INCLUDEDIR}
+                                    ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
-find_path(ISO9660_INCLUDE_DIR NAMES cdio/iso9660.h
-                              HINTS ${PC_ISO9660_INCLUDEDIR})
+    find_library(ISO9660PP_LIBRARY NAMES libiso9660++ iso9660++
+                                   HINTS ${DEPENDS_PATH}/lib ${PC_ISO9660PP_LIBDIR}
+                                   ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
-find_library(ISO9660_LIBRARY NAMES libiso9660 iso9660
-                             HINTS ${PC_ISO9660_LIBDIR})
+    find_path(ISO9660_INCLUDE_DIR NAMES cdio/iso9660.h
+                                  HINTS ${DEPENDS_PATH}/include ${PC_ISO9660_INCLUDEDIR}
+                                  ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
-set(ISO9660PP_VERSION ${PC_ISO9660PP_VERSION})
+    find_library(ISO9660_LIBRARY NAMES libiso9660 iso9660
+                                 HINTS ${DEPENDS_PATH}/lib ${PC_ISO9660_LIBDIR}
+                                 ${${CORE_PLATFORM_LC}_SEARCH_CONFIG})
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Iso9660pp
-                                  REQUIRED_VARS ISO9660PP_LIBRARY ISO9660PP_INCLUDE_DIR ISO9660_LIBRARY ISO9660_INCLUDE_DIR CDIO_LIBRARY CDIO_INCLUDE_DIR CDIOPP_INCLUDE_DIR
-                                  VERSION_VAR ISO9660PP_VERSION)
+    set(ISO9660PP_VERSION ${PC_ISO9660PP_VERSION})
 
-if(ISO9660PP_FOUND)
-  set(ISO9660PP_LIBRARIES ${ISO9660PP_LIBRARY} ${ISO9660_LIBRARY} ${CDIO_LIBRARY})
-  set(ISO9660PP_INCLUDE_DIRS ${CDIO_INCLUDE_DIR} ${CDIOPP_INCLUDE_DIR} ${ISO9660_INCLUDE_DIR} ${ISO9660PP_INCLUDE_DIR})
-  set(ISO9660PP_DEFINITIONS -DHAS_ISO9660PP=1)
-endif()
+    include(FindPackageHandleStandardArgs)
+    find_package_handle_standard_args(Iso9660pp
+                                      REQUIRED_VARS ISO9660PP_LIBRARY ISO9660PP_INCLUDE_DIR ISO9660_LIBRARY ISO9660_INCLUDE_DIR
+                                      VERSION_VAR ISO9660PP_VERSION)
 
-mark_as_advanced(ISO9660PP_INCLUDE_DIR ISO9660PP_LIBRARY ISO9660_INCLUDE_DIR ISO9660_LIBRARY)
+    if(ISO9660PP_FOUND)
+      add_library(${APP_NAME_LC}::Iso9660 UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::Iso9660 PROPERTIES
+                                                    IMPORTED_LOCATION "${ISO9660_LIBRARY}"
+                                                    INTERFACE_INCLUDE_DIRECTORIES "${ISO9660_INCLUDE_DIR}")
+
+      add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       IMPORTED_LOCATION "${ISO9660PP_LIBRARY}"
+                                                                       INTERFACE_INCLUDE_DIRECTORIES "${ISO9660PP_INCLUDE_DIR}"
+                                                                       INTERFACE_LINK_LIBRARIES "${APP_NAME_LC}::Iso9660;${APP_NAME_LC}::Cdio"
+                                                                       INTERFACE_COMPILE_DEFINITIONS HAS_ISO9660PP)
+    endif()
+  else()
+    include(FindPackageMessage)
+    find_package_message(Iso9660pp "Iso9660pp: Can not find libcdio (REQUIRED)" "")
+  endif()
+endif()
diff --git a/xbmc/filesystem/CMakeLists.txt b/xbmc/filesystem/CMakeLists.txt
index 1416872da0b1a..379cdc3a79f32 100644
--- a/xbmc/filesystem/CMakeLists.txt
+++ b/xbmc/filesystem/CMakeLists.txt
@@ -124,7 +124,7 @@ set(HEADERS AddonsDirectory.h
             ZipFile.h
             ZipManager.h)
 
-if(ISO9660PP_FOUND)
+if(TARGET ${APP_NAME_LC}::Iso9660pp)
   list(APPEND SOURCES ISO9660Directory.cpp
                       ISO9660File.cpp)
   list(APPEND HEADERS ISO9660Directory.h

From bdf94e0b365f59bfc0193c3aeac2710683fef288 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 17:40:08 +1000
Subject: [PATCH 51/76] [cmake][modules] FindFlatBuffers cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindFlatBuffers.cmake            | 16 +++++++---------
 xbmc/cores/RetroPlayer/messages/CMakeLists.txt |  6 +++---
 2 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/cmake/modules/FindFlatBuffers.cmake b/cmake/modules/FindFlatBuffers.cmake
index 841d14bc6a369..dbac20d361f3e 100644
--- a/cmake/modules/FindFlatBuffers.cmake
+++ b/cmake/modules/FindFlatBuffers.cmake
@@ -4,11 +4,11 @@
 #
 # This will define the following target:
 #
-#   flatbuffers::flatheaders - The flatbuffers headers
+#   ${APP_NAME_LC}::FlatBuffers - The flatbuffers headers
 
 find_package(FlatC REQUIRED)
 
-if(NOT TARGET flatbuffers::flatheaders)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   include(cmake/scripts/common/ModuleHelpers.cmake)
 
@@ -58,14 +58,14 @@ if(NOT TARGET flatbuffers::flatheaders)
 
   if(FlatBuffers_FOUND)
 
-    add_library(flatbuffers::flatheaders INTERFACE IMPORTED)
-    set_target_properties(flatbuffers::flatheaders PROPERTIES
-                                                   INTERFACE_INCLUDE_DIRECTORIES "${FLATBUFFERS_INCLUDE_DIR}")
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${FLATBUFFERS_INCLUDE_DIR}")
 
-    add_dependencies(flatbuffers::flatheaders flatbuffers::flatc)
+    add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} flatbuffers::flatc)
 
     if(TARGET flatbuffers)
-      add_dependencies(flatbuffers::flatheaders flatbuffers)
+      add_dependencies(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} flatbuffers)
     endif()
 
     # Add internal build target when a Multi Config Generator is used
@@ -83,8 +83,6 @@ if(NOT TARGET flatbuffers::flatheaders)
       endif()
       add_dependencies(build_internal_depends flatbuffers)
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP flatbuffers::flatheaders)
   else()
     if(FlatBuffers_FIND_REQUIRED)
       message(FATAL_ERROR "Flatbuffer schema headers were not found. You may want to try -DENABLE_INTERNAL_FLATBUFFERS=ON to build the internal headers package")
diff --git a/xbmc/cores/RetroPlayer/messages/CMakeLists.txt b/xbmc/cores/RetroPlayer/messages/CMakeLists.txt
index 4d68b7988a9fa..86174823709f4 100644
--- a/xbmc/cores/RetroPlayer/messages/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/messages/CMakeLists.txt
@@ -20,8 +20,8 @@ set_target_properties(retroplayer_messages PROPERTIES FOLDER "Generated Messages
                                                       INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR}
                                                       SOURCES "${FLATC_OUTPUTS}")
 
-if(TARGET flatbuffers::flatheaders)
-  set_property(TARGET flatbuffers::flatheaders APPEND PROPERTY
+if(TARGET ${APP_NAME_LC}::FlatBuffers)
+  set_property(TARGET ${APP_NAME_LC}::FlatBuffers APPEND PROPERTY
                                                INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_BINARY_DIR}")
-  add_dependencies(retroplayer_messages flatbuffers::flatheaders)
+  add_dependencies(retroplayer_messages ${APP_NAME_LC}::FlatBuffers)
 endif()

From 1b7df78c72a076d8e99a2c61a33e8708c3b92f3d Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 17:43:21 +1000
Subject: [PATCH 52/76] [cmake][modules] FindLibDisplayInfo cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindLibDisplayInfo.cmake | 51 ++++++++++++++------------
 xbmc/utils/CMakeLists.txt              |  2 +-
 2 files changed, 28 insertions(+), 25 deletions(-)

diff --git a/cmake/modules/FindLibDisplayInfo.cmake b/cmake/modules/FindLibDisplayInfo.cmake
index b74e66e9489de..cfe48aa1db994 100644
--- a/cmake/modules/FindLibDisplayInfo.cmake
+++ b/cmake/modules/FindLibDisplayInfo.cmake
@@ -3,36 +3,39 @@
 # -------
 # Finds the libdisplay-info library
 #
-# This will define the following variables::
-#
-# LIBDISPLAYINFO_FOUND - system has LIBDISPLAY-INFO
-# LIBDISPLAYINFO_INCLUDE_DIRS - the LIBDISPLAY-INFO include directory
-# LIBDISPLAYINFO_LIBRARIES - the LIBDISPLAY-INFO libraries
-# LIBDISPLAYINFO_DEFINITIONS - the LIBDISPLAY-INFO definitions
+# This will define the following target:
 #
+#   ${APP_NAME_LC}::LibDisplayInfo   - The LibDisplayInfo library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_LIBDISPLAYINFO libdisplay-info QUIET)
-endif()
+  find_package(PkgConfig)
 
-find_path(LIBDISPLAYINFO_INCLUDE_DIR libdisplay-info/edid.h
-                          HINTS ${PC_LIBDISPLAYINFO_INCLUDEDIR})
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_LIBDISPLAYINFO libdisplay-info QUIET)
+  endif()
 
-find_library(LIBDISPLAYINFO_LIBRARY NAMES display-info
-                         HINTS ${PC_LIBDISPLAYINFO_LIBDIR})
+  find_path(LIBDISPLAYINFO_INCLUDE_DIR libdisplay-info/edid.h
+                            HINTS ${PC_LIBDISPLAYINFO_INCLUDEDIR})
 
-set(LIBDISPLAYINFO_VERSION ${PC_LIBDISPLAYINFO_VERSION})
+  find_library(LIBDISPLAYINFO_LIBRARY NAMES display-info
+                           HINTS ${PC_LIBDISPLAYINFO_LIBDIR})
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(LibDisplayInfo
-                                  REQUIRED_VARS LIBDISPLAYINFO_LIBRARY LIBDISPLAYINFO_INCLUDE_DIR
-                                  VERSION_VAR LIBDISPLAYINFO_VERSION)
+  set(LIBDISPLAYINFO_VERSION ${PC_LIBDISPLAYINFO_VERSION})
 
-if(LIBDISPLAYINFO_FOUND)
-  set(LIBDISPLAYINFO_LIBRARIES ${LIBDISPLAYINFO_LIBRARY})
-  set(LIBDISPLAYINFO_INCLUDE_DIRS ${LIBDISPLAYINFO_INCLUDE_DIR})
-endif()
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(LibDisplayInfo
+                                    REQUIRED_VARS LIBDISPLAYINFO_LIBRARY LIBDISPLAYINFO_INCLUDE_DIR
+                                    VERSION_VAR LIBDISPLAYINFO_VERSION)
 
-mark_as_advanced(LIBDISPLAYINFO_INCLUDE_DIR LIBDISPLAYINFO_LIBRARY)
+  if(LIBDISPLAYINFO_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${LIBDISPLAYINFO_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${LIBDISPLAYINFO_INCLUDE_DIR}")
+  else()
+    if(LibDisplayInfo_FIND_REQUIRED)
+      message(FATAL_ERROR "Libdisplayinfo libraries were not found.")
+    endif()
+  endif()
+endif()
diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index 8fcad352af667..13dbe058a9d8e 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -240,7 +240,7 @@ if("gbm" IN_LIST CORE_PLATFORM_NAME_LC OR "wayland" IN_LIST CORE_PLATFORM_NAME_L
     list(APPEND HEADERS DRMHelpers.h)
   endif()
 
-  if(LIBDISPLAYINFO_FOUND)
+  if(TARGET ${APP_NAME_LC}::LibDisplayInfo)
     list(APPEND SOURCES DisplayInfo.cpp)
     list(APPEND HEADERS DisplayInfo.h)
   endif()

From 81cf04d50295fbdfaf4f5f9232e8714dbfdbb9ef Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 17:50:47 +1000
Subject: [PATCH 53/76] [cmake][modules] FindLibDovi update to target usage

---
 cmake/modules/FindLibDovi.cmake | 45 ++++++++++++++++-----------------
 1 file changed, 22 insertions(+), 23 deletions(-)

diff --git a/cmake/modules/FindLibDovi.cmake b/cmake/modules/FindLibDovi.cmake
index 2f9f29632e520..e6b44048b1a4a 100644
--- a/cmake/modules/FindLibDovi.cmake
+++ b/cmake/modules/FindLibDovi.cmake
@@ -2,33 +2,32 @@
 # -------
 # Finds the libdovi library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# LIBDOVI_FOUND - system has libdovi
-# LIBDOVI_INCLUDE_DIRS - the libdovi include directories
-# LIBDOVI_LIBRARIES - the libdovi libraries
-# LIBDOVI_DEFINITIONS - the libdovi compile definitions
+#   ${APP_NAME_LC}::LibDovi   - The libDovi library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_LIBDOVI libdovi QUIET)
-endif()
+  find_package(PkgConfig)
 
-find_library(LIBDOVI_LIBRARY NAMES dovi libdovi
-                             HINTS ${PC_LIBDOVI_LIBDIR}
-)
-find_path(LIBDOVI_INCLUDE_DIR NAMES libdovi/rpu_parser.h
-                              HINTS ${PC_LIBDOVI_INCLUDEDIR})
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_LIBDOVI libdovi QUIET)
+  endif()
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(LibDovi
-                                  REQUIRED_VARS LIBDOVI_LIBRARY LIBDOVI_INCLUDE_DIR)
+  find_library(LIBDOVI_LIBRARY NAMES dovi libdovi
+                               HINTS ${PC_LIBDOVI_LIBDIR})
+  find_path(LIBDOVI_INCLUDE_DIR NAMES libdovi/rpu_parser.h
+                                HINTS ${PC_LIBDOVI_INCLUDEDIR})
 
-if(LIBDOVI_FOUND)
-  set(LIBDOVI_INCLUDE_DIRS ${LIBDOVI_INCLUDE_DIR})
-  set(LIBDOVI_LIBRARIES ${LIBDOVI_LIBRARY})
-  set(LIBDOVI_DEFINITIONS -DHAVE_LIBDOVI=1)
-endif()
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(LibDovi
+                                    REQUIRED_VARS LIBDOVI_LIBRARY LIBDOVI_INCLUDE_DIR)
 
-mark_as_advanced(LIBDOVI_INCLUDE_DIR LIBDOVI_LIBRARY)
+  if(LIBDOVI_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${LIBDOVI_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${LIBDOVI_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_LIBDOVI)
+  endif()
+endif()

From f2c9eca5f2dc29f32f451df7cc892482ce535521 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 17:52:34 +1000
Subject: [PATCH 54/76] [cmake][modules] FindLibInput update to target usage

---
 cmake/modules/FindLibInput.cmake         | 64 ++++++++++++------------
 xbmc/platform/linux/input/CMakeLists.txt |  2 +-
 2 files changed, 34 insertions(+), 32 deletions(-)

diff --git a/cmake/modules/FindLibInput.cmake b/cmake/modules/FindLibInput.cmake
index a1530f3a25bfb..0e4681fbf9ac0 100644
--- a/cmake/modules/FindLibInput.cmake
+++ b/cmake/modules/FindLibInput.cmake
@@ -3,36 +3,38 @@
 # --------
 # Finds the libinput library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# LIBINPUT_FOUND - system has libinput
-# LIBINPUT_INCLUDE_DIRS - the libinput include directory
-# LIBINPUT_LIBRARIES - the libinput libraries
-# LIBINPUT_DEFINITIONS - the libinput compile definitions
-#
-
-find_package(PkgConfig)
-
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_LIBINPUT libinput QUIET)
-endif()
-
-find_path(LIBINPUT_INCLUDE_DIR NAMES libinput.h
-                               HINTS ${PC_LIBINPUT_INCLUDEDIR})
-
-find_library(LIBINPUT_LIBRARY NAMES input
-                              HINTS ${PC_LIBINPUT_LIBDIR})
-
-set(LIBINPUT_VERSION ${PC_LIBINPUT_VERSION})
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(LibInput
-                                  REQUIRED_VARS LIBINPUT_LIBRARY LIBINPUT_INCLUDE_DIR
-                                  VERSION_VAR LIBINPUT_VERSION)
-
-if(LIBINPUT_FOUND)
-  set(LIBINPUT_INCLUDE_DIRS ${LIBINPUT_INCLUDE_DIR})
-  set(LIBINPUT_LIBRARIES ${LIBINPUT_LIBRARY})
+#   ${APP_NAME_LC}::LibInput   - The LibInput library
+
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
+
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_LIBINPUT libinput QUIET)
+  endif()
+
+  find_path(LIBINPUT_INCLUDE_DIR NAMES libinput.h
+                                 HINTS ${PC_LIBINPUT_INCLUDEDIR})
+
+  find_library(LIBINPUT_LIBRARY NAMES input
+                                HINTS ${PC_LIBINPUT_LIBDIR})
+
+  set(LIBINPUT_VERSION ${PC_LIBINPUT_VERSION})
+
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(LibInput
+                                    REQUIRED_VARS LIBINPUT_LIBRARY LIBINPUT_INCLUDE_DIR
+                                    VERSION_VAR LIBINPUT_VERSION)
+
+  if(LIBINPUT_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${LIBINPUT_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${LIBINPUT_INCLUDE_DIR}")
+  else()
+    if(LibInput_FIND_REQUIRED)
+      message(FATAL_ERROR "Libinput libraries were not found.")
+    endif()
+  endif()
 endif()
-
-mark_as_advanced(LIBINPUT_INCLUDE_DIR LIBINPUT_LIBRARY)
diff --git a/xbmc/platform/linux/input/CMakeLists.txt b/xbmc/platform/linux/input/CMakeLists.txt
index d3088d44c2420..6f3bb68eee884 100644
--- a/xbmc/platform/linux/input/CMakeLists.txt
+++ b/xbmc/platform/linux/input/CMakeLists.txt
@@ -7,7 +7,7 @@ if(TARGET ${APP_NAME_LC}::LircClient)
 endif()
 
 if("gbm" IN_LIST CORE_PLATFORM_NAME_LC)
-  if(LIBINPUT_FOUND)
+  if(TARGET ${APP_NAME_LC}::LibInput)
     list(APPEND SOURCES LibInputHandler.cpp
                         LibInputKeyboard.cpp
                         LibInputPointer.cpp

From 7c8ec17cf2ec86daa2eef92782b7295a803fcc1a Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 18:00:04 +1000
Subject: [PATCH 55/76] [cmake][modules] FindLzo2 cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindLzo2.cmake                  | 46 +++++++++----------
 .../native/TexturePacker/src/CMakeLists.txt   |  4 +-
 2 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/cmake/modules/FindLzo2.cmake b/cmake/modules/FindLzo2.cmake
index 5e3e6865bd910..eb6aaa21d72c6 100644
--- a/cmake/modules/FindLzo2.cmake
+++ b/cmake/modules/FindLzo2.cmake
@@ -3,35 +3,33 @@
 # --------
 # Finds the Lzo2 library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# LZO2_FOUND - system has Lzo2
-# LZO2_INCLUDE_DIRS - the Lzo2 include directory
-# LZO2_LIBRARIES - the Lzo2 libraries
-#
-# and the following imported targets::
-#
-#   Lzo2::Lzo2   - The Lzo2 library
+#   ${APP_NAME_LC}::Lzo2   - The Lzo2 library
 
-find_path(LZO2_INCLUDE_DIR NAMES lzo1x.h
-                           PATH_SUFFIXES lzo)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-find_library(LZO2_LIBRARY NAMES lzo2 liblzo2)
+  find_path(LZO2_INCLUDE_DIR NAMES lzo1x.h
+                             PATH_SUFFIXES lzo
+                             HINTS ${DEPENDS_PATH}/include
+                             ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Lzo2
-                                  REQUIRED_VARS LZO2_LIBRARY LZO2_INCLUDE_DIR)
+  find_library(LZO2_LIBRARY NAMES lzo2 liblzo2
+                            HINTS ${DEPENDS_PATH}/lib
+                            ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
-if(LZO2_FOUND)
-  set(LZO2_LIBRARIES ${LZO2_LIBRARY})
-  set(LZO2_INCLUDE_DIRS ${LZO2_INCLUDE_DIR})
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(Lzo2
+                                    REQUIRED_VARS LZO2_LIBRARY LZO2_INCLUDE_DIR)
 
-  if(NOT TARGET Lzo2::Lzo2)
-    add_library(Lzo2::Lzo2 UNKNOWN IMPORTED)
-    set_target_properties(Lzo2::Lzo2 PROPERTIES
-                                     IMPORTED_LOCATION "${LZO2_LIBRARY}"
-                                     INTERFACE_INCLUDE_DIRECTORIES "${LZO2_INCLUDE_DIR}")
+  if(LZO2_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${LZO2_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${LZO2_INCLUDE_DIR}")
+  else()
+    if(LibLzo2_FIND_REQUIRED)
+      message(FATAL_ERROR "Lzo2 library was not found.")
+    endif()
   endif()
 endif()
-
-mark_as_advanced(LZO2_INCLUDE_DIR LZO2_LIBRARY)
diff --git a/tools/depends/native/TexturePacker/src/CMakeLists.txt b/tools/depends/native/TexturePacker/src/CMakeLists.txt
index c8b0f76cb9846..25b1be7a9660a 100644
--- a/tools/depends/native/TexturePacker/src/CMakeLists.txt
+++ b/tools/depends/native/TexturePacker/src/CMakeLists.txt
@@ -13,6 +13,8 @@ if(ENABLE_STATIC)
   set(ZLIB_USE_STATIC_LIBS ON)
 endif()
 
+set(APP_NAME_LC texturepacker)
+
 find_package(Lzo2 REQUIRED)
 find_package(PNG REQUIRED)
 find_package(GIF REQUIRED)
@@ -68,7 +70,7 @@ target_link_libraries(TexturePacker
                               ${GIF_LIBRARIES}
                               ${PNG_LIBRARIES}
                               ${JPEG_LIBRARIES}
-                              ${LZO2_LIBRARIES})
+                              texturepacker::Lzo2)
 
 target_compile_definitions(TexturePacker PRIVATE ${ARCH_DEFINES} ${SYSTEM_DEFINES})
 target_compile_features(TexturePacker PUBLIC cxx_std_17)

From fb2426ad928fe44045b1d237b9c510b28fee84c8 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 18:09:48 +1000
Subject: [PATCH 56/76] [cmake][modules] FindMicroHttpd update to target usage

---
 cmake/modules/FindMicroHttpd.cmake            | 92 ++++++++++++-------
 xbmc/filesystem/test/CMakeLists.txt           |  2 +-
 xbmc/interfaces/legacy/wsgi/CMakeLists.txt    |  2 +-
 xbmc/network/CMakeLists.txt                   |  2 +-
 .../network/httprequesthandler/CMakeLists.txt |  2 +-
 .../httprequesthandler/python/CMakeLists.txt  |  2 +-
 xbmc/network/test/CMakeLists.txt              |  2 +-
 7 files changed, 64 insertions(+), 40 deletions(-)

diff --git a/cmake/modules/FindMicroHttpd.cmake b/cmake/modules/FindMicroHttpd.cmake
index 02c94637d6233..1f2e9d69cec25 100644
--- a/cmake/modules/FindMicroHttpd.cmake
+++ b/cmake/modules/FindMicroHttpd.cmake
@@ -3,48 +3,72 @@
 # --------------
 # Finds the MicroHttpd library
 #
-# This will define the following variables::
-#
-# MICROHTTPD_FOUND - system has MicroHttpd
-# MICROHTTPD_INCLUDE_DIRS - the MicroHttpd include directory
-# MICROHTTPD_LIBRARIES - the MicroHttpd libraries
-# MICROHTTPD_DEFINITIONS - the MicroHttpd definitions
+# This will define the following target:
 #
+#   ${APP_NAME_LC}::MicroHttpd   - The microhttpd library
 
-if(MicroHttpd_FIND_VERSION)
-  if(MicroHttpd_FIND_VERSION_EXACT)
-    set(MicroHttpd_FIND_SPEC "=${MicroHttpd_FIND_VERSION_COMPLETE}")
-  else()
-    set(MicroHttpd_FIND_SPEC ">=${MicroHttpd_FIND_VERSION_COMPLETE}")
-  endif()
-endif()
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
-find_package(PkgConfig)
+  find_package(PkgConfig)
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_MICROHTTPD libmicrohttpd${MicroHttpd_FIND_SPEC} QUIET)
-endif()
+  if(PKG_CONFIG_FOUND AND NOT (WIN32 OR WINDOWS_STORE))
+    if(MicroHttpd_FIND_VERSION)
+      if(MicroHttpd_FIND_VERSION_EXACT)
+        set(MicroHttpd_FIND_SPEC "=${MicroHttpd_FIND_VERSION_COMPLETE}")
+      else()
+        set(MicroHttpd_FIND_SPEC ">=${MicroHttpd_FIND_VERSION_COMPLETE}")
+      endif()
+    endif()
+
+    pkg_check_modules(MICROHTTPD libmicrohttpd${MicroHttpd_FIND_SPEC} QUIET)
+
+    # First item is the full path of the library file found
+    # pkg_check_modules does not populate a variable of the found library explicitly
+    list(GET MICROHTTPD_LINK_LIBRARIES 0 MICROHTTPD_LIBRARY)
 
-find_path(MICROHTTPD_INCLUDE_DIR NAMES microhttpd.h
-                                 HINTS ${PC_MICROHTTPD_INCLUDEDIR})
-find_library(MICROHTTPD_LIBRARY NAMES microhttpd libmicrohttpd
-                                HINTS ${PC_MICROHTTPD_LIBDIR})
+    # Add link libraries for static lib usage
+    if(${MICROHTTPD_LIBRARY} MATCHES ".+\.a$" AND MICROHTTPD_LINK_LIBRARIES)
+      # Remove duplicates
+      list(REMOVE_DUPLICATES MICROHTTPD_LINK_LIBRARIES)
 
-set(MICROHTTPD_VERSION ${PC_MICROHTTPD_VERSION})
+      # Remove own library - eg libmicrohttpd.a
+      list(FILTER MICROHTTPD_LINK_LIBRARIES EXCLUDE REGEX ".*microhttpd.*\.a$")
+      set(PC_MICROHTTPD_LINK_LIBRARIES ${MICROHTTPD_LINK_LIBRARIES})
+    endif()
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(MicroHttpd
-                                  REQUIRED_VARS MICROHTTPD_LIBRARY MICROHTTPD_INCLUDE_DIR
-                                  VERSION_VAR MICROHTTPD_VERSION)
+    # pkgconfig sets MICROHTTPD_INCLUDEDIR, map this to our "standard" variable name
+    set(MICROHTTPD_INCLUDE_DIR ${MICROHTTPD_INCLUDEDIR})
+  else()
 
-if(MICROHTTPD_FOUND)
-  set(MICROHTTPD_LIBRARIES ${MICROHTTPD_LIBRARY})
-  set(MICROHTTPD_INCLUDE_DIRS ${MICROHTTPD_INCLUDE_DIR})
-  set(MICROHTTPD_DEFINITIONS -DHAS_WEB_SERVER=1 -DHAS_WEB_INTERFACE=1)
+    find_path(MICROHTTPD_INCLUDE_DIR NAMES microhttpd.h
+                                     HINTS ${DEPENDS_PATH}/include
+                                     ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
 
-  if(${MICROHTTPD_LIBRARY} MATCHES ".+\.a$" AND PC_MICROHTTPD_STATIC_LIBRARIES)
-    list(APPEND MICROHTTPD_LIBRARIES ${PC_MICROHTTPD_STATIC_LIBRARIES})
+    find_library(MICROHTTPD_LIBRARY NAMES microhttpd libmicrohttpd
+                                    HINTS ${DEPENDS_PATH}/lib
+                                    ${${CORE_PLATFORM_NAME_LC}_SEARCH_CONFIG})
   endif()
-endif()
 
-mark_as_advanced(MICROHTTPD_LIBRARY MICROHTTPD_INCLUDE_DIR)
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(MicroHttpd
+                                    REQUIRED_VARS MICROHTTPD_LIBRARY MICROHTTPD_INCLUDE_DIR
+                                    VERSION_VAR MICROHTTPD_VERSION)
+
+  if(MICROHTTPD_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${MICROHTTPD_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${MICROHTTPD_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS "HAS_WEB_SERVER;HAS_WEB_INTERFACE")
+
+      # Add link libraries for static lib usage found from pkg-config
+      if(PC_MICROHTTPD_LINK_LIBRARIES)
+        set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                         INTERFACE_LINK_LIBRARIES "${PC_MICROHTTPD_LINK_LIBRARIES}")
+      endif()
+
+    if(${MICROHTTPD_LIBRARY} MATCHES ".+\.a$" AND PC_MICROHTTPD_STATIC_LIBRARIES)
+      list(APPEND MICROHTTPD_LIBRARIES ${PC_MICROHTTPD_STATIC_LIBRARIES})
+    endif()
+  endif()
+endif()
diff --git a/xbmc/filesystem/test/CMakeLists.txt b/xbmc/filesystem/test/CMakeLists.txt
index 5d2f0344c7a6a..c8ecfe29889d4 100644
--- a/xbmc/filesystem/test/CMakeLists.txt
+++ b/xbmc/filesystem/test/CMakeLists.txt
@@ -4,7 +4,7 @@ set(SOURCES TestDirectory.cpp
             TestZipFile.cpp
             TestZipManager.cpp)
 
-if(MICROHTTPD_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd)
   list(APPEND SOURCES TestHTTPDirectory.cpp)
 endif()
 
diff --git a/xbmc/interfaces/legacy/wsgi/CMakeLists.txt b/xbmc/interfaces/legacy/wsgi/CMakeLists.txt
index cc29eb464f84b..cd8fbdd91426a 100644
--- a/xbmc/interfaces/legacy/wsgi/CMakeLists.txt
+++ b/xbmc/interfaces/legacy/wsgi/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(MICROHTTPD_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd)
   set(SOURCES WsgiErrorStream.cpp
               WsgiInputStream.cpp
               WsgiResponseBody.cpp
diff --git a/xbmc/network/CMakeLists.txt b/xbmc/network/CMakeLists.txt
index a4dac89ecbdd2..ad301ac7de27f 100644
--- a/xbmc/network/CMakeLists.txt
+++ b/xbmc/network/CMakeLists.txt
@@ -47,7 +47,7 @@ if(TARGET ${APP_NAME_LC}::SmbClient)
   list(APPEND HEADERS IWSDiscovery.h)
 endif()
 
-if(MICROHTTPD_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd)
   list(APPEND SOURCES WebServer.cpp)
   list(APPEND HEADERS WebServer.h)
 endif()
diff --git a/xbmc/network/httprequesthandler/CMakeLists.txt b/xbmc/network/httprequesthandler/CMakeLists.txt
index ea514c51f5329..d46d75b485458 100644
--- a/xbmc/network/httprequesthandler/CMakeLists.txt
+++ b/xbmc/network/httprequesthandler/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(MICROHTTPD_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd)
   set(SOURCES HTTPFileHandler.cpp
               HTTPImageHandler.cpp
               HTTPImageTransformationHandler.cpp
diff --git a/xbmc/network/httprequesthandler/python/CMakeLists.txt b/xbmc/network/httprequesthandler/python/CMakeLists.txt
index 7bbbad9b4d353..b7b4c43a6a16d 100644
--- a/xbmc/network/httprequesthandler/python/CMakeLists.txt
+++ b/xbmc/network/httprequesthandler/python/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(MICROHTTPD_FOUND AND PYTHON_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd AND PYTHON_FOUND)
   set(SOURCES HTTPPythonInvoker.cpp
               HTTPPythonWsgiInvoker.cpp)
 
diff --git a/xbmc/network/test/CMakeLists.txt b/xbmc/network/test/CMakeLists.txt
index b07577573631b..f623acc02cfa3 100644
--- a/xbmc/network/test/CMakeLists.txt
+++ b/xbmc/network/test/CMakeLists.txt
@@ -1,7 +1,7 @@
 set(SOURCES TestNetwork.cpp
             TestNetworkFileItemClassify.cpp)
 
-if(MICROHTTPD_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd)
   list(APPEND SOURCES TestWebServer.cpp)
 endif()
 

From da61a734bf6987e423b56addd5604f53046e4be2 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 18:16:45 +1000
Subject: [PATCH 57/76] [cmake][modules] FindPipewire update to target usage

---
 cmake/modules/FindPipewire.cmake      | 97 +++++++++++++--------------
 xbmc/cores/AudioEngine/CMakeLists.txt |  2 +-
 2 files changed, 49 insertions(+), 50 deletions(-)

diff --git a/cmake/modules/FindPipewire.cmake b/cmake/modules/FindPipewire.cmake
index 653a891eecdb9..c0d2c5704c38c 100644
--- a/cmake/modules/FindPipewire.cmake
+++ b/cmake/modules/FindPipewire.cmake
@@ -3,63 +3,62 @@
 # --------------
 # Finds the Pipewire library
 #
-# This will define the following variables::
-#
-#  PIPEWIRE_FOUND - system has the Pipewire library
-#  PIPEWIRE_INCLUDE_DIRS - the Pipewire include directory
-#  PIPEWIRE_LIBRARIES - the libraries needed to use Pipewire
-#  PIPEWIRE_DEFINITIONS - the definitions needed to use Pipewire
+# This will define the following targets:
 #
+#   ${APP_NAME_LC}::Pipewire    - The pipewire library
+
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
+  if(PKG_CONFIG_FOUND)
+    if(Pipewire_FIND_VERSION)
+      if(Pipewire_FIND_VERSION_EXACT)
+        set(Pipewire_FIND_SPEC "=${Pipewire_FIND_VERSION_COMPLETE}")
+      else()
+        set(Pipewire_FIND_SPEC ">=${Pipewire_FIND_VERSION_COMPLETE}")
+      endif()
+    endif()
 
-if(Pipewire_FIND_VERSION)
-  if(Pipewire_FIND_VERSION_EXACT)
-    set(Pipewire_FIND_SPEC "=${Pipewire_FIND_VERSION_COMPLETE}")
-  else()
-    set(Pipewire_FIND_SPEC ">=${Pipewire_FIND_VERSION_COMPLETE}")
+    pkg_check_modules(PC_PIPEWIRE libpipewire-0.3${Pipewire_FIND_SPEC} QUIET)
+    pkg_check_modules(PC_SPA libspa-0.2>=0.2 QUIET)
   endif()
-endif()
 
-find_package(PkgConfig)
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_PIPEWIRE libpipewire-0.3${Pipewire_FIND_SPEC} QUIET)
-  pkg_check_modules(PC_SPA libspa-0.2>=0.2 QUIET)
-endif()
+  find_path(PIPEWIRE_INCLUDE_DIR NAMES pipewire/pipewire.h
+                                 HINTS ${PC_PIPEWIRE_INCLUDEDIR}
+                                 PATH_SUFFIXES pipewire-0.3)
 
-find_path(PIPEWIRE_INCLUDE_DIR NAMES pipewire/pipewire.h
-                               HINTS ${PC_PIPEWIRE_INCLUDEDIR}
-                               PATH_SUFFIXES pipewire-0.3)
+  find_path(SPA_INCLUDE_DIR NAMES spa/support/plugin.h
+                            HINTS ${PC_SPA_INCLUDEDIR}
+                            PATH_SUFFIXES spa-0.2)
 
-find_path(SPA_INCLUDE_DIR NAMES spa/support/plugin.h
-                          HINTS ${PC_SPA_INCLUDEDIR}
-                          PATH_SUFFIXES spa-0.2)
+  find_library(PIPEWIRE_LIBRARY NAMES pipewire-0.3
+                                HITNS ${PC_PIPEWIRE_LIBDIR})
 
-find_library(PIPEWIRE_LIBRARY NAMES pipewire-0.3
-                              HITNS ${PC_PIPEWIRE_LIBDIR})
+  if(PC_PIPEWIRE_VERSION)
+    set(PIPEWIRE_VERSION_STRING ${PC_PIPEWIRE_VERSION})
+  elseif(PIPEWIRE_INCLUDE_DIR AND EXISTS ${PIPEWIRE_INCLUDE_DIR}/pipewire/version.h)
+    file(STRINGS ${PIPEWIRE_INCLUDE_DIR}/pipewire/version.h PIPEWIRE_STRINGS)
+    string(REGEX MATCH "#define PW_MAJOR \([0-9]+\)" MAJOR_VERSION "${PIPEWIRE_STRINGS}")
+    set(MAJOR_VERSION ${CMAKE_MATCH_1})
+    string(REGEX MATCH "#define PW_MINOR \([0-9]+\)" MINOR_VERSION "${PIPEWIRE_STRINGS}")
+    set(MINOR_VERSION ${CMAKE_MATCH_1})
+    string(REGEX MATCH "#define PW_MICRO \([0-9]+\)" MICRO_VERSION "${PIPEWIRE_STRINGS}")
+    set(MICRO_VERSION ${CMAKE_MATCH_1})
+    set(PIPEWIRE_VERSION_STRING ${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION})
+  endif()
 
-if(PC_PIPEWIRE_VERSION)
-  set(PIPEWIRE_VERSION_STRING ${PC_PIPEWIRE_VERSION})
-elseif(PIPEWIRE_INCLUDE_DIR AND EXISTS ${PIPEWIRE_INCLUDE_DIR}/pipewire/version.h)
-  file(STRINGS ${PIPEWIRE_INCLUDE_DIR}/pipewire/version.h PIPEWIRE_STRINGS)
-  string(REGEX MATCH "#define PW_MAJOR \([0-9]+\)" MAJOR_VERSION "${PIPEWIRE_STRINGS}")
-  set(MAJOR_VERSION ${CMAKE_MATCH_1})
-  string(REGEX MATCH "#define PW_MINOR \([0-9]+\)" MINOR_VERSION "${PIPEWIRE_STRINGS}")
-  set(MINOR_VERSION ${CMAKE_MATCH_1})
-  string(REGEX MATCH "#define PW_MICRO \([0-9]+\)" MICRO_VERSION "${PIPEWIRE_STRINGS}")
-  set(MICRO_VERSION ${CMAKE_MATCH_1})
-  set(PIPEWIRE_VERSION_STRING ${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION})
-endif()
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(Pipewire
+                                    REQUIRED_VARS PIPEWIRE_LIBRARY PIPEWIRE_INCLUDE_DIR SPA_INCLUDE_DIR
+                                    VERSION_VAR PIPEWIRE_VERSION_STRING)
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Pipewire
-                                  REQUIRED_VARS PIPEWIRE_LIBRARY PIPEWIRE_INCLUDE_DIR SPA_INCLUDE_DIR
-                                  VERSION_VAR PIPEWIRE_VERSION_STRING)
+  if(PIPEWIRE_FOUND)
+    list(APPEND AUDIO_BACKENDS_LIST "pipewire")
+    set(AUDIO_BACKENDS_LIST ${AUDIO_BACKENDS_LIST} PARENT_SCOPE)
 
-if(PIPEWIRE_FOUND)
-  set(PIPEWIRE_INCLUDE_DIRS ${PIPEWIRE_INCLUDE_DIR} ${SPA_INCLUDE_DIR})
-  set(PIPEWIRE_LIBRARIES ${PIPEWIRE_LIBRARY})
-  set(PIPEWIRE_DEFINITIONS -DHAS_PIPEWIRE=1)
-  list(APPEND AUDIO_BACKENDS_LIST "pipewire")
-  set(AUDIO_BACKENDS_LIST ${AUDIO_BACKENDS_LIST} PARENT_SCOPE)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${PIPEWIRE_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${PIPEWIRE_INCLUDE_DIR};${SPA_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_PIPEWIRE)
+  endif()
 endif()
-
-mark_as_advanced(PIPEWIRE_INCLUDE_DIR PIPEWIRE_LIBRARY)
diff --git a/xbmc/cores/AudioEngine/CMakeLists.txt b/xbmc/cores/AudioEngine/CMakeLists.txt
index f3eaf2711c9f1..fba64eda89eea 100644
--- a/xbmc/cores/AudioEngine/CMakeLists.txt
+++ b/xbmc/cores/AudioEngine/CMakeLists.txt
@@ -70,7 +70,7 @@ if(TARGET ${APP_NAME_LC}::PulseAudio)
   list(APPEND HEADERS Sinks/AESinkPULSE.h)
 endif()
 
-if(PIPEWIRE_FOUND)
+if(TARGET ${APP_NAME_LC}::Pipewire)
   list(APPEND SOURCES Sinks/pipewire/AESinkPipewire.cpp
                       Sinks/pipewire/Pipewire.cpp
                       Sinks/pipewire/PipewireContext.cpp

From 986daaa3130e84116fce6b584966e591e13b5757 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 18:55:26 +1000
Subject: [PATCH 58/76] [cmake][modules] FindPython update to target usage

---
 cmake/modules/FindPython.cmake                | 115 +++++++++---------
 xbmc/interfaces/python/test/CMakeLists.txt    |   2 +-
 .../network/httprequesthandler/CMakeLists.txt |   4 +-
 .../httprequesthandler/python/CMakeLists.txt  |   2 +-
 4 files changed, 62 insertions(+), 61 deletions(-)

diff --git a/cmake/modules/FindPython.cmake b/cmake/modules/FindPython.cmake
index 56d320e1a9ea7..3fc61da50c290 100644
--- a/cmake/modules/FindPython.cmake
+++ b/cmake/modules/FindPython.cmake
@@ -16,75 +16,76 @@
 #
 # --------
 #
-# This module will define the following variables:
-#
-# PYTHON_FOUND - system has PYTHON
-# PYTHON_VERSION - Python version number (Major.Minor)
-# PYTHON_INCLUDE_DIRS - the python include directory
-# PYTHON_LIBRARIES - The python libraries
-# PYTHON_LDFLAGS - Python provided link options
-#
-# --------
+# This will define the following targets:
 #
+#   ${APP_NAME_LC}::Python - The Python library
 
-# for Depends/Windows builds, set search root dir to libdir path
-if(KODI_DEPENDSBUILD
-   OR CMAKE_SYSTEM_NAME STREQUAL WINDOWS
-   OR CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
-  set(Python3_USE_STATIC_LIBS TRUE)
-  set(Python3_ROOT_DIR ${libdir})
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  # for Depends/Windows builds, set search root dir to libdir path
+  if(KODI_DEPENDSBUILD
+     OR CMAKE_SYSTEM_NAME STREQUAL WINDOWS
+     OR CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
+    set(Python3_USE_STATIC_LIBS TRUE)
+    set(Python3_ROOT_DIR ${libdir})
 
-  if(KODI_DEPENDSBUILD)
-    # Force set to tools/depends python version
-    set(PYTHON_VER 3.11)
+    if(KODI_DEPENDSBUILD)
+      # Force set to tools/depends python version
+      set(PYTHON_VER 3.11)
+    endif()
   endif()
-endif()
 
-# Provide root dir to search for Python if provided
-if(PYTHON_PATH)
-  set(Python3_ROOT_DIR ${PYTHON_PATH})
+  # Provide root dir to search for Python if provided
+  if(PYTHON_PATH)
+    set(Python3_ROOT_DIR ${PYTHON_PATH})
 
-  # unset cache var so we can generate again with a different dir (or none) if desired
-  unset(PYTHON_PATH CACHE)
-endif()
+    # unset cache var so we can generate again with a different dir (or none) if desired
+    unset(PYTHON_PATH CACHE)
+  endif()
 
-# Set specific version of Python to find if provided
-if(PYTHON_VER)
-  set(VERSION ${PYTHON_VER})
-  set(EXACT_VER "EXACT")
+  # Set specific version of Python to find if provided
+  if(PYTHON_VER)
+    set(VERSION ${PYTHON_VER})
+    set(EXACT_VER "EXACT")
 
-  # unset cache var so we can generate again with a different ver (or none) if desired
-  unset(PYTHON_VER CACHE)
-endif()
+    # unset cache var so we can generate again with a different ver (or none) if desired
+    unset(PYTHON_VER CACHE)
+  endif()
+
+  find_package(Python3 ${VERSION} ${EXACT_VER} COMPONENTS Development)
 
-find_package(Python3 ${VERSION} ${EXACT_VER} COMPONENTS Development)
+  if(Python3_FOUND)
+    if(KODI_DEPENDSBUILD)
+      find_library(EXPAT_LIBRARY expat REQUIRED)
+      find_library(FFI_LIBRARY ffi REQUIRED)
+      find_library(GMP_LIBRARY gmp REQUIRED)
+      find_library(INTL_LIBRARY intl REQUIRED)
+      find_library(LZMA_LIBRARY lzma REQUIRED)
 
-if(KODI_DEPENDSBUILD)
-  find_library(FFI_LIBRARY ffi REQUIRED)
-  find_library(EXPAT_LIBRARY expat REQUIRED)
-  find_library(INTL_LIBRARY intl REQUIRED)
-  find_library(GMP_LIBRARY gmp REQUIRED)
-  find_library(LZMA_LIBRARY lzma REQUIRED)
+      if(NOT CORE_SYSTEM_NAME STREQUAL android)
+        set(PYTHON_DEP_LIBRARIES pthread dl util)
+        if(CORE_SYSTEM_NAME STREQUAL linux)
+          # python archive built via depends requires librt for _posixshmem library
+          list(APPEND PYTHON_DEP_LIBRARIES rt)
+        endif()
+      endif()
 
-  if(NOT CORE_SYSTEM_NAME STREQUAL android)
-    set(PYTHON_DEP_LIBRARIES pthread dl util)
-    if(CORE_SYSTEM_NAME STREQUAL linux)
-      # python archive built via depends requires librt for _posixshmem library
-      list(APPEND PYTHON_DEP_LIBRARIES rt)
+      set(Py_LINK_LIBRARIES ${EXPAT_LIBRARY} ${FFI_LIBRARY} ${GMP_LIBRARY} ${INTL_LIBRARY} ${LZMA_LIBRARY} ${PYTHON_DEP_LIBRARIES})
     endif()
-  endif()
 
-  list(APPEND Python3_LIBRARIES ${LZMA_LIBRARY} ${FFI_LIBRARY} ${EXPAT_LIBRARY} ${INTL_LIBRARY} ${GMP_LIBRARY} ${PYTHON_DEP_LIBRARIES})
-endif()
+    # We use this all over the place. Maybe it would be nice to keep it as a TARGET property
+    # but for now a cached variable will do
+    set(PYTHON_VERSION "${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}" CACHE INTERNAL "" FORCE)
 
-if(Python3_FOUND)
-  list(APPEND PYTHON_DEFINITIONS -DHAS_PYTHON=1)
-  # These are all set for easy integration with the rest of our build system
-  set(PYTHON_FOUND ${Python3_FOUND})
-  set(PYTHON_INCLUDE_DIRS ${Python3_INCLUDE_DIRS})
-  set(PYTHON_LIBRARIES ${Python3_LIBRARIES})
-  set(PYTHON_VERSION "${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}" CACHE INTERNAL "" FORCE)
-  set(PYTHON_LDFLAGS ${Python3_LINK_OPTIONS})
-endif()
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${Python3_LIBRARIES}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${Python3_INCLUDE_DIRS}"
+                                                                     INTERFACE_LINK_OPTIONS "${Python3_LINK_OPTIONS}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAS_PYTHON)
 
-mark_as_advanced(PYTHON_EXECUTABLE PYTHON_VERSION PYTHON_INCLUDE_DIRS PYTHON_LDFLAGS LZMA_LIBRARY FFI_LIBRARY EXPAT_LIBRARY INTL_LIBRARY GMP_LIBRARY)
+    if(Py_LINK_LIBRARIES)
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_LINK_LIBRARIES "${Py_LINK_LIBRARIES}")
+    endif()
+  endif()
+endif()
diff --git a/xbmc/interfaces/python/test/CMakeLists.txt b/xbmc/interfaces/python/test/CMakeLists.txt
index ec38a51931c74..b916358455671 100644
--- a/xbmc/interfaces/python/test/CMakeLists.txt
+++ b/xbmc/interfaces/python/test/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(PYTHON_FOUND)
+if(TARGET ${APP_NAME_LC}::Python)
   set(SOURCES TestSwig.cpp)
 
   core_add_test_library(python_test)
diff --git a/xbmc/network/httprequesthandler/CMakeLists.txt b/xbmc/network/httprequesthandler/CMakeLists.txt
index d46d75b485458..c78c5b4f741f7 100644
--- a/xbmc/network/httprequesthandler/CMakeLists.txt
+++ b/xbmc/network/httprequesthandler/CMakeLists.txt
@@ -9,7 +9,7 @@ if(TARGET ${APP_NAME_LC}::MicroHttpd)
               HTTPWebinterfaceHandler.cpp
               IHTTPRequestHandler.cpp)
 
-  if(PYTHON_FOUND)
+  if(TARGET ${APP_NAME_LC}::Python)
     list(APPEND SOURCES HTTPPythonHandler.cpp)
   endif()
 
@@ -22,7 +22,7 @@ if(TARGET ${APP_NAME_LC}::MicroHttpd)
               HTTPWebinterfaceAddonsHandler.h
               HTTPWebinterfaceHandler.h
               IHTTPRequestHandler.h)
-  if(PYTHON_FOUND)
+  if(TARGET ${APP_NAME_LC}::Python)
     list(APPEND HEADERS HTTPPythonHandler.h)
   endif()
 
diff --git a/xbmc/network/httprequesthandler/python/CMakeLists.txt b/xbmc/network/httprequesthandler/python/CMakeLists.txt
index b7b4c43a6a16d..23f327832854a 100644
--- a/xbmc/network/httprequesthandler/python/CMakeLists.txt
+++ b/xbmc/network/httprequesthandler/python/CMakeLists.txt
@@ -1,4 +1,4 @@
-if(TARGET ${APP_NAME_LC}::MicroHttpd AND PYTHON_FOUND)
+if(TARGET ${APP_NAME_LC}::MicroHttpd AND TARGET ${APP_NAME_LC}::Python)
   set(SOURCES HTTPPythonInvoker.cpp
               HTTPPythonWsgiInvoker.cpp)
 

From 499cb0bc6572ee2a89e2c97b3b12db867febc097 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 19:36:44 +1000
Subject: [PATCH 59/76] [cmake][modules] FindVAAPI update to target usage

---
 cmake/modules/FindVAAPI.cmake                 | 124 ++++++++++--------
 .../DVDCodecs/Video/CMakeLists.txt            |   2 +-
 .../VideoRenderers/HwDecRender/CMakeLists.txt |   2 +-
 3 files changed, 73 insertions(+), 55 deletions(-)

diff --git a/cmake/modules/FindVAAPI.cmake b/cmake/modules/FindVAAPI.cmake
index 90c4bf6e5cd77..68d08bddfb27b 100644
--- a/cmake/modules/FindVAAPI.cmake
+++ b/cmake/modules/FindVAAPI.cmake
@@ -3,66 +3,84 @@
 # ---------
 # Finds the VAAPI library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# VAAPI_FOUND - system has VAAPI
-# VAAPI_INCLUDE_DIRS - the VAAPI include directory
-# VAAPI_LIBRARIES - the VAAPI libraries
-# VAAPI_DEFINITIONS - the VAAPI definitions
+#   ${APP_NAME_LC}::VAAPI   - The VAAPI library
 
-find_package(PkgConfig)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
 
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_VAAPI libva libva-drm libva-wayland libva-x11 QUIET)
-endif()
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_VAAPI libva libva-drm libva-wayland libva-x11 QUIET)
+  endif()
 
-set(REQUIRED_VARS "VAAPI_libva_LIBRARY" "VAAPI_libva-drm_LIBRARY" "VAAPI_libva_INCLUDE_DIR" "VAAPI_libva-drm_INCLUDE_DIR")
+  set(REQUIRED_VARS "VAAPI_libva_LIBRARY" "VAAPI_libva-drm_LIBRARY" "VAAPI_libva_INCLUDE_DIR" "VAAPI_libva-drm_INCLUDE_DIR")
 
-find_path(VAAPI_libva_INCLUDE_DIR va/va.h
-                            HINTS ${PC_VAAPI_libva_INCLUDEDIR})
-find_library(VAAPI_libva_LIBRARY NAMES va
-                                 HINTS ${PC_VAAPI_libva_LIBDIR})
-find_path(VAAPI_libva-drm_INCLUDE_DIR va/va_drm.h
-                                HINTS ${PC_VAAPI_libva-drm_INCLUDEDIR})
-find_library(VAAPI_libva-drm_LIBRARY NAMES va-drm
-                                     HINTS ${PC_VAAPI_libva-drm_LIBDIR})
-if("wayland" IN_LIST CORE_PLATFORM_NAME_LC)
-  find_path(VAAPI_libva-wayland_INCLUDE_DIR va/va_wayland.h
-                                      HINTS ${PC_VAAPI_libva-wayland_INCLUDEDIR})
-  find_library(VAAPI_libva-wayland_LIBRARY NAMES va-wayland
-                                           HINTS ${PC_VAAPI_libva-wayland_LIBDIR})
-  list(APPEND REQUIRED_VARS "VAAPI_libva-wayland_INCLUDE_DIR" "VAAPI_libva-wayland_LIBRARY")
-endif()
-if("x11" IN_LIST CORE_PLATFORM_NAME_LC)
-  find_path(VAAPI_libva-x11_INCLUDE_DIR va/va_x11.h
-                                  HINTS ${PC_VAAPI_libva-x11_INCLUDEDIR})
-  find_library(VAAPI_libva-x11_LIBRARY NAMES va-x11
-                                       HINTS ${PC_VAAPI_libva-x11_LIBDIR})
-  list(APPEND REQUIRED_VARS "VAAPI_libva-x11_INCLUDE_DIR" "VAAPI_libva-x11_LIBRARY")
-endif()
+  find_path(VAAPI_libva_INCLUDE_DIR va/va.h
+                              HINTS ${PC_VAAPI_libva_INCLUDEDIR})
+  find_library(VAAPI_libva_LIBRARY NAMES va
+                                   HINTS ${PC_VAAPI_libva_LIBDIR})
+  find_path(VAAPI_libva-drm_INCLUDE_DIR va/va_drm.h
+                                  HINTS ${PC_VAAPI_libva-drm_INCLUDEDIR})
+  find_library(VAAPI_libva-drm_LIBRARY NAMES va-drm
+                                       HINTS ${PC_VAAPI_libva-drm_LIBDIR})
+  if("wayland" IN_LIST CORE_PLATFORM_NAME_LC)
+    find_path(VAAPI_libva-wayland_INCLUDE_DIR va/va_wayland.h
+                                        HINTS ${PC_VAAPI_libva-wayland_INCLUDEDIR})
+    find_library(VAAPI_libva-wayland_LIBRARY NAMES va-wayland
+                                             HINTS ${PC_VAAPI_libva-wayland_LIBDIR})
+    list(APPEND REQUIRED_VARS "VAAPI_libva-wayland_INCLUDE_DIR" "VAAPI_libva-wayland_LIBRARY")
+  endif()
+  if("x11" IN_LIST CORE_PLATFORM_NAME_LC)
+    find_path(VAAPI_libva-x11_INCLUDE_DIR va/va_x11.h
+                                    HINTS ${PC_VAAPI_libva-x11_INCLUDEDIR})
+    find_library(VAAPI_libva-x11_LIBRARY NAMES va-x11
+                                         HINTS ${PC_VAAPI_libva-x11_LIBDIR})
+    list(APPEND REQUIRED_VARS "VAAPI_libva-x11_INCLUDE_DIR" "VAAPI_libva-x11_LIBRARY")
+  endif()
 
-if(PC_VAAPI_libva_VERSION)
-  set(VAAPI_VERSION_STRING ${PC_VAAPI_libva_VERSION})
-elseif(VAAPI_INCLUDE_DIR AND EXISTS "${VAAPI_INCLUDE_DIR}/va/va_version.h")
-  file(STRINGS "${VAAPI_INCLUDE_DIR}/va/va_version.h" vaapi_version_str REGEX "^#define[\t ]+VA_VERSION_S[\t ]+\".*\".*")
-  string(REGEX REPLACE "^#define[\t ]+VA_VERSION_S[\t ]+\"([^\"]+)\".*" "\\1" VAAPI_VERSION_STRING "${vaapi_version_str}")
-  unset(vaapi_version_str)
-endif()
+  if(PC_VAAPI_libva_VERSION)
+    set(VAAPI_VERSION_STRING ${PC_VAAPI_libva_VERSION})
+  elseif(VAAPI_INCLUDE_DIR AND EXISTS "${VAAPI_INCLUDE_DIR}/va/va_version.h")
+    file(STRINGS "${VAAPI_INCLUDE_DIR}/va/va_version.h" vaapi_version_str REGEX "^#define[\t ]+VA_VERSION_S[\t ]+\".*\".*")
+    string(REGEX REPLACE "^#define[\t ]+VA_VERSION_S[\t ]+\"([^\"]+)\".*" "\\1" VAAPI_VERSION_STRING "${vaapi_version_str}")
+    unset(vaapi_version_str)
+  endif()
 
-if(NOT VAAPI_FIND_VERSION)
-  set(VAAPI_FIND_VERSION 0.39.0)
-endif()
+  if(NOT VAAPI_FIND_VERSION)
+    set(VAAPI_FIND_VERSION 0.39.0)
+  endif()
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(VAAPI
-                                  REQUIRED_VARS ${REQUIRED_VARS}
-                                  VERSION_VAR VAAPI_VERSION_STRING)
+  include(FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(VAAPI
+                                    REQUIRED_VARS ${REQUIRED_VARS}
+                                    VERSION_VAR VAAPI_VERSION_STRING)
 
-if(VAAPI_FOUND)
-  set(VAAPI_INCLUDE_DIRS ${VAAPI_INCLUDE_DIR} ${VAAPI_DRM_INCLUDE_DIR} ${VAAPI_WAYLAND_INCLUDE_DIR} ${VAAPI_X11_INCLUDE_DIR})
-  set(VAAPI_LIBRARIES ${VAAPI_libva_LIBRARY} ${VAAPI_libva-drm_LIBRARY} ${VAAPI_libva-wayland_LIBRARY} ${VAAPI_libva-x11_LIBRARY})
-  set(VAAPI_DEFINITIONS -DHAVE_LIBVA=1)
-endif()
+  if(VAAPI_FOUND)
+    if(VAAPI_libva-x11_LIBRARY)
+      add_library(${APP_NAME_LC}::va-x11 UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::va-x11 PROPERTIES
+                                                   IMPORTED_LOCATION "${VAAPI_libva-x11_LIBRARY}"
+                                                   INTERFACE_INCLUDE_DIRECTORIES "${VAAPI_libva-x11_INCLUDE_DIR}")
+    endif()
+
+    if(VAAPI_libva-wayland_LIBRARY)
+      add_library(${APP_NAME_LC}::va-wayland UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::va-wayland PROPERTIES
+                                                       IMPORTED_LOCATION "${VAAPI_libva-wayland_LIBRARY}"
+                                                       INTERFACE_INCLUDE_DIRECTORIES "${VAAPI_libva-wayland_INCLUDE_DIR}")
+    endif()
 
-mark_as_advanced(VAAPI_libva_INCLUDE_DIR VAAPI_libva-drm_INCLUDE_DIR VAAPI_libva-wayland_INCLUDE_DIR VAAPI_libva-x11_INCLUDE_DIR
-                 VAAPI_libva_LIBRARY VAAPI_libva-drm_LIBRARY VAAPI_libva-wayland_LIBRARY VAAPI_libva-x11_LIBRARY)
+    add_library(${APP_NAME_LC}::va-drm UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::va-drm PROPERTIES
+                                                     IMPORTED_LOCATION "${VAAPI_libva-drm_LIBRARY}"
+                                                     INTERFACE_INCLUDE_DIRECTORIES "${VAAPI_libva-drm_INCLUDE_DIR}")
+
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${VAAPI_libva_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${VAAPI_libva_INCLUDE_DIR}"
+                                                                     INTERFACE_LINK_LIBRARIES "${APP_NAME_LC}::va-drm;$<TARGET_NAME_IF_EXISTS:${APP_NAME_LC}::va-wayland>;$<TARGET_NAME_IF_EXISTS:${APP_NAME_LC}::va-x11>"
+                                                                     INTERFACE_COMPILE_DEFINITIONS "HAVE_LIBVA")
+  endif()
+endif()
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt b/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt
index d21f6cc99567a..6790d8b0abda3 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt
@@ -21,7 +21,7 @@ if(TARGET ${APP_NAME_LC}::VDPAU)
   list(APPEND HEADERS VDPAU.h)
 endif()
 
-if(VAAPI_FOUND)
+if(TARGET ${APP_NAME_LC}::VAAPI)
   list(APPEND SOURCES VAAPI.cpp)
   list(APPEND HEADERS VAAPI.h)
 endif()
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
index 14bd61c5b8550..495101203c78f 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
@@ -5,7 +5,7 @@ if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
   list(APPEND HEADERS DXVAEnumeratorHD.h)
 endif()
 
-if(VAAPI_FOUND)
+if(TARGET ${APP_NAME_LC}::VAAPI)
   if(TARGET ${APP_NAME_LC}::OpenGl)
     list(APPEND SOURCES RendererVAAPIGL.cpp)
     list(APPEND HEADERS RendererVAAPIGL.h)

From 2030da5a76a214c151d4e7cd1b35abb43bacbe5f Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 19:59:30 +1000
Subject: [PATCH 60/76] [cmake][modules/buildtools] Separate WaylandPP scanner
 to individual find module

---
 .../buildtools/FindWaylandPPScanner.cmake     | 34 +++++++++++++++++++
 1 file changed, 34 insertions(+)
 create mode 100644 cmake/modules/buildtools/FindWaylandPPScanner.cmake

diff --git a/cmake/modules/buildtools/FindWaylandPPScanner.cmake b/cmake/modules/buildtools/FindWaylandPPScanner.cmake
new file mode 100644
index 0000000000000..ff80dbd3f4c27
--- /dev/null
+++ b/cmake/modules/buildtools/FindWaylandPPScanner.cmake
@@ -0,0 +1,34 @@
+# FindWaylandPPScanner
+# --------
+# Find the WaylandPPScanner Tool
+#
+# This will define the following target:
+#
+#   wayland::waylandppscanner - The FXC compiler
+
+if(NOT wayland::waylandppscanner)
+
+  find_package(PkgConfig)
+  pkg_check_modules(PC_WAYLANDPP_SCANNER wayland-scanner++ QUIET)
+
+  if(PC_WAYLANDPP_SCANNER_FOUND)
+    pkg_get_variable(PC_WAYLANDPP_SCANNER wayland-scanner++ wayland_scannerpp)
+  endif()
+
+  find_program(WAYLANDPP_SCANNER wayland-scanner++ HINTS ${PC_WAYLANDPP_SCANNER})
+
+  if(WAYLANDPP_SCANNER)
+
+    include(FindPackageMessage)
+    find_package_message(WaylandPPScanner "Found WaylandPP Scanner: ${WAYLANDPP_SCANNER}" "[${WAYLANDPP_SCANNER}]")
+
+    add_executable(wayland::waylandppscanner IMPORTED)
+    set_target_properties(wayland::waylandppscanner PROPERTIES
+                                                    IMPORTED_LOCATION "${WAYLANDPP_SCANNER}"
+                                                    FOLDER "External Projects")
+  else()
+    if(WaylandPPScanner_FIND_REQUIRED)
+      message(FATAL_ERROR "Could NOT find WaylandPP Scanner")
+    endif()
+  endif()
+endif()

From 4d63ae3fdaa5df6eea873d1acf386e1a5857a7db Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 20:00:05 +1000
Subject: [PATCH 61/76] [cmake][modules] FindWaylandpp update to target usage

---
 cmake/modules/FindWaylandpp.cmake      | 174 +++++++++++++------------
 cmake/scripts/linux/ExtraTargets.cmake |   5 +-
 cmake/scripts/webos/ExtraTargets.cmake |   5 +-
 3 files changed, 97 insertions(+), 87 deletions(-)

diff --git a/cmake/modules/FindWaylandpp.cmake b/cmake/modules/FindWaylandpp.cmake
index 7b28892a04e65..cc9d0827fc906 100644
--- a/cmake/modules/FindWaylandpp.cmake
+++ b/cmake/modules/FindWaylandpp.cmake
@@ -2,98 +2,106 @@
 # -------------
 # Finds the waylandpp library
 #
-# This will define the following variables::
+# This will define the following target:
 #
-# WAYLANDPP_FOUND        - the system has waylandpp
-# WAYLANDPP_INCLUDE_DIRS - the waylandpp include directory
-# WAYLANDPP_LIBRARIES    - the waylandpp libraries
-# WAYLANDPP_DEFINITIONS  - the waylandpp definitions
-# WAYLANDPP_SCANNER      - path to wayland-scanner++
-
-find_package(PkgConfig)
-pkg_check_modules(PC_WAYLANDPP wayland-client++ wayland-egl++ wayland-cursor++ QUIET)
-
-if(PC_WAYLANDPP_FOUND)
-  pkg_get_variable(PC_WAYLANDPP_PKGDATADIR wayland-client++ pkgdatadir)
-else()
-  message(SEND_ERROR "wayland-client++ not found via pkg-config")
-endif()
+#   ${APP_NAME_LC}::Waylandpp   - The waylandpp library
 
-pkg_check_modules(PC_WAYLANDPP_SCANNER wayland-scanner++ QUIET)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  find_package(PkgConfig)
+  pkg_check_modules(PC_WAYLANDPP wayland-client++ wayland-egl++ wayland-cursor++ QUIET)
 
-if(PC_WAYLANDPP_SCANNER_FOUND)
-  pkg_get_variable(PC_WAYLANDPP_SCANNER wayland-scanner++ wayland_scannerpp)
-else()
-  message(SEND_ERROR "wayland-scanner++ not found via pkg-config")
-endif()
+  if(PC_WAYLANDPP_FOUND)
+    pkg_get_variable(PC_WAYLANDPP_PKGDATADIR wayland-client++ pkgdatadir)
+  else()
+    message(SEND_ERROR "wayland-client++ not found via pkg-config")
+  endif()
 
-find_path(WAYLANDPP_INCLUDE_DIR wayland-client.hpp HINTS ${PC_WAYLANDPP_INCLUDEDIR})
+  find_path(WAYLANDPP_INCLUDE_DIR wayland-client.hpp HINTS ${PC_WAYLANDPP_INCLUDEDIR})
+
+  find_library(WAYLANDPP_CLIENT_LIBRARY NAMES wayland-client++
+                                        HINTS ${PC_WAYLANDPP_LIBRARY_DIRS})
+
+  find_library(WAYLANDPP_CURSOR_LIBRARY NAMES wayland-cursor++
+                                        HINTS ${PC_WAYLANDPP_LIBRARY_DIRS})
+
+  find_library(WAYLANDPP_EGL_LIBRARY NAMES wayland-egl++
+                                     HINTS ${PC_WAYLANDPP_LIBRARY_DIRS})
+
+  if(KODI_DEPENDSBUILD)
+    pkg_check_modules(PC_WAYLANDC wayland-client wayland-egl wayland-cursor QUIET)
+
+    if(PREFER_TOOLCHAIN_PATH)
+      set(WAYLAND_SEARCH_PATH ${PREFER_TOOLCHAIN_PATH}
+                              NO_DEFAULT_PATH
+                              PATH_SUFFIXES usr/lib)
+    else()
+      set(WAYLAND_SEARCH_PATH ${PC_WAYLANDC_LIBRARY_DIRS})
+    endif()
+
+    find_library(WAYLANDC_CLIENT_LIBRARY NAMES wayland-client
+                                         HINTS ${WAYLAND_SEARCH_PATH}
+                                         REQUIRED)
+    find_library(WAYLANDC_CURSOR_LIBRARY NAMES wayland-cursor
+                                         HINTS ${WAYLAND_SEARCH_PATH}
+                                         REQUIRED)
+    find_library(WAYLANDC_EGL_LIBRARY NAMES wayland-egl
+                                      HINTS ${WAYLAND_SEARCH_PATH}
+                                      REQUIRED)
+
+    set(WAYLANDPP_STATIC_DEPS ${WAYLANDC_CLIENT_LIBRARY}
+                              ${WAYLANDC_CURSOR_LIBRARY}
+                              ${WAYLANDC_EGL_LIBRARY})
+  endif()
 
-find_library(WAYLANDPP_CLIENT_LIBRARY NAMES wayland-client++
-                                      HINTS ${PC_WAYLANDPP_LIBRARY_DIRS})
+  # Promote to cache variables so all code can access it
+  set(WAYLANDPP_PROTOCOLS_DIR "${PC_WAYLANDPP_PKGDATADIR}/protocols" CACHE INTERNAL "")
 
-find_library(WAYLANDPP_CURSOR_LIBRARY NAMES wayland-cursor++
-                                      HINTS ${PC_WAYLANDPP_LIBRARY_DIRS})
+  include (FindPackageHandleStandardArgs)
+  find_package_handle_standard_args(Waylandpp
+                                    REQUIRED_VARS WAYLANDPP_INCLUDE_DIR
+                                                  WAYLANDPP_CLIENT_LIBRARY
+                                                  WAYLANDPP_CURSOR_LIBRARY
+                                                  WAYLANDPP_EGL_LIBRARY
+                                    VERSION_VAR WAYLANDPP_wayland-client++_VERSION)
 
-find_library(WAYLANDPP_EGL_LIBRARY NAMES wayland-egl++
-                                   HINTS ${PC_WAYLANDPP_LIBRARY_DIRS})
+  if(WAYLANDPP_FOUND)
 
-if(KODI_DEPENDSBUILD)
-  pkg_check_modules(PC_WAYLANDC wayland-client wayland-egl wayland-cursor QUIET)
+    find_package(WaylandPPScanner REQUIRED)
 
-  if(PREFER_TOOLCHAIN_PATH)
-    set(WAYLAND_SEARCH_PATH ${PREFER_TOOLCHAIN_PATH}
-                            NO_DEFAULT_PATH
-                            PATH_SUFFIXES usr/lib)
-  else()
-    set(WAYLAND_SEARCH_PATH ${PC_WAYLANDC_LIBRARY_DIRS})
-  endif()
+    set(WAYLANDPP_INCLUDE_DIRS ${WAYLANDPP_INCLUDE_DIR})
+    set(WAYLANDPP_LIBRARIES 
+                            ${WAYLANDPP_STATIC_DEPS})
 
-  find_library(WAYLANDC_CLIENT_LIBRARY NAMES wayland-client
-                                       HINTS ${WAYLAND_SEARCH_PATH}
-                                       REQUIRED)
-  find_library(WAYLANDC_CURSOR_LIBRARY NAMES wayland-cursor
-                                       HINTS ${WAYLAND_SEARCH_PATH}
-                                       REQUIRED)
-  find_library(WAYLANDC_EGL_LIBRARY NAMES wayland-egl
-                                    HINTS ${WAYLAND_SEARCH_PATH}
-                                    REQUIRED)
-
-  set(WAYLANDPP_STATIC_DEPS ${WAYLANDC_CLIENT_LIBRARY}
-                            ${WAYLANDC_CURSOR_LIBRARY}
-                            ${WAYLANDC_EGL_LIBRARY})
-endif()
+    if(KODI_DEPENDSBUILD)
+      add_library(${APP_NAME_LC}::waylandc-egl UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::waylandc-egl PROPERTIES
+                                                          IMPORTED_LOCATION "${WAYLANDC_EGL_LIBRARY}")
 
-# Promote to cache variables so all code can access it
-set(WAYLANDPP_PROTOCOLS_DIR "${PC_WAYLANDPP_PKGDATADIR}/protocols" CACHE INTERNAL "")
-
-# wayland-scanner++ is from native/host system in case of cross-compilation, so
-# it's ok if we don't find it with pkgconfig
-find_program(WAYLANDPP_SCANNER wayland-scanner++ HINTS ${PC_WAYLANDPP_SCANNER})
-
-include (FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Waylandpp
-                                  REQUIRED_VARS WAYLANDPP_INCLUDE_DIR
-                                                WAYLANDPP_CLIENT_LIBRARY
-                                                WAYLANDPP_CURSOR_LIBRARY
-                                                WAYLANDPP_EGL_LIBRARY
-                                                WAYLANDPP_SCANNER
-                                  VERSION_VAR WAYLANDPP_wayland-client++_VERSION)
-
-if(WAYLANDPP_FOUND)
-  set(WAYLANDPP_INCLUDE_DIRS ${WAYLANDPP_INCLUDE_DIR})
-  set(WAYLANDPP_LIBRARIES ${WAYLANDPP_CLIENT_LIBRARY}
-                          ${WAYLANDPP_CURSOR_LIBRARY}
-                          ${WAYLANDPP_EGL_LIBRARY}
-                          ${WAYLANDPP_STATIC_DEPS})
-  set(WAYLANDPP_DEFINITIONS -DHAVE_WAYLAND=1)
-endif()
+      add_library(${APP_NAME_LC}::waylandc-cursor UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::waylandc-cursor PROPERTIES
+                                                             IMPORTED_LOCATION "${WAYLANDC_CURSOR_LIBRARY}")
+
+      add_library(${APP_NAME_LC}::waylandc-client UNKNOWN IMPORTED)
+      set_target_properties(${APP_NAME_LC}::waylandc-client PROPERTIES
+                                                             IMPORTED_LOCATION "${WAYLANDC_CLIENT_LIBRARY}")
+    endif()
+
+    add_library(${APP_NAME_LC}::waylandpp-egl UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::waylandpp-egl PROPERTIES
+                                                        IMPORTED_LOCATION "${WAYLANDPP_EGL_LIBRARY}"
+                                                        INTERFACE_INCLUDE_DIRECTORIES "${WAYLANDPP_INCLUDE_DIR}")
+
+    add_library(${APP_NAME_LC}::waylandpp-cursor UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::waylandpp-cursor PROPERTIES
+                                                           IMPORTED_LOCATION "${WAYLANDPP_CURSOR_LIBRARY}"
+                                                           INTERFACE_INCLUDE_DIRECTORIES "${WAYLANDPP_INCLUDE_DIR}")
 
-mark_as_advanced(WAYLANDPP_INCLUDE_DIR
-                 WAYLANDPP_CLIENT_LIBRARY
-                 WAYLANDC_CLIENT_LIBRARY
-                 WAYLANDPP_CURSOR_LIBRARY
-                 WAYLANDC_CURSOR_LIBRARY
-                 WAYLANDPP_EGL_LIBRARY
-                 WAYLANDC_EGL_LIBRARY
-                 WAYLANDPP_SCANNER)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${WAYLANDPP_CLIENT_LIBRARY}"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${WAYLANDPP_INCLUDE_DIR}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS HAVE_WAYLAND
+                                                                     INTERFACE_LINK_LIBRARIES "${APP_NAME_LC}::waylandpp-cursor;${APP_NAME_LC}::waylandpp-egl;$<TARGET_NAME_IF_EXISTS:${APP_NAME_LC}::waylandc-egl>;$<TARGET_NAME_IF_EXISTS:${APP_NAME_LC}::waylandc-cursor>;$<TARGET_NAME_IF_EXISTS:${APP_NAME_LC}::waylandc-client>")
+
+  endif()
+endif()
diff --git a/cmake/scripts/linux/ExtraTargets.cmake b/cmake/scripts/linux/ExtraTargets.cmake
index f402f7c491126..37156923b9c8d 100644
--- a/cmake/scripts/linux/ExtraTargets.cmake
+++ b/cmake/scripts/linux/ExtraTargets.cmake
@@ -24,8 +24,9 @@ if("wayland" IN_LIST CORE_PLATFORM_NAME_LC)
                     "${WAYLAND_PROTOCOLS_DIR}/unstable/idle-inhibit/idle-inhibit-unstable-v1.xml")
 
   add_custom_command(OUTPUT "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.hpp" "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.cpp"
-                     COMMAND "${WAYLANDPP_SCANNER}" ${PROTOCOL_XMLS} "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.hpp" "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.cpp"
-                     DEPENDS "${WAYLANDPP_SCANNER}" ${PROTOCOL_XMLS}
+                     COMMAND wayland::waylandppscanner
+                     ARGS ${PROTOCOL_XMLS} "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.hpp" "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.cpp"
+                     DEPENDS wayland::waylandppscanner ${PROTOCOL_XMLS}
                      COMMENT "Generating wayland-protocols C++ wrappers")
 
   if("webos" IN_LIST CORE_PLATFORM_NAME_LC)
diff --git a/cmake/scripts/webos/ExtraTargets.cmake b/cmake/scripts/webos/ExtraTargets.cmake
index 3380c6a3be656..46c78edf624dc 100644
--- a/cmake/scripts/webos/ExtraTargets.cmake
+++ b/cmake/scripts/webos/ExtraTargets.cmake
@@ -3,8 +3,9 @@ set(WEBOS_PROTOCOL_XMLS "${WAYLANDPROTOCOLSWEBOS_PROTOCOLSDIR}/webos-shell.xml"
                         "${WAYLANDPROTOCOLSWEBOS_PROTOCOLSDIR}/webos-foreign.xml"
 )
 add_custom_command(OUTPUT "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.hpp" "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.cpp"
-                  COMMAND "${WAYLANDPP_SCANNER}" ${WEBOS_PROTOCOL_XMLS} "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.hpp" "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.cpp"
-                  DEPENDS "${WAYLANDPP_SCANNER}" ${WEBOS_PROTOCOL_XMLS}
+                  COMMAND wayland::waylandppscanner
+                  ARGS ${WEBOS_PROTOCOL_XMLS} "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.hpp" "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.cpp"
+                  DEPENDS wayland::waylandppscanner ${WEBOS_PROTOCOL_XMLS}
                   COMMENT "Generating wayland-webos C++ wrappers")
 add_custom_target(generate-wayland-webos-protocols DEPENDS wayland-webos-protocols.hpp)
 # ToDo: turn this into a TARGET OBJECT. For now, a custum target doesnt play nice with

From 0edcd31c0fa14903116913086ef23a0e34d1977f Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 20:05:13 +1000
Subject: [PATCH 62/76] [cmake][modules] FindBluray cleanup and use
 core_target_link_libraries

---
 cmake/modules/FindBluray.cmake                | 24 +++++++++----------
 .../DVDInputStreams/CMakeLists.txt            |  2 +-
 xbmc/filesystem/CMakeLists.txt                |  2 +-
 xbmc/settings/CMakeLists.txt                  |  2 +-
 4 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/cmake/modules/FindBluray.cmake b/cmake/modules/FindBluray.cmake
index 30d27d9bdc1a3..2afb98841e0af 100644
--- a/cmake/modules/FindBluray.cmake
+++ b/cmake/modules/FindBluray.cmake
@@ -5,9 +5,9 @@
 #
 # This will define the following target:
 #
-#   Bluray::Bluray   - The libbluray library
+#   ${APP_NAME_LC}::Bluray   - The libbluray library
 
-if(NOT TARGET Bluray::Bluray)
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
 
   find_package(PkgConfig)
 
@@ -50,11 +50,11 @@ if(NOT TARGET Bluray::Bluray)
                                     VERSION_VAR BLURAY_VERSION)
 
   if(BLURAY_FOUND)
-    add_library(Bluray::Bluray UNKNOWN IMPORTED)
-    set_target_properties(Bluray::Bluray PROPERTIES
-                                         IMPORTED_LOCATION "${BLURAY_LIBRARY}"
-                                         INTERFACE_COMPILE_DEFINITIONS "HAVE_LIBBLURAY=1"
-                                         INTERFACE_INCLUDE_DIRECTORIES "${BLURAY_INCLUDEDIR}")
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} UNKNOWN IMPORTED)
+    set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                     IMPORTED_LOCATION "${BLURAY_LIBRARY}"
+                                                                     INTERFACE_COMPILE_DEFINITIONS "HAVE_LIBBLURAY=1"
+                                                                     INTERFACE_INCLUDE_DIRECTORIES "${BLURAY_INCLUDEDIR}")
 
     # Add link libraries for static lib usage
     if(${BLURAY_LIBRARY} MATCHES ".+\.a$" AND BLURAY_LINK_LIBRARIES)
@@ -64,15 +64,13 @@ if(NOT TARGET Bluray::Bluray)
       # Remove own library - eg libbluray.a
       list(FILTER BLURAY_LINK_LIBRARIES EXCLUDE REGEX ".*bluray.*\.a$")
 
-      set_target_properties(Bluray::Bluray PROPERTIES
-                                           INTERFACE_LINK_LIBRARIES "${BLURAY_LINK_LIBRARIES}")
+      set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                       INTERFACE_LINK_LIBRARIES "${BLURAY_LINK_LIBRARIES}")
     endif()
 
     if(NOT CORE_PLATFORM_NAME_LC STREQUAL windowsstore)
-      set_property(TARGET Bluray::Bluray APPEND PROPERTY
-                                                INTERFACE_COMPILE_DEFINITIONS "HAVE_LIBBLURAY_BDJ")
+      set_property(TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} APPEND PROPERTY
+                                                                            INTERFACE_COMPILE_DEFINITIONS "HAVE_LIBBLURAY_BDJ")
     endif()
-
-    set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP Bluray::Bluray)
   endif()
 endif()
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt b/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt
index 576ddda150a0a..6e3789c99dd43 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt
@@ -30,7 +30,7 @@ set(HEADERS BlurayStateSerializer.h
             InputStreamPVRChannel.h
             InputStreamPVRRecording.h)
 
-if(BLURAY_FOUND)
+if(TARGET ${APP_NAME_LC}::Bluray)
   list(APPEND SOURCES DVDInputStreamBluray.cpp)
   list(APPEND HEADERS DVDInputStreamBluray.h)
 endif()
diff --git a/xbmc/filesystem/CMakeLists.txt b/xbmc/filesystem/CMakeLists.txt
index 379cdc3a79f32..c0c699b8b9635 100644
--- a/xbmc/filesystem/CMakeLists.txt
+++ b/xbmc/filesystem/CMakeLists.txt
@@ -140,7 +140,7 @@ if(TARGET ${APP_NAME_LC}::Udfread)
                       UDFFile.h)
 endif()
 
-if(BLURAY_FOUND)
+if(TARGET ${APP_NAME_LC}::Bluray)
   list(APPEND SOURCES BlurayCallback.cpp
                       BlurayDirectory.cpp
                       BlurayFile.cpp)
diff --git a/xbmc/settings/CMakeLists.txt b/xbmc/settings/CMakeLists.txt
index d477f51d5d91f..8aff642054f1d 100644
--- a/xbmc/settings/CMakeLists.txt
+++ b/xbmc/settings/CMakeLists.txt
@@ -44,7 +44,7 @@ set(HEADERS AdvancedSettings.h
             SettingsComponent.h
             SubtitlesSettings.h)
 
-if(BLURAY_FOUND)
+if(TARGET ${APP_NAME_LC}::Bluray)
   list(APPEND SOURCES DiscSettings.cpp)
 endif()
 

From 7a44df063fc12394353b606adb5a4d5ede1f95e5 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 10:08:13 +1000
Subject: [PATCH 63/76] [cmake][interfaces/swig] Remove unused cmake variable

---
 xbmc/interfaces/swig/CMakeLists.txt | 1 -
 1 file changed, 1 deletion(-)

diff --git a/xbmc/interfaces/swig/CMakeLists.txt b/xbmc/interfaces/swig/CMakeLists.txt
index ae23c77261af4..9d9934cf00ba1 100644
--- a/xbmc/interfaces/swig/CMakeLists.txt
+++ b/xbmc/interfaces/swig/CMakeLists.txt
@@ -110,7 +110,6 @@ set(GROOVY_DIR ${CMAKE_SOURCE_DIR}/tools/codegenerator/groovy)
 
 foreach(INPUT IN LISTS INPUTS)
   generate_file(${INPUT})
-  list(APPEND GEN_SRCS ${CMAKE_CURRENT_BINARY_DIR}/${INPUT}.cpp)
 endforeach()
 
 add_library(python_binding STATIC ${SOURCES})

From b4209768a2e443cdf7da3fc9aac4fb2e230cca37 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 13:14:45 +1000
Subject: [PATCH 64/76] [cmake] Enable CMP0079

https://cmake.org/cmake/help/latest/policy/CMP0079.html

This allows using target_link_libraries to a target not in the same calling directory
---
 CMakeLists.txt | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 01bf6a1d7db07..a257f6c540101 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,6 +10,11 @@ if(POLICY CMP0069)
   cmake_policy(SET CMP0069 NEW)
 endif()
 
+if(POLICY CMP0079)
+  set(CMAKE_POLICY_DEFAULT_CMP0079 NEW)
+  cmake_policy(SET CMP0079 NEW)
+endif()
+
 if(POLICY CMP0135)
   set(CMAKE_POLICY_DEFAULT_CMP0135 NEW)
   cmake_policy(SET CMP0135 NEW)

From 521a5239f87bbef5385715a847531ad9a99eb5ab Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 10:14:50 +1000
Subject: [PATCH 65/76] [cmake][interfaces/swig] use modern target linking for
 python_binding

---
 xbmc/interfaces/swig/CMakeLists.txt | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/xbmc/interfaces/swig/CMakeLists.txt b/xbmc/interfaces/swig/CMakeLists.txt
index 9d9934cf00ba1..1951b2a336789 100644
--- a/xbmc/interfaces/swig/CMakeLists.txt
+++ b/xbmc/interfaces/swig/CMakeLists.txt
@@ -115,10 +115,6 @@ endforeach()
 add_library(python_binding STATIC ${SOURCES})
 set_target_properties(python_binding PROPERTIES POSITION_INDEPENDENT_CODE TRUE
                                                 FOLDER "Build Utilities")
-set(core_DEPENDS python_binding ${core_DEPENDS} CACHE STRING "" FORCE)
-
-# This target is not run through our regular macro's. Explicitly link required target
-target_link_libraries(python_binding PRIVATE ${APP_NAME_LC}::Spdlog)
 
 if(CORE_SYSTEM_NAME STREQUAL windowsstore)
   set_target_properties(python_binding PROPERTIES STATIC_LIBRARY_FLAGS "/ignore:4264")
@@ -127,3 +123,8 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
   set_target_properties(python_binding PROPERTIES
                         COMPILE_FLAGS -Wno-cast-function-type) # from -Wextra
 endif()
+
+# Add target dependencies to lib
+core_target_link_libraries(python_binding)
+# Link this target lib to core
+target_link_libraries(lib${APP_NAME_LC} PUBLIC python_binding)

From 90651ef6103cce5d33ef228309cba9fa2516bc32 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Thu, 16 May 2024 10:30:12 +1000
Subject: [PATCH 66/76] [cmake][libupnp] use target linking to core

---
 lib/libUPnP/CMakeLists.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/lib/libUPnP/CMakeLists.txt b/lib/libUPnP/CMakeLists.txt
index c610060649e19..313893e41d037 100644
--- a/lib/libUPnP/CMakeLists.txt
+++ b/lib/libUPnP/CMakeLists.txt
@@ -127,7 +127,9 @@ set_target_properties(upnp PROPERTIES CXX_CPPCHECK "")
 set_target_properties(upnp PROPERTIES CXX_INCLUDE_WHAT_YOU_USE "")
 set_target_properties(upnp PROPERTIES FOLDER lib)
 source_group_by_folder(upnp)
-set(core_DEPENDS upnp ${core_DEPENDS} CACHE STRING "" FORCE)
+
+# Link this target lib to core
+target_link_libraries(lib${APP_NAME_LC} PUBLIC upnp)
 
 if(CORE_SYSTEM_NAME STREQUAL windowsstore)
 	set_target_properties(upnp PROPERTIES STATIC_LIBRARY_FLAGS "/ignore:4264")

From 3f7e4292ea2b71ebbf30ff55ca0cc41954ca7976 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Fri, 17 May 2024 22:10:20 +1000
Subject: [PATCH 67/76] [cmake][macros] update core_link_library to allow
 targets for data_arg

---
 cmake/scripts/darwin_embedded/Macros.cmake | 8 +++++++-
 cmake/scripts/freebsd/Macros.cmake         | 8 +++++++-
 cmake/scripts/linux/Macros.cmake           | 8 +++++++-
 cmake/scripts/osx/Macros.cmake             | 8 +++++++-
 4 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/cmake/scripts/darwin_embedded/Macros.cmake b/cmake/scripts/darwin_embedded/Macros.cmake
index 5084bc1a54042..f101044b11082 100644
--- a/cmake/scripts/darwin_embedded/Macros.cmake
+++ b/cmake/scripts/darwin_embedded/Macros.cmake
@@ -37,7 +37,13 @@ function(core_link_library lib wraplib)
       list(APPEND export ${arg})
     endforeach()
   elseif(check_arg STREQUAL archives)
-    set(extra_libs ${data_arg})
+    foreach(_data_arg ${data_arg})
+      if(TARGET ${_data_arg})
+        list(APPEND extra_libs $<TARGET_FILE:_data_arg>)
+      else()
+        list(APPEND extra_libs ${_data_arg})
+      endif()
+    endforeach()
   endif()
   get_filename_component(dir ${wraplib} DIRECTORY)
 
diff --git a/cmake/scripts/freebsd/Macros.cmake b/cmake/scripts/freebsd/Macros.cmake
index ef5aed38d17a6..f1877cf1e4603 100644
--- a/cmake/scripts/freebsd/Macros.cmake
+++ b/cmake/scripts/freebsd/Macros.cmake
@@ -28,7 +28,13 @@ function(core_link_library lib wraplib)
       list(APPEND export ${arg})
     endforeach()
   elseif(check_arg STREQUAL archives)
-    set(extra_libs ${data_arg})
+    foreach(_data_arg ${data_arg})
+      if(TARGET ${_data_arg})
+        list(APPEND extra_libs $<TARGET_FILE:_data_arg>)
+      else()
+        list(APPEND extra_libs ${_data_arg})
+      endif()
+    endforeach()
   endif()
 
   string(REGEX REPLACE "[ ]+" ";" _flags "${CMAKE_SHARED_LINKER_FLAGS}")
diff --git a/cmake/scripts/linux/Macros.cmake b/cmake/scripts/linux/Macros.cmake
index 37243a77cdbc6..5ffb8171ebc7b 100644
--- a/cmake/scripts/linux/Macros.cmake
+++ b/cmake/scripts/linux/Macros.cmake
@@ -28,7 +28,13 @@ function(core_link_library lib wraplib)
       list(APPEND export ${arg})
     endforeach()
   elseif(check_arg STREQUAL archives)
-    set(extra_libs ${data_arg})
+    foreach(_data_arg ${data_arg})
+      if(TARGET ${_data_arg})
+        list(APPEND extra_libs $<TARGET_FILE:_data_arg>)
+      else()
+        list(APPEND extra_libs ${_data_arg})
+      endif()
+    endforeach()
   endif()
 
   string(REGEX REPLACE "[ ]+" ";" _flags "${CMAKE_SHARED_LINKER_FLAGS}")
diff --git a/cmake/scripts/osx/Macros.cmake b/cmake/scripts/osx/Macros.cmake
index f32a7358b5e38..6d41981db453d 100644
--- a/cmake/scripts/osx/Macros.cmake
+++ b/cmake/scripts/osx/Macros.cmake
@@ -24,7 +24,13 @@ function(core_link_library lib wraplib)
       list(APPEND export ${arg})
     endforeach()
   elseif(check_arg STREQUAL archives)
-    set(extra_libs ${data_arg})
+    foreach(_data_arg ${data_arg})
+      if(TARGET ${_data_arg})
+        list(APPEND extra_libs $<TARGET_FILE:_data_arg>)
+      else()
+        list(APPEND extra_libs ${_data_arg})
+      endif()
+    endforeach()
   endif()
   get_filename_component(dir ${wraplib} DIRECTORY)
 

From 8fbf5731dfb0e44e466eb5f581faad47d41f92df Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Fri, 17 May 2024 22:09:18 +1000
Subject: [PATCH 68/76] [cmake][modules] FindDvd* update target usage

---
 cmake/modules/FindLibDvd.cmake     | 19 ++++++-----------
 cmake/modules/FindLibDvdCSS.cmake  | 24 ++++++++--------------
 cmake/modules/FindLibDvdNav.cmake  | 33 +++++++++++++++---------------
 cmake/modules/FindLibDvdRead.cmake | 28 +++++++++----------------
 4 files changed, 41 insertions(+), 63 deletions(-)

diff --git a/cmake/modules/FindLibDvd.cmake b/cmake/modules/FindLibDvd.cmake
index dd7d8a26d2168..25277b587867d 100644
--- a/cmake/modules/FindLibDvd.cmake
+++ b/cmake/modules/FindLibDvd.cmake
@@ -5,25 +5,18 @@ set(FPHSA_NAME_MISMATCHED 1)
 find_package(LibDvdNav MODULE REQUIRED)
 unset(FPHSA_NAME_MISMATCHED)
 
-set(_dvdlibs ${LIBDVDREAD_LIBRARY} ${LIBDVDCSS_LIBRARY})
+set(_dvdlibs LibDvdNav::LibDvdNav
+             $<$<TARGET_EXISTS:LibDvdCSS::LibDvdCSS>:LibDvdCSS::LibDvdCSS>>)
 
 if(NOT CORE_SYSTEM_NAME MATCHES windows)
   # link a shared dvdnav library that includes the whole archives of dvdread and dvdcss as well
   # the quotes around _dvdlibs are on purpose, since we want to pass a list to the function that will be unpacked automatically
-  core_link_library(${LIBDVDNAV_LIBRARY} system/players/VideoPlayer/libdvdnav libdvdnav archives "${_dvdlibs}")
+  core_link_library(LibDvdNav::LibDvdNav system/players/VideoPlayer/libdvdnav libdvdnav archives "${_dvdlibs}")
 else()
   set(LIBDVD_TARGET_DIR .)
   copy_file_to_buildtree(${DEPENDS_PATH}/bin/libdvdnav.dll DIRECTORY ${LIBDVD_TARGET_DIR})
-  set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP LibDvdNav::LibDvdNav)
 endif()
 
-set(LIBDVD_INCLUDE_DIRS ${LIBDVDREAD_INCLUDE_DIR} ${LIBDVDNAV_INCLUDE_DIR})
-set(LIBDVD_LIBRARIES ${LIBDVDNAV_LIBRARY} ${LIBDVDREAD_LIBRARY})
-if(TARGET LibDvdCSS::LibDvdCSS)
-  list(APPEND LIBDVD_LIBRARIES ${LIBDVDCSS_LIBRARY})
-  list(APPEND LIBDVD_INCLUDE_DIRS ${LIBDVDCSS_INCLUDE_DIR})
-endif()
-set(LIBDVD_LIBRARIES ${LIBDVD_LIBRARIES} CACHE STRING "libdvd libraries" FORCE)
-set(LIBDVD_FOUND 1 CACHE BOOL "libdvd found" FORCE)
-
-mark_as_advanced(LIBDVD_INCLUDE_DIRS LIBDVD_LIBRARIES)
+add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} INTERFACE IMPORTED)
+set_target_properties(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} PROPERTIES
+                                                                 INTERFACE_LINK_LIBRARIES "LibDvdNav::LibDvdNav")
diff --git a/cmake/modules/FindLibDvdCSS.cmake b/cmake/modules/FindLibDvdCSS.cmake
index 742efd55836e0..ea8d92c407435 100644
--- a/cmake/modules/FindLibDvdCSS.cmake
+++ b/cmake/modules/FindLibDvdCSS.cmake
@@ -94,23 +94,17 @@ find_package_handle_standard_args(LibDvdCSS
                                   VERSION_VAR LIBDVDCSS_VERSION)
 
 if(LIBDVDCSS_FOUND)
-  if(NOT TARGET LibDvdCSS::LibDvdCSS)
-    add_library(LibDvdCSS::LibDvdCSS UNKNOWN IMPORTED)
-
-    set_target_properties(LibDvdCSS::LibDvdCSS PROPERTIES
-                                               IMPORTED_LOCATION "${LIBDVDCSS_LIBRARY}"
-                                               INTERFACE_COMPILE_DEFINITIONS "HAVE_DVDCSS_DVDCSS_H"
-                                               INTERFACE_INCLUDE_DIRECTORIES "${LIBDVDCSS_INCLUDE_DIR}")
-
-    if(TARGET libdvdcss)
-      add_dependencies(LibDvdCSS::LibDvdCSS libdvdcss)
-    endif()
+  add_library(LibDvdCSS::LibDvdCSS UNKNOWN IMPORTED)
+  set_target_properties(LibDvdCSS::LibDvdCSS PROPERTIES
+                                             IMPORTED_LOCATION "${LIBDVDCSS_LIBRARY}"
+                                             INTERFACE_COMPILE_DEFINITIONS "HAVE_DVDCSS_DVDCSS_H"
+                                             INTERFACE_INCLUDE_DIRECTORIES "${LIBDVDCSS_INCLUDE_DIR}")
+
+  if(TARGET libdvdcss)
+    add_dependencies(LibDvdCSS::LibDvdCSS libdvdcss)
   endif()
-
 else()
-  if(LIBDVDCSS_FIND_REQUIRED)
+  if(LibDvdCSS_FIND_REQUIRED)
     message(FATAL_ERROR "Libdvdcss not found. Possibly remove ENABLE_DVDCSS.")
   endif()
 endif()
-
-mark_as_advanced(LIBDVDCSS_INCLUDE_DIR LIBDVDCSS_LIBRARY)
diff --git a/cmake/modules/FindLibDvdNav.cmake b/cmake/modules/FindLibDvdNav.cmake
index ffd8d9d4d3b8f..fe319be03e400 100644
--- a/cmake/modules/FindLibDvdNav.cmake
+++ b/cmake/modules/FindLibDvdNav.cmake
@@ -67,7 +67,12 @@ if(NOT TARGET LibDvdNav::LibDvdNav)
                    ${LIBDVD_ADDITIONAL_ARGS})
   else()
 
-    string(APPEND LIBDVDNAV_CFLAGS " -I$<TARGET_PROPERTY:LibDvdRead::LibDvdRead,INTERFACE_INCLUDE_DIRECTORIES>")
+    # INTERFACE_INCLUDE_DIRECTORIES may have multiple paths. We need to separate these
+    # individually to then set the -I argument correctly with each path
+    get_target_property(_interface_include_dirs LibDvdRead::LibDvdRead INTERFACE_INCLUDE_DIRECTORIES)
+    foreach(_interface_include_dir ${_interface_include_dirs})
+      string(APPEND LIBDVDNAV_CFLAGS " -I${_interface_include_dir}")
+    endforeach()
 
     if(TARGET LibDvdCSS::LibDvdCSS)
       string(APPEND LIBDVDNAV_CFLAGS " -I$<TARGET_PROPERTY:LibDvdCSS::LibDvdCSS,INTERFACE_INCLUDE_DIRECTORIES> $<$<TARGET_EXISTS:LibDvdCSS::LibDvdCSS>:-D$<TARGET_PROPERTY:LibDvdCSS::LibDvdCSS,INTERFACE_COMPILE_DEFINITIONS>>")
@@ -114,25 +119,19 @@ find_package_handle_standard_args(LibDvdNav
                                   VERSION_VAR LIBDVDNAV_VERSION)
 
 if(LIBDVDNAV_FOUND)
-  if(NOT TARGET LibDvdNav::LibDvdNav)
-    add_library(LibDvdNav::LibDvdNav UNKNOWN IMPORTED)
+  add_library(LibDvdNav::LibDvdNav UNKNOWN IMPORTED)
+  set_target_properties(LibDvdNav::LibDvdNav PROPERTIES
+                                             IMPORTED_LOCATION "${LIBDVDNAV_LIBRARY}"
+                                             INTERFACE_INCLUDE_DIRECTORIES "${LIBDVDNAV_INCLUDE_DIR}")
 
-    set_target_properties(LibDvdNav::LibDvdNav PROPERTIES
-                                               IMPORTED_LOCATION "${LIBDVDNAV_LIBRARY}"
-                                               INTERFACE_INCLUDE_DIRECTORIES "${LIBDVDNAV_INCLUDE_DIR}")
-
-    if(TARGET libdvdnav)
-      add_dependencies(LibDvdNav::LibDvdNav libdvdnav)
-    endif()
-    if(TARGET LibDvdRead::LibDvdRead)
-      add_dependencies(LibDvdNav::LibDvdNav LibDvdRead::LibDvdRead)
-    endif()
+  if(TARGET libdvdnav)
+    add_dependencies(LibDvdNav::LibDvdNav libdvdnav)
+  endif()
+  if(TARGET LibDvdRead::LibDvdRead)
+    target_link_libraries(LibDvdNav::LibDvdNav INTERFACE LibDvdRead::LibDvdRead)
   endif()
-  set_property(GLOBAL APPEND PROPERTY INTERNAL_DEPS_PROP LibDvdNav::LibDvdNav)
 else()
-  if(LIBDVDNAV_FIND_REQUIRED)
+  if(LibDvdNav_FIND_REQUIRED)
     message(FATAL_ERROR "Libdvdnav not found")
   endif()
 endif()
-
-mark_as_advanced(LIBDVDNAV_INCLUDE_DIR LIBDVDNAV_LIBRARY)
diff --git a/cmake/modules/FindLibDvdRead.cmake b/cmake/modules/FindLibDvdRead.cmake
index b67ff904eda9b..9f590343af5ab 100644
--- a/cmake/modules/FindLibDvdRead.cmake
+++ b/cmake/modules/FindLibDvdRead.cmake
@@ -116,27 +116,19 @@ find_package_handle_standard_args(LibDvdRead
                                   VERSION_VAR LIBDVDREAD_VERSION)
 
 if(LIBDVDREAD_FOUND)
-  if(NOT TARGET LibDvdRead::LibDvdRead)
-    add_library(LibDvdRead::LibDvdRead UNKNOWN IMPORTED)
+  add_library(LibDvdRead::LibDvdRead UNKNOWN IMPORTED)
+  set_target_properties(LibDvdRead::LibDvdRead PROPERTIES
+                                               IMPORTED_LOCATION "${LIBDVDREAD_LIBRARY}"
+                                               INTERFACE_INCLUDE_DIRECTORIES "${LIBDVDREAD_INCLUDE_DIR}")
 
-    set_target_properties(LibDvdRead::LibDvdRead PROPERTIES
-                                                 IMPORTED_LOCATION "${LIBDVDREAD_LIBRARY}"
-                                                 INTERFACE_INCLUDE_DIRECTORIES "${LIBDVDREAD_INCLUDE_DIR}")
-
-    if(TARGET libdvdread)
-      add_dependencies(LibDvdRead::LibDvdRead libdvdread)
-    endif()
-    if(TARGET LibDvdCSS::LibDvdCSS)
-      add_dependencies(LibDvdRead::LibDvdRead LibDvdCSS::LibDvdCSS)
-      set_target_properties(LibDvdRead::LibDvdRead PROPERTIES
-                                                   INTERFACE_LINK_LIBRARIES "dvdcss")
-    endif()
+  if(TARGET libdvdread)
+    add_dependencies(LibDvdRead::LibDvdRead libdvdread)
+  endif()
+  if(TARGET LibDvdCSS::LibDvdCSS)
+    target_link_libraries(LibDvdRead::LibDvdRead INTERFACE LibDvdCSS::LibDvdCSS)
   endif()
-
 else()
-  if(LIBDVDREAD_FIND_REQUIRED)
+  if(LibDvdRead_FIND_REQUIRED)
     message(FATAL_ERROR "Libdvdread not found")
   endif()
 endif()
-
-mark_as_advanced(LIBDVDREAD_INCLUDE_DIR LIBDVDREAD_LIBRARY)

From 53a613db1297b2567e5f01d3eae35d6e16644a0e Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Fri, 17 May 2024 22:11:36 +1000
Subject: [PATCH 69/76] [cmake] Remove global property usage for dependency
 tracking

---
 CMakeLists.txt                         | 12 +-----------
 cmake/scripts/common/Macros.cmake      |  5 +----
 cmake/scripts/linux/ExtraTargets.cmake |  3 +--
 cmake/scripts/webos/ExtraTargets.cmake |  3 +--
 4 files changed, 4 insertions(+), 19 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a257f6c540101..f25dee01fe250 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -134,9 +134,6 @@ if(CORE_SYSTEM_NAME STREQUAL linux)
   option(ADDONS_CONFIGURE_AT_STARTUP "Configure binary addons at startup?" ON)
 endif()
 
-# set scope of INTERNAL_DEPS
-set_property(GLOBAL PROPERTY INTERNAL_DEPS_PROP)
-
 # Build static libraries per directory
 if(NOT CMAKE_GENERATOR MATCHES "Visual Studio" AND NOT CMAKE_GENERATOR STREQUAL Xcode)
   set(ENABLE_STATIC_LIBS TRUE)
@@ -377,9 +374,6 @@ elseif(CORE_SYSTEM_NAME STREQUAL android)
                  ${CORE_BUILD_DIR}/DllPaths_generated_android.h @ONLY)
 endif()
 
-get_property(INTERNAL_DEPS GLOBAL PROPERTY INTERNAL_DEPS_PROP)
-set(GLOBAL_TARGET_DEPS ${INTERNAL_DEPS} ${PLATFORM_GLOBAL_TARGET_DEPS})
-
 # main library (used for main binary and tests)
 if(CORE_SYSTEM_NAME STREQUAL "darwin_embedded")
   # $<TARGET_OBJECTS:> as at 3.26.4 provides incorrect paths for ios/tvos platforms
@@ -396,7 +390,6 @@ if(CORE_SYSTEM_NAME STREQUAL "darwin_embedded")
 else()
   add_library(lib${APP_NAME_LC} STATIC $<TARGET_OBJECTS:compileinfo>)
 endif()
-add_dependencies(lib${APP_NAME_LC} ${GLOBAL_TARGET_DEPS})
 set_target_properties(lib${APP_NAME_LC} PROPERTIES PREFIX "")
 
 # Other files (IDE)
@@ -413,7 +406,7 @@ core_add_subdirs_from_filelist(${CMAKE_SOURCE_DIR}/cmake/treedata/common/*.txt
 core_add_optional_subdirs_from_filelist(${CMAKE_SOURCE_DIR}/cmake/treedata/optional/common/*.txt
                                         ${CMAKE_SOURCE_DIR}/cmake/treedata/optional/${CORE_SYSTEM_NAME}/*.txt)
 
-target_link_libraries(lib${APP_NAME_LC} PUBLIC ${core_DEPENDS} ${SYSTEM_LDFLAGS} ${DEPLIBS} ${CMAKE_DL_LIBS} ${GLOBAL_TARGET_DEPS})
+target_link_libraries(lib${APP_NAME_LC} PUBLIC ${core_DEPENDS} ${SYSTEM_LDFLAGS} ${DEPLIBS} ${CMAKE_DL_LIBS})
 core_target_link_libraries(lib${APP_NAME_LC})
 set_target_properties(lib${APP_NAME_LC} PROPERTIES PROJECT_LABEL "xbmc")
 source_group_by_folder(lib${APP_NAME_LC} RELATIVE ${CMAKE_SOURCE_DIR}/xbmc)
@@ -493,9 +486,6 @@ add_custom_target(gen_skin_pack DEPENDS ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/${
 # Packaging target. This generates system addon, xbt creation, copy files to build tree
 add_custom_target(generate-packaging ALL
                   DEPENDS TexturePacker::TexturePacker::Executable export-files gen_skin_pack gen_system_addons)
-# Make sure we build any libs before we look to export-files.
-# We may need to export some shared libs/data (eg Python)
-add_dependencies(export-files ${GLOBAL_TARGET_DEPS})
 
 # Add to lib${APP_NAME_LC} solely for Win UWP. msix building doesnt seem to pick up the
 # generated buildtree if we do it later. Other platforms dont care when this happens.
diff --git a/cmake/scripts/common/Macros.cmake b/cmake/scripts/common/Macros.cmake
index 84ca11ec889c4..89c481b21d694 100644
--- a/cmake/scripts/common/Macros.cmake
+++ b/cmake/scripts/common/Macros.cmake
@@ -72,12 +72,9 @@ function(core_add_library name)
     add_library(${name} STATIC ${SOURCES} ${HEADERS} ${OTHERS})
     set_target_properties(${name} PROPERTIES PREFIX "")
     set(core_DEPENDS ${name} ${core_DEPENDS} CACHE STRING "" FORCE)
-    add_dependencies(${name} ${GLOBAL_TARGET_DEPS})
 
     # Adds global target to library. This propagates dep lib info (eg include_dir locations)
     core_target_link_libraries(${name})
-    # ToDo: remove the next line when the GLOBAL_TARGET_DEPS is removed completely
-    target_link_libraries(${name} PRIVATE ${GLOBAL_TARGET_DEPS})
 
     set(CORE_LIBRARY ${name} PARENT_SCOPE)
 
@@ -107,7 +104,7 @@ function(core_add_test_library name)
     set_target_properties(${name} PROPERTIES PREFIX ""
                                              EXCLUDE_FROM_ALL 1
                                              FOLDER "Build Utilities/tests")
-    add_dependencies(${name} ${GLOBAL_TARGET_DEPS})
+
     set(test_archives ${test_archives} ${name} CACHE STRING "" FORCE)
 
     if(NOT MSVC)
diff --git a/cmake/scripts/linux/ExtraTargets.cmake b/cmake/scripts/linux/ExtraTargets.cmake
index 37156923b9c8d..36757cef4125b 100644
--- a/cmake/scripts/linux/ExtraTargets.cmake
+++ b/cmake/scripts/linux/ExtraTargets.cmake
@@ -35,7 +35,6 @@ if("wayland" IN_LIST CORE_PLATFORM_NAME_LC)
 
   # Dummy target for dependencies
   add_custom_target(generate-wayland-extra-protocols DEPENDS wayland-extra-protocols.hpp)
-  # ToDo: turn this into a TARGET OBJECT. For now, a custum target doesnt play nice with
-  # our PLATFORM_GLOBAL_TARGET_DEPS usage in macros
+
   add_dependencies(lib${APP_NAME_LC} generate-wayland-extra-protocols)
 endif()
diff --git a/cmake/scripts/webos/ExtraTargets.cmake b/cmake/scripts/webos/ExtraTargets.cmake
index 46c78edf624dc..92ef6b62fa89d 100644
--- a/cmake/scripts/webos/ExtraTargets.cmake
+++ b/cmake/scripts/webos/ExtraTargets.cmake
@@ -8,6 +8,5 @@ add_custom_command(OUTPUT "${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos
                   DEPENDS wayland::waylandppscanner ${WEBOS_PROTOCOL_XMLS}
                   COMMENT "Generating wayland-webos C++ wrappers")
 add_custom_target(generate-wayland-webos-protocols DEPENDS wayland-webos-protocols.hpp)
-# ToDo: turn this into a TARGET OBJECT. For now, a custum target doesnt play nice with
-# our PLATFORM_GLOBAL_TARGET_DEPS usage in macros
+
 add_dependencies(lib${APP_NAME_LC} generate-wayland-webos-protocols)

From 1096328c17233f3d9441dd297c6e6389b0d79dc7 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Fri, 17 May 2024 22:37:49 +1000
Subject: [PATCH 70/76] [cmake] Document some variables and their expected
 usage

---
 CMakeLists.txt | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f25dee01fe250..d37acb07fe3d6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -406,6 +406,9 @@ core_add_subdirs_from_filelist(${CMAKE_SOURCE_DIR}/cmake/treedata/common/*.txt
 core_add_optional_subdirs_from_filelist(${CMAKE_SOURCE_DIR}/cmake/treedata/optional/common/*.txt
                                         ${CMAKE_SOURCE_DIR}/cmake/treedata/optional/${CORE_SYSTEM_NAME}/*.txt)
 
+# core_DEPENDS: these are the artifact/object files of /xbmc/*
+# SYSTEM_LDFLAGS: system linker flags
+# DEPLIBS: system libraries for linking
 target_link_libraries(lib${APP_NAME_LC} PUBLIC ${core_DEPENDS} ${SYSTEM_LDFLAGS} ${DEPLIBS} ${CMAKE_DL_LIBS})
 core_target_link_libraries(lib${APP_NAME_LC})
 set_target_properties(lib${APP_NAME_LC} PROPERTIES PROJECT_LABEL "xbmc")

From 3f5880e2719e3bfe38497d4692a873ad0a58b8b7 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sat, 18 May 2024 18:59:28 +1000
Subject: [PATCH 71/76] [cmake][modules] Introduce FindSSL to leverage cmake
 system FindOpenSSL

With full target usage, and removal of globals like *_LIBRARIES, *_INCLUDE_DIRS
we introduce a wrapper find module that still uses cmakes system find_package(OpenSSL)
and make an alias using "our" standard
---
 CMakeLists.txt              |  2 +-
 cmake/modules/FindSSL.cmake | 34 ++++++++++++++++++++++++++++++++++
 2 files changed, 35 insertions(+), 1 deletion(-)
 create mode 100644 cmake/modules/FindSSL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d37acb07fe3d6..ce8f97a65f6c9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -216,11 +216,11 @@ set(required_deps ASS>=0.15.0
                   Iconv
                   LibDvd
                   Lzo2
-                  OpenSSL>=1.1.0
                   PCRE
                   RapidJSON>=1.0.2
                   Spdlog
                   Sqlite3
+                  SSL>=1.1.0
                   TagLib>=1.9.0
                   TinyXML
                   TinyXML2
diff --git a/cmake/modules/FindSSL.cmake b/cmake/modules/FindSSL.cmake
new file mode 100644
index 0000000000000..7a162785ff289
--- /dev/null
+++ b/cmake/modules/FindSSL.cmake
@@ -0,0 +1,34 @@
+# FindSSL
+# -----------
+# Finds the Openssl libraries
+#
+# This will define the following target:
+#
+#   ${APP_NAME_LC}::SSL - The OpenSSL libraries
+
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+  if(SSLFIND_REQUIRED)
+    set(REQ "REQUIRED")
+  endif()
+
+  # Only aim for static libs on windows or depends builds
+  if(KODI_DEPENDSBUILD OR (WIN32 OR WINDOWS_STORE))
+    set(OPENSSL_USE_STATIC_LIBS ON)
+    set(OPENSSL_ROOT_DIR ${DEPENDS_PATH})
+  endif()
+  find_package(OpenSSL ${REQ})
+  unset(OPENSSL_USE_STATIC_LIBS)
+
+  if(OPENSSL_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS OpenSSL::SSL)
+    add_library(${APP_NAME_LC}::Crypto ALIAS OpenSSL::Crypto)
+
+    # Add Crypto as a link library to easily propagate both targets to our custom target
+    set_target_properties(OpenSSL::SSL PROPERTIES
+                                       INTERFACE_LINK_LIBRARIES "${APP_NAME_LC}::Crypto")
+  else()
+    if(SSL_FIND_REQUIRED)
+      message(FATAL_ERROR "SSL libraries were not found.")
+    endif()
+  endif()
+endif()

From 87da449ddc9d71ea9e9431215a5fa3b2b3d134d2 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sat, 18 May 2024 19:02:18 +1000
Subject: [PATCH 72/76] [cmake][modules] Introduce FindlibZlib to leverage
 cmake system FindZLIB

With full target usage, and removal of globals like *_LIBRARIES, *_INCLUDE_DIRS
we introduce a wrapper find module that still uses cmakes system find_package(ZLIB)
and make an alias using "our" standard for macro usage
---
 CMakeLists.txt                  |  2 +-
 cmake/modules/FindlibZlib.cmake | 39 +++++++++++++++++++++++++++++++++
 2 files changed, 40 insertions(+), 1 deletion(-)
 create mode 100644 cmake/modules/FindlibZlib.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ce8f97a65f6c9..f168d414f2876 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -215,6 +215,7 @@ set(required_deps ASS>=0.15.0
                   HarfBuzz
                   Iconv
                   LibDvd
+                  libZlib
                   Lzo2
                   PCRE
                   RapidJSON>=1.0.2
@@ -224,7 +225,6 @@ set(required_deps ASS>=0.15.0
                   TagLib>=1.9.0
                   TinyXML
                   TinyXML2
-                  ZLIB
                   ${PLATFORM_REQUIRED_DEPS})
 
 # Optional dependencies. Keep in alphabetical order please
diff --git a/cmake/modules/FindlibZlib.cmake b/cmake/modules/FindlibZlib.cmake
new file mode 100644
index 0000000000000..d054f223a50fc
--- /dev/null
+++ b/cmake/modules/FindlibZlib.cmake
@@ -0,0 +1,39 @@
+# FindlibZlib
+# -----------
+# Finds the zlib library
+#
+# We use the odd name of libZlib to allow us to leverage the cmake system
+# find module, and package the target into our setup
+#
+# This will define the following target:
+#
+#   ${APP_NAME_LC}::libZlib - The zlib library
+
+if(NOT TARGET ${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME})
+
+  if(Zlib_FIND_REQUIRED)
+    set(REQ "REQUIRED")
+  endif()
+
+  if(KODI_DEPENDSBUILD OR (WIN32 OR WINDOWS_STORE))
+    set(ZLIB_ROOT ${DEPENDS_PATH})
+  endif()
+
+  # Darwin platforms link against toolchain provided zlib regardless
+  # They will fail when searching for static. All other platforms, prefer static
+  # if possible (requires cmake 3.24+ otherwise variable is a no-op)
+  # Windows still uses dynamic lib for zlib for other purposes, dont mix
+  if(NOT CMAKE_SYSTEM_NAME MATCHES "Darwin" AND NOT (WIN32 OR WINDOWS_STORE))
+    set(ZLIB_USE_STATIC_LIBS ON)
+  endif()
+  find_package(ZLIB ${REQ})
+  unset(ZLIB_USE_STATIC_LIBS)
+
+  if(ZLIB_FOUND)
+    add_library(${APP_NAME_LC}::${CMAKE_FIND_PACKAGE_NAME} ALIAS ZLIB::ZLIB)
+  else()
+    if(Zlib_FIND_REQUIRED)
+      message(FATAL_ERROR "Zlib libraries were not found.")
+    endif()
+  endif()
+endif()

From fe94745c2ec80dfc2507704e5ed0864109224f42 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Fri, 17 May 2024 22:38:29 +1000
Subject: [PATCH 73/76] [cmake] remove several non target globals

---
 CMakeLists.txt                       |  2 +-
 cmake/scripts/common/ArchSetup.cmake |  1 -
 cmake/scripts/common/Macros.cmake    | 23 +----------------------
 3 files changed, 2 insertions(+), 24 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f168d414f2876..4b49c2adfb59e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -345,7 +345,7 @@ endif()
 # Generate messages
 core_add_subdirs_from_filelist(${CMAKE_SOURCE_DIR}/cmake/messages/flatbuffers/*.txt)
 
-include_directories(${INCLUDES} SYSTEM ${SYSTEM_INCLUDES})
+include_directories(${INCLUDES})
 add_compile_options(${ARCH_DEFINES} "${SYSTEM_DEFINES}" ${DEP_DEFINES} ${PATH_DEFINES})
 
 set(core_DEPENDS "" CACHE STRING "" FORCE)
diff --git a/cmake/scripts/common/ArchSetup.cmake b/cmake/scripts/common/ArchSetup.cmake
index a83d2ae198075..0461496bf5a98 100644
--- a/cmake/scripts/common/ArchSetup.cmake
+++ b/cmake/scripts/common/ArchSetup.cmake
@@ -8,7 +8,6 @@
 # ARCH - the system architecture
 # ARCH_DEFINES - list of compiler definitions for this architecture
 # SYSTEM_DEFINES - list of compiler definitions for this system
-# DEP_DEFINES - compiler definitions for system dependencies (e.g. LIRC)
 # + the results of compiler tests etc.
 
 # workaround a bug in older cmake, where binutils wouldn't be set after deleting CMakeCache.txt
diff --git a/cmake/scripts/common/Macros.cmake b/cmake/scripts/common/Macros.cmake
index 89c481b21d694..11ad3b6bb5dd5 100644
--- a/cmake/scripts/common/Macros.cmake
+++ b/cmake/scripts/common/Macros.cmake
@@ -356,15 +356,6 @@ function(copy_files_from_filelist_to_buildtree pattern)
   set(install_data ${install_data} PARENT_SCOPE)
 endfunction()
 
-# helper macro to set modified variables in parent scope
-macro(export_dep)
-  set(SYSTEM_INCLUDES ${SYSTEM_INCLUDES} PARENT_SCOPE)
-  set(DEPLIBS ${DEPLIBS} PARENT_SCOPE)
-  set(DEP_DEFINES ${DEP_DEFINES} PARENT_SCOPE)
-  set(${depup}_FOUND ${${depup}_FOUND} PARENT_SCOPE)
-  mark_as_advanced(${depup}_LIBRARIES)
-endmacro()
-
 # split dependency specification to name and version
 # Arguments:
 #   depspec dependency specification that can optionally include a required
@@ -407,17 +398,11 @@ endmacro()
 # Arguments:
 #   dep_list One or many dependency specifications (see split_dependency_specification)
 #            for syntax). The dependency name is used uppercased as variable prefix.
-# On return:
-#   dependencies added to ${SYSTEM_INCLUDES}, ${DEPLIBS} and ${DEP_DEFINES}
 function(core_require_dep)
   foreach(depspec ${ARGN})
     split_dependency_specification(${depspec} dep version)
     find_package_with_ver(${dep} ${version} REQUIRED)
     string(TOUPPER ${dep} depup)
-    list(APPEND SYSTEM_INCLUDES ${${depup}_INCLUDE_DIRS})
-    list(APPEND DEPLIBS ${${depup}_LIBRARIES})
-    list(APPEND DEP_DEFINES ${${depup}_DEFINITIONS})
-    export_dep()
 
     # We dont want to add a build tool
     if (NOT ${depspec} IN_LIST optional_buildtools AND NOT ${depspec} IN_LIST required_buildtools)
@@ -446,8 +431,6 @@ endmacro()
 # Arguments:
 #   dep_list One or many dependency specifications (see split_dependency_specification)
 #            for syntax). The dependency name is used uppercased as variable prefix.
-# On return:
-#   dependency optionally added to ${SYSTEM_INCLUDES}, ${DEPLIBS} and ${DEP_DEFINES}
 function(core_optional_dep)
   foreach(depspec ${ARGN})
     set(_required False)
@@ -460,12 +443,8 @@ function(core_optional_dep)
       set(_required True)
     endif()
 
-    if(${depup}_FOUND OR TARGET kodi::${dep})
-      list(APPEND SYSTEM_INCLUDES ${${depup}_INCLUDE_DIRS})
-      list(APPEND DEPLIBS ${${depup}_LIBRARIES})
-      list(APPEND DEP_DEFINES ${${depup}_DEFINITIONS})
+    if(TARGET kodi::${dep})
       set(final_message ${final_message} "${depup} enabled: Yes")
-      export_dep()
 
       # We dont want to add a build tool
       if (NOT ${depspec} IN_LIST optional_buildtools AND NOT ${depspec} IN_LIST required_buildtools)

From 45d4aa68b1e0cb6430e571f01ebf65aa9aec0f1a Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sat, 18 May 2024 08:51:56 +1000
Subject: [PATCH 74/76] [cmake] relocate rfc2822stamp into CPackConfigDEB

This function is only used in CPackConfigDEB, so move out of generic Macros.cmake
---
 cmake/cpack/CPackConfigDEB.cmake  | 12 ++++++++++++
 cmake/scripts/common/Macros.cmake | 10 ----------
 2 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/cmake/cpack/CPackConfigDEB.cmake b/cmake/cpack/CPackConfigDEB.cmake
index 9aa687d5dcfe2..ef5504de148b0 100644
--- a/cmake/cpack/CPackConfigDEB.cmake
+++ b/cmake/cpack/CPackConfigDEB.cmake
@@ -1,6 +1,18 @@
 # include Macros.cmake to automate generation of time/date stamps, maintainer, etc.
 include(${CMAKE_SOURCE_DIR}/cmake/scripts/common/Macros.cmake)
 
+# Function only used in CPackConfigDEB
+
+# Generates an RFC2822 timestamp
+#
+# The following variable is set:
+#   RFC2822_TIMESTAMP
+function(rfc2822stamp)
+  execute_process(COMMAND date -R
+                  OUTPUT_VARIABLE RESULT)
+  set(RFC2822_TIMESTAMP ${RESULT} PARENT_SCOPE)
+endfunction()
+
 # find stuff we need
 find_program(LSB_RELEASE_CMD lsb_release)
 find_program(DPKG_CMD dpkg)
diff --git a/cmake/scripts/common/Macros.cmake b/cmake/scripts/common/Macros.cmake
index 11ad3b6bb5dd5..29201dd1b9103 100644
--- a/cmake/scripts/common/Macros.cmake
+++ b/cmake/scripts/common/Macros.cmake
@@ -556,16 +556,6 @@ macro(core_add_optional_subdirs_from_filelist pattern)
   endforeach()
 endmacro()
 
-# Generates an RFC2822 timestamp
-#
-# The following variable is set:
-#   RFC2822_TIMESTAMP
-function(rfc2822stamp)
-  execute_process(COMMAND date -R
-                  OUTPUT_VARIABLE RESULT)
-  set(RFC2822_TIMESTAMP ${RESULT} PARENT_SCOPE)
-endfunction()
-
 # Generates an user stamp from git config info
 #
 # The following variable is set:

From d67f9fc1deb031b4b97dd8c6d3df8e079c20477f Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sat, 18 May 2024 08:54:49 +1000
Subject: [PATCH 75/76] [cmake] relocate userstamp function into CPackConfigDEB

userstamp is only used in CPackConfigDEB. remove out of Macros.cmake
---
 cmake/cpack/CPackConfigDEB.cmake  | 22 ++++++++++++++++++++++
 cmake/scripts/common/Macros.cmake | 22 ----------------------
 2 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/cmake/cpack/CPackConfigDEB.cmake b/cmake/cpack/CPackConfigDEB.cmake
index ef5504de148b0..d3eaf6c7d71e5 100644
--- a/cmake/cpack/CPackConfigDEB.cmake
+++ b/cmake/cpack/CPackConfigDEB.cmake
@@ -13,6 +13,28 @@ function(rfc2822stamp)
   set(RFC2822_TIMESTAMP ${RESULT} PARENT_SCOPE)
 endfunction()
 
+# Generates an user stamp from git config info
+#
+# The following variable is set:
+#   PACKAGE_MAINTAINER - user stamp in the form of "username <username@example.com>"
+#                        if no git tree is found, value is set to "nobody <nobody@example.com>"
+function(userstamp)
+  find_package(Git)
+  if(GIT_FOUND AND EXISTS ${CMAKE_SOURCE_DIR}/.git)
+    execute_process(COMMAND ${GIT_EXECUTABLE} config user.name
+                    OUTPUT_VARIABLE username
+                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+                    OUTPUT_STRIP_TRAILING_WHITESPACE)
+    execute_process(COMMAND ${GIT_EXECUTABLE} config user.email
+                    OUTPUT_VARIABLE useremail
+                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+                    OUTPUT_STRIP_TRAILING_WHITESPACE)
+    set(PACKAGE_MAINTAINER "${username} <${useremail}>" PARENT_SCOPE)
+  else()
+    set(PACKAGE_MAINTAINER "nobody <nobody@example.com>" PARENT_SCOPE)
+  endif()
+endfunction()
+
 # find stuff we need
 find_program(LSB_RELEASE_CMD lsb_release)
 find_program(DPKG_CMD dpkg)
diff --git a/cmake/scripts/common/Macros.cmake b/cmake/scripts/common/Macros.cmake
index 29201dd1b9103..c19af510eca70 100644
--- a/cmake/scripts/common/Macros.cmake
+++ b/cmake/scripts/common/Macros.cmake
@@ -556,28 +556,6 @@ macro(core_add_optional_subdirs_from_filelist pattern)
   endforeach()
 endmacro()
 
-# Generates an user stamp from git config info
-#
-# The following variable is set:
-#   PACKAGE_MAINTAINER - user stamp in the form of "username <username@example.com>"
-#                        if no git tree is found, value is set to "nobody <nobody@example.com>"
-function(userstamp)
-  find_package(Git)
-  if(GIT_FOUND AND EXISTS ${CMAKE_SOURCE_DIR}/.git)
-    execute_process(COMMAND ${GIT_EXECUTABLE} config user.name
-                    OUTPUT_VARIABLE username
-                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
-                    OUTPUT_STRIP_TRAILING_WHITESPACE)
-    execute_process(COMMAND ${GIT_EXECUTABLE} config user.email
-                    OUTPUT_VARIABLE useremail
-                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
-                    OUTPUT_STRIP_TRAILING_WHITESPACE)
-    set(PACKAGE_MAINTAINER "${username} <${useremail}>" PARENT_SCOPE)
-  else()
-    set(PACKAGE_MAINTAINER "nobody <nobody@example.com>" PARENT_SCOPE)
-  endif()
-endfunction()
-
 # Parses git info and sets variables used to identify the build
 # Arguments:
 #   stamp variable name to return

From 030d0ac677c838afc1a60856391f1e7a4aeecf25 Mon Sep 17 00:00:00 2001
From: fuzzard <fuzzard@kodi.tv>
Date: Sat, 18 May 2024 09:39:20 +1000
Subject: [PATCH 76/76] [cmake] remove unused variable LIBCEC_SONAME

---
 CMakeLists.txt | 1 -
 1 file changed, 1 deletion(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4b49c2adfb59e..507fe4e8e1407 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -365,7 +365,6 @@ if(NOT ${CORE_SYSTEM_NAME} MATCHES "windows")
   file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/system/players/VideoPlayer)
 endif()
 
-set(LIBCEC_SONAME "${CEC_SONAME}")
 if(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL android AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)
   configure_file(${CMAKE_SOURCE_DIR}/xbmc/DllPaths_generated.h.in
                  ${CORE_BUILD_DIR}/DllPaths_generated.h @ONLY)
