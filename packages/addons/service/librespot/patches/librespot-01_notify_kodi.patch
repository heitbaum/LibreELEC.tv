commit 10489ef0b9de4241eb8e007596f3d62616120545
Author: awiouy <awiouy@gmail.com>
Date:   Fri May 29 07:40:19 2020 +0200

    Notify Kodi

diff --git a/core/src/spotify_id.rs b/core/src/spotify_id.rs
index 1a5fcd2..c670977 100644
--- a/core/src/spotify_id.rs
+++ b/core/src/spotify_id.rs
@@ -10,6 +10,12 @@
     Podcast,
     NonPlayable,
 }
+ 
+impl fmt::Display for SpotifyAudioType {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{:?}", self)
+    }
+}
 
 impl From<&str> for SpotifyAudioType {
     fn from(v: &str) -> Self {
diff --git a/playback/src/config.rs b/playback/src/config.rs
index 9d65042..6d098db 100644
--- a/playback/src/config.rs
+++ b/playback/src/config.rs
@@ -139,6 +139,7 @@
     // pass function pointers so they can be lazily instantiated *after* spawning a thread
     // (thereby circumventing Send bounds that they might not satisfy)
     pub ditherer: Option<DithererBuilder>,
+    pub notify_kodi: bool,
 }
 
 impl Default for PlayerConfig {
@@ -156,6 +157,7 @@
             normalisation_knee_db: 5.0,
             passthrough: false,
             ditherer: Some(mk_ditherer::<TriangularDitherer>),
+            notify_kodi: false,
         }
     }
 }
diff --git a/playback/src/player.rs b/playback/src/player.rs
index 2dd8f3b..67b3b28 100644
--- a/playback/src/player.rs
+++ b/playback/src/player.rs
@@ -1912,6 +1912,10 @@
         }
     }
 
+    fn notify_kodi(&mut self, event: String) {
+        eprintln!("@{}", event);
+    }
+
     fn send_event(&mut self, event: PlayerEvent) {
         self.event_senders
             .retain(|sender| sender.send(event.clone()).is_ok());
@@ -1970,6 +1974,16 @@ impl PlayerInternal {
                 }
             }
         }
+        if self.config.notify_kodi {
+            use PlayerEvent::*;
+            match event {
+                Playing {track_id, .. } => self.notify_kodi(["Playing",
+                                               &track_id.audio_type.to_string(),
+                                               &track_id.to_base62()].join(" ")),
+                Stopped { .. } => self.notify_kodi("Stopped".to_string()),
+                _ => ()
+            }
+        }
     }
 
     fn load_track(
diff --git a/src/main.rs b/src/main.rs
index 2efd62b..ecee2ff 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -380,6 +380,11 @@
         ENABLE_VOLUME_NORMALISATION_SHORT,
         ENABLE_VOLUME_NORMALISATION,
         "Play all tracks at approximately the same apparent volume.",
+    )
+    .optflag(
+        "",
+        "notify-kodi",
+        "Notify Kodi",
     )
     .optopt(
         NAME_SHORT,
@@ -1239,6 +1239,8 @@
         }
     };
 
+    let notify_kodi = matches.opt_present("notify-kodi");
+
     let session_config = SessionConfig {
         user_agent: version::VERSION_STRING.to_string(),
         device_id: device_id(&connect_config.name),
@@ -1535,6 +1540,7 @@
             normalisation_release_cf,
             normalisation_knee_db,
             ditherer,
+            notify_kodi: notify_kodi,
         }
     };
 
